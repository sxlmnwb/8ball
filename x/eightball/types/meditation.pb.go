// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: eightball/eightball/meditation.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Meditation struct {
	Id          uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	FromSpirit  string   `protobuf:"bytes,2,opt,name=fromSpirit,proto3" json:"fromSpirit,omitempty"`
	ToSpirit    []string `protobuf:"bytes,3,rep,name=toSpirit,proto3" json:"toSpirit,omitempty"`
	WireBytes   string   `protobuf:"bytes,4,opt,name=wireBytes,proto3" json:"wireBytes,omitempty"`
	Broadcast   bool     `protobuf:"varint,5,opt,name=broadcast,proto3" json:"broadcast,omitempty"`
	ToOld       bool     `protobuf:"varint,6,opt,name=toOld,proto3" json:"toOld,omitempty"`
	ToOldAndNew bool     `protobuf:"varint,7,opt,name=toOldAndNew,proto3" json:"toOldAndNew,omitempty"`
	MagicKeyId  uint64   `protobuf:"varint,8,opt,name=magicKeyId,proto3" json:"magicKeyId,omitempty"`
	SummoningId uint64   `protobuf:"varint,9,opt,name=summoningId,proto3" json:"summoningId,omitempty"`
	Creator     string   `protobuf:"bytes,10,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *Meditation) Reset()         { *m = Meditation{} }
func (m *Meditation) String() string { return proto.CompactTextString(m) }
func (*Meditation) ProtoMessage()    {}
func (*Meditation) Descriptor() ([]byte, []int) {
	return fileDescriptor_f83be0062b99ecf1, []int{0}
}
func (m *Meditation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Meditation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Meditation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Meditation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Meditation.Merge(m, src)
}
func (m *Meditation) XXX_Size() int {
	return m.Size()
}
func (m *Meditation) XXX_DiscardUnknown() {
	xxx_messageInfo_Meditation.DiscardUnknown(m)
}

var xxx_messageInfo_Meditation proto.InternalMessageInfo

func (m *Meditation) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Meditation) GetFromSpirit() string {
	if m != nil {
		return m.FromSpirit
	}
	return ""
}

func (m *Meditation) GetToSpirit() []string {
	if m != nil {
		return m.ToSpirit
	}
	return nil
}

func (m *Meditation) GetWireBytes() string {
	if m != nil {
		return m.WireBytes
	}
	return ""
}

func (m *Meditation) GetBroadcast() bool {
	if m != nil {
		return m.Broadcast
	}
	return false
}

func (m *Meditation) GetToOld() bool {
	if m != nil {
		return m.ToOld
	}
	return false
}

func (m *Meditation) GetToOldAndNew() bool {
	if m != nil {
		return m.ToOldAndNew
	}
	return false
}

func (m *Meditation) GetMagicKeyId() uint64 {
	if m != nil {
		return m.MagicKeyId
	}
	return 0
}

func (m *Meditation) GetSummoningId() uint64 {
	if m != nil {
		return m.SummoningId
	}
	return 0
}

func (m *Meditation) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*Meditation)(nil), "eightball.eightball.Meditation")
}

func init() {
	proto.RegisterFile("eightball/eightball/meditation.proto", fileDescriptor_f83be0062b99ecf1)
}

var fileDescriptor_f83be0062b99ecf1 = []byte{
	// 285 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x91, 0x3d, 0x4e, 0xc4, 0x30,
	0x10, 0x46, 0xd7, 0xd9, 0xdf, 0x0c, 0x12, 0x85, 0xa1, 0xb0, 0x00, 0x59, 0x11, 0xa2, 0x48, 0xb5,
	0x14, 0x88, 0x03, 0xb0, 0xdd, 0x0a, 0x01, 0x52, 0xe8, 0xe8, 0x9c, 0xd8, 0x04, 0x4b, 0x49, 0x1c,
	0x39, 0x83, 0x96, 0xdc, 0x82, 0x63, 0x70, 0x14, 0xca, 0x2d, 0x29, 0x51, 0x72, 0x11, 0x14, 0x03,
	0x49, 0xba, 0xf9, 0xde, 0x1b, 0x5b, 0xe3, 0x31, 0x5c, 0x28, 0x9d, 0xbe, 0x60, 0x2c, 0xb2, 0xec,
	0x72, 0xa8, 0x72, 0x25, 0x35, 0x0a, 0xd4, 0xa6, 0x58, 0x97, 0xd6, 0xa0, 0xa1, 0x47, 0xbd, 0x5b,
	0xf7, 0xd5, 0xf9, 0x87, 0x07, 0x70, 0xd7, 0x77, 0xd2, 0x43, 0xf0, 0xb4, 0x64, 0x24, 0x20, 0xe1,
	0x2c, 0xf2, 0xb4, 0xa4, 0x1c, 0xe0, 0xd9, 0x9a, 0xfc, 0xb1, 0xd4, 0x56, 0x23, 0xf3, 0x02, 0x12,
	0xfa, 0xd1, 0x88, 0xd0, 0x13, 0x58, 0xa1, 0xf9, 0xb3, 0xd3, 0x60, 0x1a, 0xfa, 0x51, 0x9f, 0xe9,
	0x19, 0xf8, 0x3b, 0x6d, 0xd5, 0xa6, 0x46, 0x55, 0xb1, 0x99, 0x3b, 0x3a, 0x80, 0xce, 0xc6, 0xd6,
	0x08, 0x99, 0x88, 0x0a, 0xd9, 0x3c, 0x20, 0xe1, 0x2a, 0x1a, 0x00, 0x3d, 0x86, 0x39, 0x9a, 0x87,
	0x4c, 0xb2, 0x85, 0x33, 0xbf, 0x81, 0x06, 0x70, 0xe0, 0x8a, 0x9b, 0x42, 0xde, 0xab, 0x1d, 0x5b,
	0x3a, 0x37, 0x46, 0xdd, 0xbc, 0xb9, 0x48, 0x75, 0x72, 0xab, 0xea, 0xad, 0x64, 0x2b, 0xf7, 0x8e,
	0x11, 0xe9, 0x6e, 0xa8, 0x5e, 0xf3, 0xdc, 0x14, 0xba, 0x48, 0xb7, 0x92, 0xf9, 0xae, 0x61, 0x8c,
	0x28, 0x83, 0x65, 0x62, 0x95, 0x40, 0x63, 0x19, 0xb8, 0x99, 0xff, 0xe3, 0xe6, 0xfa, 0xb3, 0xe1,
	0x64, 0xdf, 0x70, 0xf2, 0xdd, 0x70, 0xf2, 0xde, 0xf2, 0xc9, 0xbe, 0xe5, 0x93, 0xaf, 0x96, 0x4f,
	0x9e, 0x4e, 0x87, 0xad, 0xbf, 0x8d, 0x7e, 0x00, 0xeb, 0x52, 0x55, 0xf1, 0xc2, 0x6d, 0xff, 0xea,
	0x27, 0x00, 0x00, 0xff, 0xff, 0xf9, 0xc0, 0x98, 0x61, 0xa5, 0x01, 0x00, 0x00,
}

func (m *Meditation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Meditation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Meditation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintMeditation(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x52
	}
	if m.SummoningId != 0 {
		i = encodeVarintMeditation(dAtA, i, uint64(m.SummoningId))
		i--
		dAtA[i] = 0x48
	}
	if m.MagicKeyId != 0 {
		i = encodeVarintMeditation(dAtA, i, uint64(m.MagicKeyId))
		i--
		dAtA[i] = 0x40
	}
	if m.ToOldAndNew {
		i--
		if m.ToOldAndNew {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.ToOld {
		i--
		if m.ToOld {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Broadcast {
		i--
		if m.Broadcast {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.WireBytes) > 0 {
		i -= len(m.WireBytes)
		copy(dAtA[i:], m.WireBytes)
		i = encodeVarintMeditation(dAtA, i, uint64(len(m.WireBytes)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ToSpirit) > 0 {
		for iNdEx := len(m.ToSpirit) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ToSpirit[iNdEx])
			copy(dAtA[i:], m.ToSpirit[iNdEx])
			i = encodeVarintMeditation(dAtA, i, uint64(len(m.ToSpirit[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.FromSpirit) > 0 {
		i -= len(m.FromSpirit)
		copy(dAtA[i:], m.FromSpirit)
		i = encodeVarintMeditation(dAtA, i, uint64(len(m.FromSpirit)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintMeditation(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMeditation(dAtA []byte, offset int, v uint64) int {
	offset -= sovMeditation(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Meditation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMeditation(uint64(m.Id))
	}
	l = len(m.FromSpirit)
	if l > 0 {
		n += 1 + l + sovMeditation(uint64(l))
	}
	if len(m.ToSpirit) > 0 {
		for _, s := range m.ToSpirit {
			l = len(s)
			n += 1 + l + sovMeditation(uint64(l))
		}
	}
	l = len(m.WireBytes)
	if l > 0 {
		n += 1 + l + sovMeditation(uint64(l))
	}
	if m.Broadcast {
		n += 2
	}
	if m.ToOld {
		n += 2
	}
	if m.ToOldAndNew {
		n += 2
	}
	if m.MagicKeyId != 0 {
		n += 1 + sovMeditation(uint64(m.MagicKeyId))
	}
	if m.SummoningId != 0 {
		n += 1 + sovMeditation(uint64(m.SummoningId))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovMeditation(uint64(l))
	}
	return n
}

func sovMeditation(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMeditation(x uint64) (n int) {
	return sovMeditation(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Meditation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeditation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Meditation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Meditation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeditation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromSpirit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeditation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeditation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMeditation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromSpirit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToSpirit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeditation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeditation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMeditation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToSpirit = append(m.ToSpirit, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WireBytes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeditation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeditation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMeditation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WireBytes = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Broadcast", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeditation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Broadcast = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToOld", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeditation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ToOld = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToOldAndNew", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeditation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ToOldAndNew = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MagicKeyId", wireType)
			}
			m.MagicKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeditation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MagicKeyId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SummoningId", wireType)
			}
			m.SummoningId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeditation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SummoningId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeditation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeditation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMeditation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMeditation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMeditation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMeditation(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMeditation
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMeditation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMeditation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMeditation
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMeditation
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMeditation
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMeditation        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMeditation          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMeditation = fmt.Errorf("proto: unexpected end of group")
)
