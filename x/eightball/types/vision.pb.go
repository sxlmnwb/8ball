// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: eightball/eightball/vision.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Vision struct {
	Id          uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	MagicKeyId  uint64 `protobuf:"varint,2,opt,name=magicKeyId,proto3" json:"magicKeyId,omitempty"`
	EcPointX    string `protobuf:"bytes,3,opt,name=ecPointX,proto3" json:"ecPointX,omitempty"`
	EcPointY    string `protobuf:"bytes,4,opt,name=ecPointY,proto3" json:"ecPointY,omitempty"`
	SummoningId uint64 `protobuf:"varint,5,opt,name=summoningId,proto3" json:"summoningId,omitempty"`
	Creator     string `protobuf:"bytes,6,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *Vision) Reset()         { *m = Vision{} }
func (m *Vision) String() string { return proto.CompactTextString(m) }
func (*Vision) ProtoMessage()    {}
func (*Vision) Descriptor() ([]byte, []int) {
	return fileDescriptor_5891aca1d6e3ab55, []int{0}
}
func (m *Vision) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vision) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vision.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vision) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vision.Merge(m, src)
}
func (m *Vision) XXX_Size() int {
	return m.Size()
}
func (m *Vision) XXX_DiscardUnknown() {
	xxx_messageInfo_Vision.DiscardUnknown(m)
}

var xxx_messageInfo_Vision proto.InternalMessageInfo

func (m *Vision) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Vision) GetMagicKeyId() uint64 {
	if m != nil {
		return m.MagicKeyId
	}
	return 0
}

func (m *Vision) GetEcPointX() string {
	if m != nil {
		return m.EcPointX
	}
	return ""
}

func (m *Vision) GetEcPointY() string {
	if m != nil {
		return m.EcPointY
	}
	return ""
}

func (m *Vision) GetSummoningId() uint64 {
	if m != nil {
		return m.SummoningId
	}
	return 0
}

func (m *Vision) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*Vision)(nil), "eightball.eightball.Vision")
}

func init() { proto.RegisterFile("eightball/eightball/vision.proto", fileDescriptor_5891aca1d6e3ab55) }

var fileDescriptor_5891aca1d6e3ab55 = []byte{
	// 213 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x48, 0xcd, 0x4c, 0xcf,
	0x28, 0x49, 0x4a, 0xcc, 0xc9, 0xd1, 0x47, 0xb0, 0xca, 0x32, 0x8b, 0x33, 0xf3, 0xf3, 0xf4, 0x0a,
	0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0x84, 0xe1, 0xe2, 0x7a, 0x70, 0x96, 0xd2, 0x1a, 0x46, 0x2e, 0xb6,
	0x30, 0xb0, 0x2a, 0x21, 0x3e, 0x2e, 0xa6, 0xcc, 0x14, 0x09, 0x46, 0x05, 0x46, 0x0d, 0x96, 0x20,
	0xa6, 0xcc, 0x14, 0x21, 0x39, 0x2e, 0xae, 0xdc, 0xc4, 0xf4, 0xcc, 0x64, 0xef, 0xd4, 0x4a, 0xcf,
	0x14, 0x09, 0x26, 0xb0, 0x38, 0x92, 0x88, 0x90, 0x14, 0x17, 0x47, 0x6a, 0x72, 0x40, 0x7e, 0x66,
	0x5e, 0x49, 0x84, 0x04, 0xb3, 0x02, 0xa3, 0x06, 0x67, 0x10, 0x9c, 0x8f, 0x24, 0x17, 0x29, 0xc1,
	0x82, 0x22, 0x17, 0x29, 0xa4, 0xc0, 0xc5, 0x5d, 0x5c, 0x9a, 0x9b, 0x9b, 0x9f, 0x97, 0x99, 0x97,
	0xee, 0x99, 0x22, 0xc1, 0x0a, 0x36, 0x18, 0x59, 0x48, 0x48, 0x82, 0x8b, 0x3d, 0xb9, 0x28, 0x35,
	0xb1, 0x24, 0xbf, 0x48, 0x82, 0x0d, 0xac, 0x19, 0xc6, 0x75, 0x32, 0x3d, 0xf1, 0x48, 0x8e, 0xf1,
	0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18, 0x27, 0x3c, 0x96, 0x63, 0xb8, 0xf0, 0x58, 0x8e,
	0xe1, 0xc6, 0x63, 0x39, 0x86, 0x28, 0x69, 0x84, 0xaf, 0x2b, 0x90, 0x42, 0xa0, 0xa4, 0xb2, 0x20,
	0xb5, 0x38, 0x89, 0x0d, 0x1c, 0x02, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x71, 0xb6, 0x72,
	0xae, 0x25, 0x01, 0x00, 0x00,
}

func (m *Vision) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vision) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vision) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintVision(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x32
	}
	if m.SummoningId != 0 {
		i = encodeVarintVision(dAtA, i, uint64(m.SummoningId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.EcPointY) > 0 {
		i -= len(m.EcPointY)
		copy(dAtA[i:], m.EcPointY)
		i = encodeVarintVision(dAtA, i, uint64(len(m.EcPointY)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.EcPointX) > 0 {
		i -= len(m.EcPointX)
		copy(dAtA[i:], m.EcPointX)
		i = encodeVarintVision(dAtA, i, uint64(len(m.EcPointX)))
		i--
		dAtA[i] = 0x1a
	}
	if m.MagicKeyId != 0 {
		i = encodeVarintVision(dAtA, i, uint64(m.MagicKeyId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintVision(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintVision(dAtA []byte, offset int, v uint64) int {
	offset -= sovVision(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Vision) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovVision(uint64(m.Id))
	}
	if m.MagicKeyId != 0 {
		n += 1 + sovVision(uint64(m.MagicKeyId))
	}
	l = len(m.EcPointX)
	if l > 0 {
		n += 1 + l + sovVision(uint64(l))
	}
	l = len(m.EcPointY)
	if l > 0 {
		n += 1 + l + sovVision(uint64(l))
	}
	if m.SummoningId != 0 {
		n += 1 + sovVision(uint64(m.SummoningId))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovVision(uint64(l))
	}
	return n
}

func sovVision(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVision(x uint64) (n int) {
	return sovVision(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Vision) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVision
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vision: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vision: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MagicKeyId", wireType)
			}
			m.MagicKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MagicKeyId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EcPointX", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVision
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EcPointX = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EcPointY", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVision
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EcPointY = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SummoningId", wireType)
			}
			m.SummoningId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SummoningId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVision
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVision
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVision
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVision(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVision
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVision(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVision
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVision
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVision
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVision
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVision
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVision
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVision        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVision          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVision = fmt.Errorf("proto: unexpected end of group")
)
