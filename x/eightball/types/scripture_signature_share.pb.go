// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: eightball/eightball/scripture_signature_share.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ScriptureSignatureShare struct {
	Id             uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ScriptureIndex string `protobuf:"bytes,2,opt,name=scriptureIndex,proto3" json:"scriptureIndex,omitempty"`
	ShareData      string `protobuf:"bytes,3,opt,name=shareData,proto3" json:"shareData,omitempty"`
	MagicKeyId     uint64 `protobuf:"varint,4,opt,name=magicKeyId,proto3" json:"magicKeyId,omitempty"`
	PubKey         string `protobuf:"bytes,5,opt,name=pubKey,proto3" json:"pubKey,omitempty"`
	Creator        string `protobuf:"bytes,6,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *ScriptureSignatureShare) Reset()         { *m = ScriptureSignatureShare{} }
func (m *ScriptureSignatureShare) String() string { return proto.CompactTextString(m) }
func (*ScriptureSignatureShare) ProtoMessage()    {}
func (*ScriptureSignatureShare) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc99eef10e4f1483, []int{0}
}
func (m *ScriptureSignatureShare) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScriptureSignatureShare) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScriptureSignatureShare.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScriptureSignatureShare) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScriptureSignatureShare.Merge(m, src)
}
func (m *ScriptureSignatureShare) XXX_Size() int {
	return m.Size()
}
func (m *ScriptureSignatureShare) XXX_DiscardUnknown() {
	xxx_messageInfo_ScriptureSignatureShare.DiscardUnknown(m)
}

var xxx_messageInfo_ScriptureSignatureShare proto.InternalMessageInfo

func (m *ScriptureSignatureShare) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ScriptureSignatureShare) GetScriptureIndex() string {
	if m != nil {
		return m.ScriptureIndex
	}
	return ""
}

func (m *ScriptureSignatureShare) GetShareData() string {
	if m != nil {
		return m.ShareData
	}
	return ""
}

func (m *ScriptureSignatureShare) GetMagicKeyId() uint64 {
	if m != nil {
		return m.MagicKeyId
	}
	return 0
}

func (m *ScriptureSignatureShare) GetPubKey() string {
	if m != nil {
		return m.PubKey
	}
	return ""
}

func (m *ScriptureSignatureShare) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*ScriptureSignatureShare)(nil), "eightball.eightball.ScriptureSignatureShare")
}

func init() {
	proto.RegisterFile("eightball/eightball/scripture_signature_share.proto", fileDescriptor_cc99eef10e4f1483)
}

var fileDescriptor_cc99eef10e4f1483 = []byte{
	// 236 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0x4e, 0xcd, 0x4c, 0xcf,
	0x28, 0x49, 0x4a, 0xcc, 0xc9, 0xd1, 0x47, 0xb0, 0x8a, 0x93, 0x8b, 0x32, 0x0b, 0x4a, 0x4a, 0x8b,
	0x52, 0xe3, 0x8b, 0x33, 0xd3, 0xf3, 0x12, 0x21, 0xac, 0x8c, 0xc4, 0xa2, 0x54, 0xbd, 0x82, 0xa2,
	0xfc, 0x92, 0x7c, 0x21, 0x61, 0xb8, 0x52, 0x3d, 0x38, 0x4b, 0xe9, 0x20, 0x23, 0x97, 0x78, 0x30,
	0x4c, 0x63, 0x30, 0x4c, 0x5f, 0x30, 0x48, 0x9b, 0x10, 0x1f, 0x17, 0x53, 0x66, 0x8a, 0x04, 0xa3,
	0x02, 0xa3, 0x06, 0x4b, 0x10, 0x53, 0x66, 0x8a, 0x90, 0x1a, 0x17, 0x1f, 0xdc, 0x0e, 0xcf, 0xbc,
	0x94, 0xd4, 0x0a, 0x09, 0x26, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x34, 0x51, 0x21, 0x19, 0x2e, 0x4e,
	0xb0, 0xbd, 0x2e, 0x89, 0x25, 0x89, 0x12, 0xcc, 0x60, 0x25, 0x08, 0x01, 0x21, 0x39, 0x2e, 0xae,
	0xdc, 0xc4, 0xf4, 0xcc, 0x64, 0xef, 0xd4, 0x4a, 0xcf, 0x14, 0x09, 0x16, 0xb0, 0xe9, 0x48, 0x22,
	0x42, 0x62, 0x5c, 0x6c, 0x05, 0xa5, 0x49, 0xde, 0xa9, 0x95, 0x12, 0xac, 0x60, 0xad, 0x50, 0x9e,
	0x90, 0x04, 0x17, 0x7b, 0x72, 0x51, 0x6a, 0x62, 0x49, 0x7e, 0x91, 0x04, 0x1b, 0x58, 0x02, 0xc6,
	0x75, 0x32, 0x3d, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18, 0x27,
	0x3c, 0x96, 0x63, 0xb8, 0xf0, 0x58, 0x8e, 0xe1, 0xc6, 0x63, 0x39, 0x86, 0x28, 0x69, 0x44, 0xe8,
	0x54, 0x20, 0x85, 0x54, 0x49, 0x65, 0x41, 0x6a, 0x71, 0x12, 0x1b, 0x38, 0x58, 0x8c, 0x01, 0x01,
	0x00, 0x00, 0xff, 0xff, 0xb9, 0x4d, 0xc0, 0xc9, 0x4d, 0x01, 0x00, 0x00,
}

func (m *ScriptureSignatureShare) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScriptureSignatureShare) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScriptureSignatureShare) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintScriptureSignatureShare(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PubKey) > 0 {
		i -= len(m.PubKey)
		copy(dAtA[i:], m.PubKey)
		i = encodeVarintScriptureSignatureShare(dAtA, i, uint64(len(m.PubKey)))
		i--
		dAtA[i] = 0x2a
	}
	if m.MagicKeyId != 0 {
		i = encodeVarintScriptureSignatureShare(dAtA, i, uint64(m.MagicKeyId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ShareData) > 0 {
		i -= len(m.ShareData)
		copy(dAtA[i:], m.ShareData)
		i = encodeVarintScriptureSignatureShare(dAtA, i, uint64(len(m.ShareData)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ScriptureIndex) > 0 {
		i -= len(m.ScriptureIndex)
		copy(dAtA[i:], m.ScriptureIndex)
		i = encodeVarintScriptureSignatureShare(dAtA, i, uint64(len(m.ScriptureIndex)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintScriptureSignatureShare(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintScriptureSignatureShare(dAtA []byte, offset int, v uint64) int {
	offset -= sovScriptureSignatureShare(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ScriptureSignatureShare) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovScriptureSignatureShare(uint64(m.Id))
	}
	l = len(m.ScriptureIndex)
	if l > 0 {
		n += 1 + l + sovScriptureSignatureShare(uint64(l))
	}
	l = len(m.ShareData)
	if l > 0 {
		n += 1 + l + sovScriptureSignatureShare(uint64(l))
	}
	if m.MagicKeyId != 0 {
		n += 1 + sovScriptureSignatureShare(uint64(m.MagicKeyId))
	}
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovScriptureSignatureShare(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovScriptureSignatureShare(uint64(l))
	}
	return n
}

func sovScriptureSignatureShare(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozScriptureSignatureShare(x uint64) (n int) {
	return sovScriptureSignatureShare(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ScriptureSignatureShare) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScriptureSignatureShare
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScriptureSignatureShare: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScriptureSignatureShare: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScriptureSignatureShare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScriptureIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScriptureSignatureShare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScriptureSignatureShare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthScriptureSignatureShare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScriptureIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScriptureSignatureShare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScriptureSignatureShare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthScriptureSignatureShare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShareData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MagicKeyId", wireType)
			}
			m.MagicKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScriptureSignatureShare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MagicKeyId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScriptureSignatureShare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScriptureSignatureShare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthScriptureSignatureShare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScriptureSignatureShare
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScriptureSignatureShare
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthScriptureSignatureShare
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipScriptureSignatureShare(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthScriptureSignatureShare
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipScriptureSignatureShare(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowScriptureSignatureShare
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowScriptureSignatureShare
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowScriptureSignatureShare
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthScriptureSignatureShare
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupScriptureSignatureShare
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthScriptureSignatureShare
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthScriptureSignatureShare        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowScriptureSignatureShare          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupScriptureSignatureShare = fmt.Errorf("proto: unexpected end of group")
)
