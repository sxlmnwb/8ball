// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: eightball/eightball/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetMagicKeyRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetMagicKeyRequest) Reset()         { *m = QueryGetMagicKeyRequest{} }
func (m *QueryGetMagicKeyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetMagicKeyRequest) ProtoMessage()    {}
func (*QueryGetMagicKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{2}
}
func (m *QueryGetMagicKeyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMagicKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMagicKeyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMagicKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMagicKeyRequest.Merge(m, src)
}
func (m *QueryGetMagicKeyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMagicKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMagicKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMagicKeyRequest proto.InternalMessageInfo

func (m *QueryGetMagicKeyRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetMagicKeyResponse struct {
	MagicKey MagicKey `protobuf:"bytes,1,opt,name=MagicKey,proto3" json:"MagicKey"`
}

func (m *QueryGetMagicKeyResponse) Reset()         { *m = QueryGetMagicKeyResponse{} }
func (m *QueryGetMagicKeyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetMagicKeyResponse) ProtoMessage()    {}
func (*QueryGetMagicKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{3}
}
func (m *QueryGetMagicKeyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMagicKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMagicKeyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMagicKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMagicKeyResponse.Merge(m, src)
}
func (m *QueryGetMagicKeyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMagicKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMagicKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMagicKeyResponse proto.InternalMessageInfo

func (m *QueryGetMagicKeyResponse) GetMagicKey() MagicKey {
	if m != nil {
		return m.MagicKey
	}
	return MagicKey{}
}

type QueryAllMagicKeyRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllMagicKeyRequest) Reset()         { *m = QueryAllMagicKeyRequest{} }
func (m *QueryAllMagicKeyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllMagicKeyRequest) ProtoMessage()    {}
func (*QueryAllMagicKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{4}
}
func (m *QueryAllMagicKeyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllMagicKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllMagicKeyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllMagicKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllMagicKeyRequest.Merge(m, src)
}
func (m *QueryAllMagicKeyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllMagicKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllMagicKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllMagicKeyRequest proto.InternalMessageInfo

func (m *QueryAllMagicKeyRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllMagicKeyResponse struct {
	MagicKey   []MagicKey          `protobuf:"bytes,1,rep,name=MagicKey,proto3" json:"MagicKey"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllMagicKeyResponse) Reset()         { *m = QueryAllMagicKeyResponse{} }
func (m *QueryAllMagicKeyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllMagicKeyResponse) ProtoMessage()    {}
func (*QueryAllMagicKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{5}
}
func (m *QueryAllMagicKeyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllMagicKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllMagicKeyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllMagicKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllMagicKeyResponse.Merge(m, src)
}
func (m *QueryAllMagicKeyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllMagicKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllMagicKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllMagicKeyResponse proto.InternalMessageInfo

func (m *QueryAllMagicKeyResponse) GetMagicKey() []MagicKey {
	if m != nil {
		return m.MagicKey
	}
	return nil
}

func (m *QueryAllMagicKeyResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetMagicKeySummoningRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetMagicKeySummoningRequest) Reset()         { *m = QueryGetMagicKeySummoningRequest{} }
func (m *QueryGetMagicKeySummoningRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetMagicKeySummoningRequest) ProtoMessage()    {}
func (*QueryGetMagicKeySummoningRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{6}
}
func (m *QueryGetMagicKeySummoningRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMagicKeySummoningRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMagicKeySummoningRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMagicKeySummoningRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMagicKeySummoningRequest.Merge(m, src)
}
func (m *QueryGetMagicKeySummoningRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMagicKeySummoningRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMagicKeySummoningRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMagicKeySummoningRequest proto.InternalMessageInfo

func (m *QueryGetMagicKeySummoningRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetMagicKeySummoningResponse struct {
	MagicKeySummoning MagicKeySummoning `protobuf:"bytes,1,opt,name=MagicKeySummoning,proto3" json:"MagicKeySummoning"`
}

func (m *QueryGetMagicKeySummoningResponse) Reset()         { *m = QueryGetMagicKeySummoningResponse{} }
func (m *QueryGetMagicKeySummoningResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetMagicKeySummoningResponse) ProtoMessage()    {}
func (*QueryGetMagicKeySummoningResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{7}
}
func (m *QueryGetMagicKeySummoningResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMagicKeySummoningResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMagicKeySummoningResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMagicKeySummoningResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMagicKeySummoningResponse.Merge(m, src)
}
func (m *QueryGetMagicKeySummoningResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMagicKeySummoningResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMagicKeySummoningResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMagicKeySummoningResponse proto.InternalMessageInfo

func (m *QueryGetMagicKeySummoningResponse) GetMagicKeySummoning() MagicKeySummoning {
	if m != nil {
		return m.MagicKeySummoning
	}
	return MagicKeySummoning{}
}

type QueryAllMagicKeySummoningRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllMagicKeySummoningRequest) Reset()         { *m = QueryAllMagicKeySummoningRequest{} }
func (m *QueryAllMagicKeySummoningRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllMagicKeySummoningRequest) ProtoMessage()    {}
func (*QueryAllMagicKeySummoningRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{8}
}
func (m *QueryAllMagicKeySummoningRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllMagicKeySummoningRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllMagicKeySummoningRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllMagicKeySummoningRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllMagicKeySummoningRequest.Merge(m, src)
}
func (m *QueryAllMagicKeySummoningRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllMagicKeySummoningRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllMagicKeySummoningRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllMagicKeySummoningRequest proto.InternalMessageInfo

func (m *QueryAllMagicKeySummoningRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllMagicKeySummoningResponse struct {
	MagicKeySummoning []MagicKeySummoning `protobuf:"bytes,1,rep,name=MagicKeySummoning,proto3" json:"MagicKeySummoning"`
	Pagination        *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllMagicKeySummoningResponse) Reset()         { *m = QueryAllMagicKeySummoningResponse{} }
func (m *QueryAllMagicKeySummoningResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllMagicKeySummoningResponse) ProtoMessage()    {}
func (*QueryAllMagicKeySummoningResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{9}
}
func (m *QueryAllMagicKeySummoningResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllMagicKeySummoningResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllMagicKeySummoningResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllMagicKeySummoningResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllMagicKeySummoningResponse.Merge(m, src)
}
func (m *QueryAllMagicKeySummoningResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllMagicKeySummoningResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllMagicKeySummoningResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllMagicKeySummoningResponse proto.InternalMessageInfo

func (m *QueryAllMagicKeySummoningResponse) GetMagicKeySummoning() []MagicKeySummoning {
	if m != nil {
		return m.MagicKeySummoning
	}
	return nil
}

func (m *QueryAllMagicKeySummoningResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetHighCouncilRequest struct {
	Id    uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	KeyId uint64 `protobuf:"varint,2,opt,name=keyId,proto3" json:"keyId,omitempty"`
}

func (m *QueryGetHighCouncilRequest) Reset()         { *m = QueryGetHighCouncilRequest{} }
func (m *QueryGetHighCouncilRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetHighCouncilRequest) ProtoMessage()    {}
func (*QueryGetHighCouncilRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{10}
}
func (m *QueryGetHighCouncilRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetHighCouncilRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetHighCouncilRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetHighCouncilRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetHighCouncilRequest.Merge(m, src)
}
func (m *QueryGetHighCouncilRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetHighCouncilRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetHighCouncilRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetHighCouncilRequest proto.InternalMessageInfo

func (m *QueryGetHighCouncilRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *QueryGetHighCouncilRequest) GetKeyId() uint64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

type QueryGetHighCouncilResponse struct {
	HighCouncil HighCouncil `protobuf:"bytes,1,opt,name=HighCouncil,proto3" json:"HighCouncil"`
}

func (m *QueryGetHighCouncilResponse) Reset()         { *m = QueryGetHighCouncilResponse{} }
func (m *QueryGetHighCouncilResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetHighCouncilResponse) ProtoMessage()    {}
func (*QueryGetHighCouncilResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{11}
}
func (m *QueryGetHighCouncilResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetHighCouncilResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetHighCouncilResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetHighCouncilResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetHighCouncilResponse.Merge(m, src)
}
func (m *QueryGetHighCouncilResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetHighCouncilResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetHighCouncilResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetHighCouncilResponse proto.InternalMessageInfo

func (m *QueryGetHighCouncilResponse) GetHighCouncil() HighCouncil {
	if m != nil {
		return m.HighCouncil
	}
	return HighCouncil{}
}

type QueryAllHighCouncilRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	KeyId      uint64             `protobuf:"varint,2,opt,name=keyId,proto3" json:"keyId,omitempty"`
}

func (m *QueryAllHighCouncilRequest) Reset()         { *m = QueryAllHighCouncilRequest{} }
func (m *QueryAllHighCouncilRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllHighCouncilRequest) ProtoMessage()    {}
func (*QueryAllHighCouncilRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{12}
}
func (m *QueryAllHighCouncilRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllHighCouncilRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllHighCouncilRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllHighCouncilRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllHighCouncilRequest.Merge(m, src)
}
func (m *QueryAllHighCouncilRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllHighCouncilRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllHighCouncilRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllHighCouncilRequest proto.InternalMessageInfo

func (m *QueryAllHighCouncilRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *QueryAllHighCouncilRequest) GetKeyId() uint64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

type QueryAllHighCouncilResponse struct {
	HighCouncil []HighCouncil       `protobuf:"bytes,1,rep,name=HighCouncil,proto3" json:"HighCouncil"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllHighCouncilResponse) Reset()         { *m = QueryAllHighCouncilResponse{} }
func (m *QueryAllHighCouncilResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllHighCouncilResponse) ProtoMessage()    {}
func (*QueryAllHighCouncilResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{13}
}
func (m *QueryAllHighCouncilResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllHighCouncilResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllHighCouncilResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllHighCouncilResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllHighCouncilResponse.Merge(m, src)
}
func (m *QueryAllHighCouncilResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllHighCouncilResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllHighCouncilResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllHighCouncilResponse proto.InternalMessageInfo

func (m *QueryAllHighCouncilResponse) GetHighCouncil() []HighCouncil {
	if m != nil {
		return m.HighCouncil
	}
	return nil
}

func (m *QueryAllHighCouncilResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetCurrentMagicKeyRequest struct {
}

func (m *QueryGetCurrentMagicKeyRequest) Reset()         { *m = QueryGetCurrentMagicKeyRequest{} }
func (m *QueryGetCurrentMagicKeyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCurrentMagicKeyRequest) ProtoMessage()    {}
func (*QueryGetCurrentMagicKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{14}
}
func (m *QueryGetCurrentMagicKeyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCurrentMagicKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCurrentMagicKeyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCurrentMagicKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCurrentMagicKeyRequest.Merge(m, src)
}
func (m *QueryGetCurrentMagicKeyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCurrentMagicKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCurrentMagicKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCurrentMagicKeyRequest proto.InternalMessageInfo

type QueryGetCurrentMagicKeyResponse struct {
	CurrentMagicKey CurrentMagicKey `protobuf:"bytes,1,opt,name=CurrentMagicKey,proto3" json:"CurrentMagicKey"`
}

func (m *QueryGetCurrentMagicKeyResponse) Reset()         { *m = QueryGetCurrentMagicKeyResponse{} }
func (m *QueryGetCurrentMagicKeyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCurrentMagicKeyResponse) ProtoMessage()    {}
func (*QueryGetCurrentMagicKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{15}
}
func (m *QueryGetCurrentMagicKeyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCurrentMagicKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCurrentMagicKeyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCurrentMagicKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCurrentMagicKeyResponse.Merge(m, src)
}
func (m *QueryGetCurrentMagicKeyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCurrentMagicKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCurrentMagicKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCurrentMagicKeyResponse proto.InternalMessageInfo

func (m *QueryGetCurrentMagicKeyResponse) GetCurrentMagicKey() CurrentMagicKey {
	if m != nil {
		return m.CurrentMagicKey
	}
	return CurrentMagicKey{}
}

type QueryGetHighCouncilConjuringsRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetHighCouncilConjuringsRequest) Reset()         { *m = QueryGetHighCouncilConjuringsRequest{} }
func (m *QueryGetHighCouncilConjuringsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetHighCouncilConjuringsRequest) ProtoMessage()    {}
func (*QueryGetHighCouncilConjuringsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{16}
}
func (m *QueryGetHighCouncilConjuringsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetHighCouncilConjuringsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetHighCouncilConjuringsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetHighCouncilConjuringsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetHighCouncilConjuringsRequest.Merge(m, src)
}
func (m *QueryGetHighCouncilConjuringsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetHighCouncilConjuringsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetHighCouncilConjuringsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetHighCouncilConjuringsRequest proto.InternalMessageInfo

func (m *QueryGetHighCouncilConjuringsRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetHighCouncilConjuringsResponse struct {
	HighCouncilConjurings HighCouncilConjurings `protobuf:"bytes,1,opt,name=HighCouncilConjurings,proto3" json:"HighCouncilConjurings"`
}

func (m *QueryGetHighCouncilConjuringsResponse) Reset()         { *m = QueryGetHighCouncilConjuringsResponse{} }
func (m *QueryGetHighCouncilConjuringsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetHighCouncilConjuringsResponse) ProtoMessage()    {}
func (*QueryGetHighCouncilConjuringsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{17}
}
func (m *QueryGetHighCouncilConjuringsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetHighCouncilConjuringsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetHighCouncilConjuringsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetHighCouncilConjuringsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetHighCouncilConjuringsResponse.Merge(m, src)
}
func (m *QueryGetHighCouncilConjuringsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetHighCouncilConjuringsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetHighCouncilConjuringsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetHighCouncilConjuringsResponse proto.InternalMessageInfo

func (m *QueryGetHighCouncilConjuringsResponse) GetHighCouncilConjurings() HighCouncilConjurings {
	if m != nil {
		return m.HighCouncilConjurings
	}
	return HighCouncilConjurings{}
}

type QueryAllHighCouncilConjuringsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllHighCouncilConjuringsRequest) Reset()         { *m = QueryAllHighCouncilConjuringsRequest{} }
func (m *QueryAllHighCouncilConjuringsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllHighCouncilConjuringsRequest) ProtoMessage()    {}
func (*QueryAllHighCouncilConjuringsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{18}
}
func (m *QueryAllHighCouncilConjuringsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllHighCouncilConjuringsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllHighCouncilConjuringsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllHighCouncilConjuringsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllHighCouncilConjuringsRequest.Merge(m, src)
}
func (m *QueryAllHighCouncilConjuringsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllHighCouncilConjuringsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllHighCouncilConjuringsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllHighCouncilConjuringsRequest proto.InternalMessageInfo

func (m *QueryAllHighCouncilConjuringsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllHighCouncilConjuringsResponse struct {
	HighCouncilConjurings []HighCouncilConjurings `protobuf:"bytes,1,rep,name=HighCouncilConjurings,proto3" json:"HighCouncilConjurings"`
	Pagination            *query.PageResponse     `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllHighCouncilConjuringsResponse) Reset()         { *m = QueryAllHighCouncilConjuringsResponse{} }
func (m *QueryAllHighCouncilConjuringsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllHighCouncilConjuringsResponse) ProtoMessage()    {}
func (*QueryAllHighCouncilConjuringsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{19}
}
func (m *QueryAllHighCouncilConjuringsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllHighCouncilConjuringsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllHighCouncilConjuringsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllHighCouncilConjuringsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllHighCouncilConjuringsResponse.Merge(m, src)
}
func (m *QueryAllHighCouncilConjuringsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllHighCouncilConjuringsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllHighCouncilConjuringsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllHighCouncilConjuringsResponse proto.InternalMessageInfo

func (m *QueryAllHighCouncilConjuringsResponse) GetHighCouncilConjurings() []HighCouncilConjurings {
	if m != nil {
		return m.HighCouncilConjurings
	}
	return nil
}

func (m *QueryAllHighCouncilConjuringsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetSpiritConjuringPoemsRequest struct {
	Id      uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	MagicId uint64 `protobuf:"varint,2,opt,name=magicId,proto3" json:"magicId,omitempty"`
}

func (m *QueryGetSpiritConjuringPoemsRequest) Reset()         { *m = QueryGetSpiritConjuringPoemsRequest{} }
func (m *QueryGetSpiritConjuringPoemsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSpiritConjuringPoemsRequest) ProtoMessage()    {}
func (*QueryGetSpiritConjuringPoemsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{20}
}
func (m *QueryGetSpiritConjuringPoemsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSpiritConjuringPoemsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSpiritConjuringPoemsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSpiritConjuringPoemsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSpiritConjuringPoemsRequest.Merge(m, src)
}
func (m *QueryGetSpiritConjuringPoemsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSpiritConjuringPoemsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSpiritConjuringPoemsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSpiritConjuringPoemsRequest proto.InternalMessageInfo

func (m *QueryGetSpiritConjuringPoemsRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *QueryGetSpiritConjuringPoemsRequest) GetMagicId() uint64 {
	if m != nil {
		return m.MagicId
	}
	return 0
}

type QueryGetSpiritConjuringPoemsResponse struct {
	SpiritConjuringPoems SpiritConjuringPoems `protobuf:"bytes,1,opt,name=SpiritConjuringPoems,proto3" json:"SpiritConjuringPoems"`
}

func (m *QueryGetSpiritConjuringPoemsResponse) Reset()         { *m = QueryGetSpiritConjuringPoemsResponse{} }
func (m *QueryGetSpiritConjuringPoemsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSpiritConjuringPoemsResponse) ProtoMessage()    {}
func (*QueryGetSpiritConjuringPoemsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{21}
}
func (m *QueryGetSpiritConjuringPoemsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSpiritConjuringPoemsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSpiritConjuringPoemsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSpiritConjuringPoemsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSpiritConjuringPoemsResponse.Merge(m, src)
}
func (m *QueryGetSpiritConjuringPoemsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSpiritConjuringPoemsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSpiritConjuringPoemsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSpiritConjuringPoemsResponse proto.InternalMessageInfo

func (m *QueryGetSpiritConjuringPoemsResponse) GetSpiritConjuringPoems() SpiritConjuringPoems {
	if m != nil {
		return m.SpiritConjuringPoems
	}
	return SpiritConjuringPoems{}
}

type QueryAllSpiritConjuringPoemsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	MagicId    uint64             `protobuf:"varint,2,opt,name=magicId,proto3" json:"magicId,omitempty"`
}

func (m *QueryAllSpiritConjuringPoemsRequest) Reset()         { *m = QueryAllSpiritConjuringPoemsRequest{} }
func (m *QueryAllSpiritConjuringPoemsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllSpiritConjuringPoemsRequest) ProtoMessage()    {}
func (*QueryAllSpiritConjuringPoemsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{22}
}
func (m *QueryAllSpiritConjuringPoemsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSpiritConjuringPoemsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSpiritConjuringPoemsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSpiritConjuringPoemsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSpiritConjuringPoemsRequest.Merge(m, src)
}
func (m *QueryAllSpiritConjuringPoemsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSpiritConjuringPoemsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSpiritConjuringPoemsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSpiritConjuringPoemsRequest proto.InternalMessageInfo

func (m *QueryAllSpiritConjuringPoemsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *QueryAllSpiritConjuringPoemsRequest) GetMagicId() uint64 {
	if m != nil {
		return m.MagicId
	}
	return 0
}

type QueryAllSpiritConjuringPoemsResponse struct {
	SpiritConjuringPoems []SpiritConjuringPoems `protobuf:"bytes,1,rep,name=SpiritConjuringPoems,proto3" json:"SpiritConjuringPoems"`
	Pagination           *query.PageResponse    `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSpiritConjuringPoemsResponse) Reset()         { *m = QueryAllSpiritConjuringPoemsResponse{} }
func (m *QueryAllSpiritConjuringPoemsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllSpiritConjuringPoemsResponse) ProtoMessage()    {}
func (*QueryAllSpiritConjuringPoemsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{23}
}
func (m *QueryAllSpiritConjuringPoemsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSpiritConjuringPoemsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSpiritConjuringPoemsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSpiritConjuringPoemsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSpiritConjuringPoemsResponse.Merge(m, src)
}
func (m *QueryAllSpiritConjuringPoemsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSpiritConjuringPoemsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSpiritConjuringPoemsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSpiritConjuringPoemsResponse proto.InternalMessageInfo

func (m *QueryAllSpiritConjuringPoemsResponse) GetSpiritConjuringPoems() []SpiritConjuringPoems {
	if m != nil {
		return m.SpiritConjuringPoems
	}
	return nil
}

func (m *QueryAllSpiritConjuringPoemsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetVerseRequest struct {
	Id         uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	MagicKeyId uint64 `protobuf:"varint,2,opt,name=magicKeyId,proto3" json:"magicKeyId,omitempty"`
}

func (m *QueryGetVerseRequest) Reset()         { *m = QueryGetVerseRequest{} }
func (m *QueryGetVerseRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetVerseRequest) ProtoMessage()    {}
func (*QueryGetVerseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{24}
}
func (m *QueryGetVerseRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetVerseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetVerseRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetVerseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetVerseRequest.Merge(m, src)
}
func (m *QueryGetVerseRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetVerseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetVerseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetVerseRequest proto.InternalMessageInfo

func (m *QueryGetVerseRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *QueryGetVerseRequest) GetMagicKeyId() uint64 {
	if m != nil {
		return m.MagicKeyId
	}
	return 0
}

type QueryGetVerseResponse struct {
	Verse Verse `protobuf:"bytes,1,opt,name=Verse,proto3" json:"Verse"`
}

func (m *QueryGetVerseResponse) Reset()         { *m = QueryGetVerseResponse{} }
func (m *QueryGetVerseResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetVerseResponse) ProtoMessage()    {}
func (*QueryGetVerseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{25}
}
func (m *QueryGetVerseResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetVerseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetVerseResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetVerseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetVerseResponse.Merge(m, src)
}
func (m *QueryGetVerseResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetVerseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetVerseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetVerseResponse proto.InternalMessageInfo

func (m *QueryGetVerseResponse) GetVerse() Verse {
	if m != nil {
		return m.Verse
	}
	return Verse{}
}

type QueryAllVerseRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	MagicKeyId uint64             `protobuf:"varint,2,opt,name=magicKeyId,proto3" json:"magicKeyId,omitempty"`
}

func (m *QueryAllVerseRequest) Reset()         { *m = QueryAllVerseRequest{} }
func (m *QueryAllVerseRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllVerseRequest) ProtoMessage()    {}
func (*QueryAllVerseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{26}
}
func (m *QueryAllVerseRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllVerseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllVerseRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllVerseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllVerseRequest.Merge(m, src)
}
func (m *QueryAllVerseRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllVerseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllVerseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllVerseRequest proto.InternalMessageInfo

func (m *QueryAllVerseRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *QueryAllVerseRequest) GetMagicKeyId() uint64 {
	if m != nil {
		return m.MagicKeyId
	}
	return 0
}

type QueryAllVerseResponse struct {
	Verse      []Verse             `protobuf:"bytes,1,rep,name=Verse,proto3" json:"Verse"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllVerseResponse) Reset()         { *m = QueryAllVerseResponse{} }
func (m *QueryAllVerseResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllVerseResponse) ProtoMessage()    {}
func (*QueryAllVerseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{27}
}
func (m *QueryAllVerseResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllVerseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllVerseResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllVerseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllVerseResponse.Merge(m, src)
}
func (m *QueryAllVerseResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllVerseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllVerseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllVerseResponse proto.InternalMessageInfo

func (m *QueryAllVerseResponse) GetVerse() []Verse {
	if m != nil {
		return m.Verse
	}
	return nil
}

func (m *QueryAllVerseResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryVerseCountRequest struct {
	MagicKeyId string `protobuf:"bytes,1,opt,name=magicKeyId,proto3" json:"magicKeyId,omitempty"`
}

func (m *QueryVerseCountRequest) Reset()         { *m = QueryVerseCountRequest{} }
func (m *QueryVerseCountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVerseCountRequest) ProtoMessage()    {}
func (*QueryVerseCountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{28}
}
func (m *QueryVerseCountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVerseCountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVerseCountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVerseCountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVerseCountRequest.Merge(m, src)
}
func (m *QueryVerseCountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVerseCountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVerseCountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVerseCountRequest proto.InternalMessageInfo

func (m *QueryVerseCountRequest) GetMagicKeyId() string {
	if m != nil {
		return m.MagicKeyId
	}
	return ""
}

type QueryVerseCountResponse struct {
	Count string `protobuf:"bytes,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *QueryVerseCountResponse) Reset()         { *m = QueryVerseCountResponse{} }
func (m *QueryVerseCountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVerseCountResponse) ProtoMessage()    {}
func (*QueryVerseCountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{29}
}
func (m *QueryVerseCountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVerseCountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVerseCountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVerseCountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVerseCountResponse.Merge(m, src)
}
func (m *QueryVerseCountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVerseCountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVerseCountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVerseCountResponse proto.InternalMessageInfo

func (m *QueryVerseCountResponse) GetCount() string {
	if m != nil {
		return m.Count
	}
	return ""
}

type QueryMagicKeyCountRequest struct {
}

func (m *QueryMagicKeyCountRequest) Reset()         { *m = QueryMagicKeyCountRequest{} }
func (m *QueryMagicKeyCountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryMagicKeyCountRequest) ProtoMessage()    {}
func (*QueryMagicKeyCountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{30}
}
func (m *QueryMagicKeyCountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMagicKeyCountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMagicKeyCountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMagicKeyCountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMagicKeyCountRequest.Merge(m, src)
}
func (m *QueryMagicKeyCountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryMagicKeyCountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMagicKeyCountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMagicKeyCountRequest proto.InternalMessageInfo

type QueryMagicKeyCountResponse struct {
	Count uint64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *QueryMagicKeyCountResponse) Reset()         { *m = QueryMagicKeyCountResponse{} }
func (m *QueryMagicKeyCountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMagicKeyCountResponse) ProtoMessage()    {}
func (*QueryMagicKeyCountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{31}
}
func (m *QueryMagicKeyCountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMagicKeyCountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMagicKeyCountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMagicKeyCountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMagicKeyCountResponse.Merge(m, src)
}
func (m *QueryMagicKeyCountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMagicKeyCountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMagicKeyCountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMagicKeyCountResponse proto.InternalMessageInfo

func (m *QueryMagicKeyCountResponse) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type QueryGetVisionRequest struct {
	Id         uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	MagicKeyId uint64 `protobuf:"varint,2,opt,name=magicKeyId,proto3" json:"magicKeyId,omitempty"`
}

func (m *QueryGetVisionRequest) Reset()         { *m = QueryGetVisionRequest{} }
func (m *QueryGetVisionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetVisionRequest) ProtoMessage()    {}
func (*QueryGetVisionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{32}
}
func (m *QueryGetVisionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetVisionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetVisionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetVisionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetVisionRequest.Merge(m, src)
}
func (m *QueryGetVisionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetVisionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetVisionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetVisionRequest proto.InternalMessageInfo

func (m *QueryGetVisionRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *QueryGetVisionRequest) GetMagicKeyId() uint64 {
	if m != nil {
		return m.MagicKeyId
	}
	return 0
}

type QueryGetVisionResponse struct {
	Vision Vision `protobuf:"bytes,1,opt,name=Vision,proto3" json:"Vision"`
}

func (m *QueryGetVisionResponse) Reset()         { *m = QueryGetVisionResponse{} }
func (m *QueryGetVisionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetVisionResponse) ProtoMessage()    {}
func (*QueryGetVisionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{33}
}
func (m *QueryGetVisionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetVisionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetVisionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetVisionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetVisionResponse.Merge(m, src)
}
func (m *QueryGetVisionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetVisionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetVisionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetVisionResponse proto.InternalMessageInfo

func (m *QueryGetVisionResponse) GetVision() Vision {
	if m != nil {
		return m.Vision
	}
	return Vision{}
}

type QueryAllVisionRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	MagicKeyId uint64             `protobuf:"varint,2,opt,name=magicKeyId,proto3" json:"magicKeyId,omitempty"`
}

func (m *QueryAllVisionRequest) Reset()         { *m = QueryAllVisionRequest{} }
func (m *QueryAllVisionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllVisionRequest) ProtoMessage()    {}
func (*QueryAllVisionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{34}
}
func (m *QueryAllVisionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllVisionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllVisionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllVisionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllVisionRequest.Merge(m, src)
}
func (m *QueryAllVisionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllVisionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllVisionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllVisionRequest proto.InternalMessageInfo

func (m *QueryAllVisionRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *QueryAllVisionRequest) GetMagicKeyId() uint64 {
	if m != nil {
		return m.MagicKeyId
	}
	return 0
}

type QueryAllVisionResponse struct {
	Vision     []Vision            `protobuf:"bytes,1,rep,name=Vision,proto3" json:"Vision"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllVisionResponse) Reset()         { *m = QueryAllVisionResponse{} }
func (m *QueryAllVisionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllVisionResponse) ProtoMessage()    {}
func (*QueryAllVisionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{35}
}
func (m *QueryAllVisionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllVisionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllVisionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllVisionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllVisionResponse.Merge(m, src)
}
func (m *QueryAllVisionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllVisionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllVisionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllVisionResponse proto.InternalMessageInfo

func (m *QueryAllVisionResponse) GetVision() []Vision {
	if m != nil {
		return m.Vision
	}
	return nil
}

func (m *QueryAllVisionResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetMessageRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetMessageRequest) Reset()         { *m = QueryGetMessageRequest{} }
func (m *QueryGetMessageRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetMessageRequest) ProtoMessage()    {}
func (*QueryGetMessageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{36}
}
func (m *QueryGetMessageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMessageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMessageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMessageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMessageRequest.Merge(m, src)
}
func (m *QueryGetMessageRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMessageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMessageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMessageRequest proto.InternalMessageInfo

func (m *QueryGetMessageRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetMessageResponse struct {
	Message Message `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message"`
}

func (m *QueryGetMessageResponse) Reset()         { *m = QueryGetMessageResponse{} }
func (m *QueryGetMessageResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetMessageResponse) ProtoMessage()    {}
func (*QueryGetMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{37}
}
func (m *QueryGetMessageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMessageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMessageResponse.Merge(m, src)
}
func (m *QueryGetMessageResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMessageResponse proto.InternalMessageInfo

func (m *QueryGetMessageResponse) GetMessage() Message {
	if m != nil {
		return m.Message
	}
	return Message{}
}

type QueryAllMessageRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllMessageRequest) Reset()         { *m = QueryAllMessageRequest{} }
func (m *QueryAllMessageRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllMessageRequest) ProtoMessage()    {}
func (*QueryAllMessageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{38}
}
func (m *QueryAllMessageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllMessageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllMessageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllMessageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllMessageRequest.Merge(m, src)
}
func (m *QueryAllMessageRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllMessageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllMessageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllMessageRequest proto.InternalMessageInfo

func (m *QueryAllMessageRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllMessageResponse struct {
	Message    []Message           `protobuf:"bytes,1,rep,name=Message,proto3" json:"Message"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllMessageResponse) Reset()         { *m = QueryAllMessageResponse{} }
func (m *QueryAllMessageResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllMessageResponse) ProtoMessage()    {}
func (*QueryAllMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{39}
}
func (m *QueryAllMessageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllMessageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllMessageResponse.Merge(m, src)
}
func (m *QueryAllMessageResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllMessageResponse proto.InternalMessageInfo

func (m *QueryAllMessageResponse) GetMessage() []Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *QueryAllMessageResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetSignatureRequestRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetSignatureRequestRequest) Reset()         { *m = QueryGetSignatureRequestRequest{} }
func (m *QueryGetSignatureRequestRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSignatureRequestRequest) ProtoMessage()    {}
func (*QueryGetSignatureRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{40}
}
func (m *QueryGetSignatureRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSignatureRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSignatureRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSignatureRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSignatureRequestRequest.Merge(m, src)
}
func (m *QueryGetSignatureRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSignatureRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSignatureRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSignatureRequestRequest proto.InternalMessageInfo

func (m *QueryGetSignatureRequestRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetSignatureRequestResponse struct {
	SignatureRequest SignatureRequest `protobuf:"bytes,1,opt,name=SignatureRequest,proto3" json:"SignatureRequest"`
}

func (m *QueryGetSignatureRequestResponse) Reset()         { *m = QueryGetSignatureRequestResponse{} }
func (m *QueryGetSignatureRequestResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSignatureRequestResponse) ProtoMessage()    {}
func (*QueryGetSignatureRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{41}
}
func (m *QueryGetSignatureRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSignatureRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSignatureRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSignatureRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSignatureRequestResponse.Merge(m, src)
}
func (m *QueryGetSignatureRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSignatureRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSignatureRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSignatureRequestResponse proto.InternalMessageInfo

func (m *QueryGetSignatureRequestResponse) GetSignatureRequest() SignatureRequest {
	if m != nil {
		return m.SignatureRequest
	}
	return SignatureRequest{}
}

type QueryAllSignatureRequestRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSignatureRequestRequest) Reset()         { *m = QueryAllSignatureRequestRequest{} }
func (m *QueryAllSignatureRequestRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllSignatureRequestRequest) ProtoMessage()    {}
func (*QueryAllSignatureRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{42}
}
func (m *QueryAllSignatureRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSignatureRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSignatureRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSignatureRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSignatureRequestRequest.Merge(m, src)
}
func (m *QueryAllSignatureRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSignatureRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSignatureRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSignatureRequestRequest proto.InternalMessageInfo

func (m *QueryAllSignatureRequestRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllSignatureRequestResponse struct {
	SignatureRequest []SignatureRequest  `protobuf:"bytes,1,rep,name=SignatureRequest,proto3" json:"SignatureRequest"`
	Pagination       *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSignatureRequestResponse) Reset()         { *m = QueryAllSignatureRequestResponse{} }
func (m *QueryAllSignatureRequestResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllSignatureRequestResponse) ProtoMessage()    {}
func (*QueryAllSignatureRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{43}
}
func (m *QueryAllSignatureRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSignatureRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSignatureRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSignatureRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSignatureRequestResponse.Merge(m, src)
}
func (m *QueryAllSignatureRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSignatureRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSignatureRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSignatureRequestResponse proto.InternalMessageInfo

func (m *QueryAllSignatureRequestResponse) GetSignatureRequest() []SignatureRequest {
	if m != nil {
		return m.SignatureRequest
	}
	return nil
}

func (m *QueryAllSignatureRequestResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetSignatureShareRequest struct {
	MessageId uint64 `protobuf:"varint,1,opt,name=messageId,proto3" json:"messageId,omitempty"`
	Id        uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetSignatureShareRequest) Reset()         { *m = QueryGetSignatureShareRequest{} }
func (m *QueryGetSignatureShareRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSignatureShareRequest) ProtoMessage()    {}
func (*QueryGetSignatureShareRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{44}
}
func (m *QueryGetSignatureShareRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSignatureShareRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSignatureShareRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSignatureShareRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSignatureShareRequest.Merge(m, src)
}
func (m *QueryGetSignatureShareRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSignatureShareRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSignatureShareRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSignatureShareRequest proto.InternalMessageInfo

func (m *QueryGetSignatureShareRequest) GetMessageId() uint64 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *QueryGetSignatureShareRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetSignatureShareResponse struct {
	SignatureShare SignatureShare `protobuf:"bytes,1,opt,name=SignatureShare,proto3" json:"SignatureShare"`
}

func (m *QueryGetSignatureShareResponse) Reset()         { *m = QueryGetSignatureShareResponse{} }
func (m *QueryGetSignatureShareResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSignatureShareResponse) ProtoMessage()    {}
func (*QueryGetSignatureShareResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{45}
}
func (m *QueryGetSignatureShareResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSignatureShareResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSignatureShareResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSignatureShareResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSignatureShareResponse.Merge(m, src)
}
func (m *QueryGetSignatureShareResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSignatureShareResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSignatureShareResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSignatureShareResponse proto.InternalMessageInfo

func (m *QueryGetSignatureShareResponse) GetSignatureShare() SignatureShare {
	if m != nil {
		return m.SignatureShare
	}
	return SignatureShare{}
}

type QueryAllSignatureShareRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	MessageId  uint64             `protobuf:"varint,2,opt,name=messageId,proto3" json:"messageId,omitempty"`
}

func (m *QueryAllSignatureShareRequest) Reset()         { *m = QueryAllSignatureShareRequest{} }
func (m *QueryAllSignatureShareRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllSignatureShareRequest) ProtoMessage()    {}
func (*QueryAllSignatureShareRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{46}
}
func (m *QueryAllSignatureShareRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSignatureShareRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSignatureShareRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSignatureShareRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSignatureShareRequest.Merge(m, src)
}
func (m *QueryAllSignatureShareRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSignatureShareRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSignatureShareRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSignatureShareRequest proto.InternalMessageInfo

func (m *QueryAllSignatureShareRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *QueryAllSignatureShareRequest) GetMessageId() uint64 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

type QueryAllSignatureShareResponse struct {
	SignatureShare []SignatureShare    `protobuf:"bytes,1,rep,name=SignatureShare,proto3" json:"SignatureShare"`
	Pagination     *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSignatureShareResponse) Reset()         { *m = QueryAllSignatureShareResponse{} }
func (m *QueryAllSignatureShareResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllSignatureShareResponse) ProtoMessage()    {}
func (*QueryAllSignatureShareResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{47}
}
func (m *QueryAllSignatureShareResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSignatureShareResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSignatureShareResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSignatureShareResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSignatureShareResponse.Merge(m, src)
}
func (m *QueryAllSignatureShareResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSignatureShareResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSignatureShareResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSignatureShareResponse proto.InternalMessageInfo

func (m *QueryAllSignatureShareResponse) GetSignatureShare() []SignatureShare {
	if m != nil {
		return m.SignatureShare
	}
	return nil
}

func (m *QueryAllSignatureShareResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetSignedMessageRequest struct {
	Id    uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	MsgId uint64 `protobuf:"varint,2,opt,name=msgId,proto3" json:"msgId,omitempty"`
}

func (m *QueryGetSignedMessageRequest) Reset()         { *m = QueryGetSignedMessageRequest{} }
func (m *QueryGetSignedMessageRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSignedMessageRequest) ProtoMessage()    {}
func (*QueryGetSignedMessageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{48}
}
func (m *QueryGetSignedMessageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSignedMessageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSignedMessageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSignedMessageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSignedMessageRequest.Merge(m, src)
}
func (m *QueryGetSignedMessageRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSignedMessageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSignedMessageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSignedMessageRequest proto.InternalMessageInfo

func (m *QueryGetSignedMessageRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *QueryGetSignedMessageRequest) GetMsgId() uint64 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

type QueryGetSignedMessageResponse struct {
	SignedMessage SignedMessage `protobuf:"bytes,1,opt,name=SignedMessage,proto3" json:"SignedMessage"`
}

func (m *QueryGetSignedMessageResponse) Reset()         { *m = QueryGetSignedMessageResponse{} }
func (m *QueryGetSignedMessageResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSignedMessageResponse) ProtoMessage()    {}
func (*QueryGetSignedMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{49}
}
func (m *QueryGetSignedMessageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSignedMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSignedMessageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSignedMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSignedMessageResponse.Merge(m, src)
}
func (m *QueryGetSignedMessageResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSignedMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSignedMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSignedMessageResponse proto.InternalMessageInfo

func (m *QueryGetSignedMessageResponse) GetSignedMessage() SignedMessage {
	if m != nil {
		return m.SignedMessage
	}
	return SignedMessage{}
}

type QueryAllSignedMessageRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	MsgId      uint64             `protobuf:"varint,2,opt,name=msgId,proto3" json:"msgId,omitempty"`
}

func (m *QueryAllSignedMessageRequest) Reset()         { *m = QueryAllSignedMessageRequest{} }
func (m *QueryAllSignedMessageRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllSignedMessageRequest) ProtoMessage()    {}
func (*QueryAllSignedMessageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{50}
}
func (m *QueryAllSignedMessageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSignedMessageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSignedMessageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSignedMessageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSignedMessageRequest.Merge(m, src)
}
func (m *QueryAllSignedMessageRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSignedMessageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSignedMessageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSignedMessageRequest proto.InternalMessageInfo

func (m *QueryAllSignedMessageRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *QueryAllSignedMessageRequest) GetMsgId() uint64 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

type QueryAllSignedMessageResponse struct {
	SignedMessage []SignedMessage     `protobuf:"bytes,1,rep,name=SignedMessage,proto3" json:"SignedMessage"`
	Pagination    *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSignedMessageResponse) Reset()         { *m = QueryAllSignedMessageResponse{} }
func (m *QueryAllSignedMessageResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllSignedMessageResponse) ProtoMessage()    {}
func (*QueryAllSignedMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{51}
}
func (m *QueryAllSignedMessageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSignedMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSignedMessageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSignedMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSignedMessageResponse.Merge(m, src)
}
func (m *QueryAllSignedMessageResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSignedMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSignedMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSignedMessageResponse proto.InternalMessageInfo

func (m *QueryAllSignedMessageResponse) GetSignedMessage() []SignedMessage {
	if m != nil {
		return m.SignedMessage
	}
	return nil
}

func (m *QueryAllSignedMessageResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetMeditationSummoningRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetMeditationSummoningRequest) Reset()         { *m = QueryGetMeditationSummoningRequest{} }
func (m *QueryGetMeditationSummoningRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetMeditationSummoningRequest) ProtoMessage()    {}
func (*QueryGetMeditationSummoningRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{52}
}
func (m *QueryGetMeditationSummoningRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMeditationSummoningRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMeditationSummoningRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMeditationSummoningRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMeditationSummoningRequest.Merge(m, src)
}
func (m *QueryGetMeditationSummoningRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMeditationSummoningRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMeditationSummoningRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMeditationSummoningRequest proto.InternalMessageInfo

func (m *QueryGetMeditationSummoningRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetMeditationSummoningResponse struct {
	MeditationSummoning MeditationSummoning `protobuf:"bytes,1,opt,name=MeditationSummoning,proto3" json:"MeditationSummoning"`
}

func (m *QueryGetMeditationSummoningResponse) Reset()         { *m = QueryGetMeditationSummoningResponse{} }
func (m *QueryGetMeditationSummoningResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetMeditationSummoningResponse) ProtoMessage()    {}
func (*QueryGetMeditationSummoningResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{53}
}
func (m *QueryGetMeditationSummoningResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMeditationSummoningResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMeditationSummoningResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMeditationSummoningResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMeditationSummoningResponse.Merge(m, src)
}
func (m *QueryGetMeditationSummoningResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMeditationSummoningResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMeditationSummoningResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMeditationSummoningResponse proto.InternalMessageInfo

func (m *QueryGetMeditationSummoningResponse) GetMeditationSummoning() MeditationSummoning {
	if m != nil {
		return m.MeditationSummoning
	}
	return MeditationSummoning{}
}

type QueryAllMeditationSummoningRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllMeditationSummoningRequest) Reset()         { *m = QueryAllMeditationSummoningRequest{} }
func (m *QueryAllMeditationSummoningRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllMeditationSummoningRequest) ProtoMessage()    {}
func (*QueryAllMeditationSummoningRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{54}
}
func (m *QueryAllMeditationSummoningRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllMeditationSummoningRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllMeditationSummoningRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllMeditationSummoningRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllMeditationSummoningRequest.Merge(m, src)
}
func (m *QueryAllMeditationSummoningRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllMeditationSummoningRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllMeditationSummoningRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllMeditationSummoningRequest proto.InternalMessageInfo

func (m *QueryAllMeditationSummoningRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllMeditationSummoningResponse struct {
	MeditationSummoning []MeditationSummoning `protobuf:"bytes,1,rep,name=MeditationSummoning,proto3" json:"MeditationSummoning"`
	Pagination          *query.PageResponse   `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllMeditationSummoningResponse) Reset()         { *m = QueryAllMeditationSummoningResponse{} }
func (m *QueryAllMeditationSummoningResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllMeditationSummoningResponse) ProtoMessage()    {}
func (*QueryAllMeditationSummoningResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{55}
}
func (m *QueryAllMeditationSummoningResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllMeditationSummoningResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllMeditationSummoningResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllMeditationSummoningResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllMeditationSummoningResponse.Merge(m, src)
}
func (m *QueryAllMeditationSummoningResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllMeditationSummoningResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllMeditationSummoningResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllMeditationSummoningResponse proto.InternalMessageInfo

func (m *QueryAllMeditationSummoningResponse) GetMeditationSummoning() []MeditationSummoning {
	if m != nil {
		return m.MeditationSummoning
	}
	return nil
}

func (m *QueryAllMeditationSummoningResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetMeditationRequest struct {
	Id         uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	MagicKeyId uint64 `protobuf:"varint,2,opt,name=magicKeyId,proto3" json:"magicKeyId,omitempty"`
}

func (m *QueryGetMeditationRequest) Reset()         { *m = QueryGetMeditationRequest{} }
func (m *QueryGetMeditationRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetMeditationRequest) ProtoMessage()    {}
func (*QueryGetMeditationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{56}
}
func (m *QueryGetMeditationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMeditationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMeditationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMeditationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMeditationRequest.Merge(m, src)
}
func (m *QueryGetMeditationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMeditationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMeditationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMeditationRequest proto.InternalMessageInfo

func (m *QueryGetMeditationRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *QueryGetMeditationRequest) GetMagicKeyId() uint64 {
	if m != nil {
		return m.MagicKeyId
	}
	return 0
}

type QueryGetMeditationResponse struct {
	Meditation Meditation `protobuf:"bytes,1,opt,name=Meditation,proto3" json:"Meditation"`
}

func (m *QueryGetMeditationResponse) Reset()         { *m = QueryGetMeditationResponse{} }
func (m *QueryGetMeditationResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetMeditationResponse) ProtoMessage()    {}
func (*QueryGetMeditationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{57}
}
func (m *QueryGetMeditationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMeditationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMeditationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMeditationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMeditationResponse.Merge(m, src)
}
func (m *QueryGetMeditationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMeditationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMeditationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMeditationResponse proto.InternalMessageInfo

func (m *QueryGetMeditationResponse) GetMeditation() Meditation {
	if m != nil {
		return m.Meditation
	}
	return Meditation{}
}

type QueryAllMeditationRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	MagicKeyId uint64             `protobuf:"varint,2,opt,name=magicKeyId,proto3" json:"magicKeyId,omitempty"`
}

func (m *QueryAllMeditationRequest) Reset()         { *m = QueryAllMeditationRequest{} }
func (m *QueryAllMeditationRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllMeditationRequest) ProtoMessage()    {}
func (*QueryAllMeditationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{58}
}
func (m *QueryAllMeditationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllMeditationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllMeditationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllMeditationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllMeditationRequest.Merge(m, src)
}
func (m *QueryAllMeditationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllMeditationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllMeditationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllMeditationRequest proto.InternalMessageInfo

func (m *QueryAllMeditationRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *QueryAllMeditationRequest) GetMagicKeyId() uint64 {
	if m != nil {
		return m.MagicKeyId
	}
	return 0
}

type QueryAllMeditationResponse struct {
	Meditation []Meditation        `protobuf:"bytes,1,rep,name=Meditation,proto3" json:"Meditation"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllMeditationResponse) Reset()         { *m = QueryAllMeditationResponse{} }
func (m *QueryAllMeditationResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllMeditationResponse) ProtoMessage()    {}
func (*QueryAllMeditationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{59}
}
func (m *QueryAllMeditationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllMeditationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllMeditationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllMeditationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllMeditationResponse.Merge(m, src)
}
func (m *QueryAllMeditationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllMeditationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllMeditationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllMeditationResponse proto.InternalMessageInfo

func (m *QueryAllMeditationResponse) GetMeditation() []Meditation {
	if m != nil {
		return m.Meditation
	}
	return nil
}

func (m *QueryAllMeditationResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryMeditationCountRequest struct {
	MagicKeyId uint64 `protobuf:"varint,1,opt,name=magicKeyId,proto3" json:"magicKeyId,omitempty"`
}

func (m *QueryMeditationCountRequest) Reset()         { *m = QueryMeditationCountRequest{} }
func (m *QueryMeditationCountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryMeditationCountRequest) ProtoMessage()    {}
func (*QueryMeditationCountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{60}
}
func (m *QueryMeditationCountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMeditationCountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMeditationCountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMeditationCountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMeditationCountRequest.Merge(m, src)
}
func (m *QueryMeditationCountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryMeditationCountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMeditationCountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMeditationCountRequest proto.InternalMessageInfo

func (m *QueryMeditationCountRequest) GetMagicKeyId() uint64 {
	if m != nil {
		return m.MagicKeyId
	}
	return 0
}

type QueryMeditationCountResponse struct {
	Count string `protobuf:"bytes,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *QueryMeditationCountResponse) Reset()         { *m = QueryMeditationCountResponse{} }
func (m *QueryMeditationCountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMeditationCountResponse) ProtoMessage()    {}
func (*QueryMeditationCountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{61}
}
func (m *QueryMeditationCountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMeditationCountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMeditationCountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMeditationCountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMeditationCountResponse.Merge(m, src)
}
func (m *QueryMeditationCountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMeditationCountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMeditationCountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMeditationCountResponse proto.InternalMessageInfo

func (m *QueryMeditationCountResponse) GetCount() string {
	if m != nil {
		return m.Count
	}
	return ""
}

type QueryGetScriptureRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetScriptureRequest) Reset()         { *m = QueryGetScriptureRequest{} }
func (m *QueryGetScriptureRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetScriptureRequest) ProtoMessage()    {}
func (*QueryGetScriptureRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{62}
}
func (m *QueryGetScriptureRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetScriptureRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetScriptureRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetScriptureRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetScriptureRequest.Merge(m, src)
}
func (m *QueryGetScriptureRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetScriptureRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetScriptureRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetScriptureRequest proto.InternalMessageInfo

func (m *QueryGetScriptureRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetScriptureResponse struct {
	Scripture Scripture `protobuf:"bytes,1,opt,name=scripture,proto3" json:"scripture"`
}

func (m *QueryGetScriptureResponse) Reset()         { *m = QueryGetScriptureResponse{} }
func (m *QueryGetScriptureResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetScriptureResponse) ProtoMessage()    {}
func (*QueryGetScriptureResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{63}
}
func (m *QueryGetScriptureResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetScriptureResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetScriptureResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetScriptureResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetScriptureResponse.Merge(m, src)
}
func (m *QueryGetScriptureResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetScriptureResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetScriptureResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetScriptureResponse proto.InternalMessageInfo

func (m *QueryGetScriptureResponse) GetScripture() Scripture {
	if m != nil {
		return m.Scripture
	}
	return Scripture{}
}

type QueryAllScriptureRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllScriptureRequest) Reset()         { *m = QueryAllScriptureRequest{} }
func (m *QueryAllScriptureRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllScriptureRequest) ProtoMessage()    {}
func (*QueryAllScriptureRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{64}
}
func (m *QueryAllScriptureRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllScriptureRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllScriptureRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllScriptureRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllScriptureRequest.Merge(m, src)
}
func (m *QueryAllScriptureRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllScriptureRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllScriptureRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllScriptureRequest proto.InternalMessageInfo

func (m *QueryAllScriptureRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllScriptureResponse struct {
	Scripture  []Scripture         `protobuf:"bytes,1,rep,name=scripture,proto3" json:"scripture"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllScriptureResponse) Reset()         { *m = QueryAllScriptureResponse{} }
func (m *QueryAllScriptureResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllScriptureResponse) ProtoMessage()    {}
func (*QueryAllScriptureResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{65}
}
func (m *QueryAllScriptureResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllScriptureResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllScriptureResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllScriptureResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllScriptureResponse.Merge(m, src)
}
func (m *QueryAllScriptureResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllScriptureResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllScriptureResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllScriptureResponse proto.InternalMessageInfo

func (m *QueryAllScriptureResponse) GetScripture() []Scripture {
	if m != nil {
		return m.Scripture
	}
	return nil
}

func (m *QueryAllScriptureResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetScriptureSignatureRequestRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetScriptureSignatureRequestRequest) Reset() {
	*m = QueryGetScriptureSignatureRequestRequest{}
}
func (m *QueryGetScriptureSignatureRequestRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetScriptureSignatureRequestRequest) ProtoMessage()    {}
func (*QueryGetScriptureSignatureRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{66}
}
func (m *QueryGetScriptureSignatureRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetScriptureSignatureRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetScriptureSignatureRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetScriptureSignatureRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetScriptureSignatureRequestRequest.Merge(m, src)
}
func (m *QueryGetScriptureSignatureRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetScriptureSignatureRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetScriptureSignatureRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetScriptureSignatureRequestRequest proto.InternalMessageInfo

func (m *QueryGetScriptureSignatureRequestRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetScriptureSignatureRequestResponse struct {
	ScriptureSignatureRequest ScriptureSignatureRequest `protobuf:"bytes,1,opt,name=ScriptureSignatureRequest,proto3" json:"ScriptureSignatureRequest"`
}

func (m *QueryGetScriptureSignatureRequestResponse) Reset() {
	*m = QueryGetScriptureSignatureRequestResponse{}
}
func (m *QueryGetScriptureSignatureRequestResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetScriptureSignatureRequestResponse) ProtoMessage() {}
func (*QueryGetScriptureSignatureRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{67}
}
func (m *QueryGetScriptureSignatureRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetScriptureSignatureRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetScriptureSignatureRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetScriptureSignatureRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetScriptureSignatureRequestResponse.Merge(m, src)
}
func (m *QueryGetScriptureSignatureRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetScriptureSignatureRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetScriptureSignatureRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetScriptureSignatureRequestResponse proto.InternalMessageInfo

func (m *QueryGetScriptureSignatureRequestResponse) GetScriptureSignatureRequest() ScriptureSignatureRequest {
	if m != nil {
		return m.ScriptureSignatureRequest
	}
	return ScriptureSignatureRequest{}
}

type QueryAllScriptureSignatureRequestRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllScriptureSignatureRequestRequest) Reset() {
	*m = QueryAllScriptureSignatureRequestRequest{}
}
func (m *QueryAllScriptureSignatureRequestRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllScriptureSignatureRequestRequest) ProtoMessage()    {}
func (*QueryAllScriptureSignatureRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{68}
}
func (m *QueryAllScriptureSignatureRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllScriptureSignatureRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllScriptureSignatureRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllScriptureSignatureRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllScriptureSignatureRequestRequest.Merge(m, src)
}
func (m *QueryAllScriptureSignatureRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllScriptureSignatureRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllScriptureSignatureRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllScriptureSignatureRequestRequest proto.InternalMessageInfo

func (m *QueryAllScriptureSignatureRequestRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllScriptureSignatureRequestResponse struct {
	ScriptureSignatureRequest []ScriptureSignatureRequest `protobuf:"bytes,1,rep,name=ScriptureSignatureRequest,proto3" json:"ScriptureSignatureRequest"`
	Pagination                *query.PageResponse         `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllScriptureSignatureRequestResponse) Reset() {
	*m = QueryAllScriptureSignatureRequestResponse{}
}
func (m *QueryAllScriptureSignatureRequestResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllScriptureSignatureRequestResponse) ProtoMessage() {}
func (*QueryAllScriptureSignatureRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{69}
}
func (m *QueryAllScriptureSignatureRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllScriptureSignatureRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllScriptureSignatureRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllScriptureSignatureRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllScriptureSignatureRequestResponse.Merge(m, src)
}
func (m *QueryAllScriptureSignatureRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllScriptureSignatureRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllScriptureSignatureRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllScriptureSignatureRequestResponse proto.InternalMessageInfo

func (m *QueryAllScriptureSignatureRequestResponse) GetScriptureSignatureRequest() []ScriptureSignatureRequest {
	if m != nil {
		return m.ScriptureSignatureRequest
	}
	return nil
}

func (m *QueryAllScriptureSignatureRequestResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetScriptureSignatureShareRequest struct {
	Id             uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ScriptureIndex string `protobuf:"bytes,2,opt,name=scriptureIndex,proto3" json:"scriptureIndex,omitempty"`
}

func (m *QueryGetScriptureSignatureShareRequest) Reset() {
	*m = QueryGetScriptureSignatureShareRequest{}
}
func (m *QueryGetScriptureSignatureShareRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetScriptureSignatureShareRequest) ProtoMessage()    {}
func (*QueryGetScriptureSignatureShareRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{70}
}
func (m *QueryGetScriptureSignatureShareRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetScriptureSignatureShareRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetScriptureSignatureShareRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetScriptureSignatureShareRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetScriptureSignatureShareRequest.Merge(m, src)
}
func (m *QueryGetScriptureSignatureShareRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetScriptureSignatureShareRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetScriptureSignatureShareRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetScriptureSignatureShareRequest proto.InternalMessageInfo

func (m *QueryGetScriptureSignatureShareRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *QueryGetScriptureSignatureShareRequest) GetScriptureIndex() string {
	if m != nil {
		return m.ScriptureIndex
	}
	return ""
}

type QueryGetScriptureSignatureShareResponse struct {
	ScriptureSignatureShare ScriptureSignatureShare `protobuf:"bytes,1,opt,name=ScriptureSignatureShare,proto3" json:"ScriptureSignatureShare"`
}

func (m *QueryGetScriptureSignatureShareResponse) Reset() {
	*m = QueryGetScriptureSignatureShareResponse{}
}
func (m *QueryGetScriptureSignatureShareResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetScriptureSignatureShareResponse) ProtoMessage()    {}
func (*QueryGetScriptureSignatureShareResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{71}
}
func (m *QueryGetScriptureSignatureShareResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetScriptureSignatureShareResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetScriptureSignatureShareResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetScriptureSignatureShareResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetScriptureSignatureShareResponse.Merge(m, src)
}
func (m *QueryGetScriptureSignatureShareResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetScriptureSignatureShareResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetScriptureSignatureShareResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetScriptureSignatureShareResponse proto.InternalMessageInfo

func (m *QueryGetScriptureSignatureShareResponse) GetScriptureSignatureShare() ScriptureSignatureShare {
	if m != nil {
		return m.ScriptureSignatureShare
	}
	return ScriptureSignatureShare{}
}

type QueryAllScriptureSignatureShareRequest struct {
	Pagination     *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	ScriptureIndex string             `protobuf:"bytes,2,opt,name=scriptureIndex,proto3" json:"scriptureIndex,omitempty"`
}

func (m *QueryAllScriptureSignatureShareRequest) Reset() {
	*m = QueryAllScriptureSignatureShareRequest{}
}
func (m *QueryAllScriptureSignatureShareRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllScriptureSignatureShareRequest) ProtoMessage()    {}
func (*QueryAllScriptureSignatureShareRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{72}
}
func (m *QueryAllScriptureSignatureShareRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllScriptureSignatureShareRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllScriptureSignatureShareRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllScriptureSignatureShareRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllScriptureSignatureShareRequest.Merge(m, src)
}
func (m *QueryAllScriptureSignatureShareRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllScriptureSignatureShareRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllScriptureSignatureShareRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllScriptureSignatureShareRequest proto.InternalMessageInfo

func (m *QueryAllScriptureSignatureShareRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *QueryAllScriptureSignatureShareRequest) GetScriptureIndex() string {
	if m != nil {
		return m.ScriptureIndex
	}
	return ""
}

type QueryAllScriptureSignatureShareResponse struct {
	ScriptureSignatureShare []ScriptureSignatureShare `protobuf:"bytes,1,rep,name=ScriptureSignatureShare,proto3" json:"ScriptureSignatureShare"`
	Pagination              *query.PageResponse       `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllScriptureSignatureShareResponse) Reset() {
	*m = QueryAllScriptureSignatureShareResponse{}
}
func (m *QueryAllScriptureSignatureShareResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllScriptureSignatureShareResponse) ProtoMessage()    {}
func (*QueryAllScriptureSignatureShareResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{73}
}
func (m *QueryAllScriptureSignatureShareResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllScriptureSignatureShareResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllScriptureSignatureShareResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllScriptureSignatureShareResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllScriptureSignatureShareResponse.Merge(m, src)
}
func (m *QueryAllScriptureSignatureShareResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllScriptureSignatureShareResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllScriptureSignatureShareResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllScriptureSignatureShareResponse proto.InternalMessageInfo

func (m *QueryAllScriptureSignatureShareResponse) GetScriptureSignatureShare() []ScriptureSignatureShare {
	if m != nil {
		return m.ScriptureSignatureShare
	}
	return nil
}

func (m *QueryAllScriptureSignatureShareResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetSignedScriptureRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetSignedScriptureRequest) Reset()         { *m = QueryGetSignedScriptureRequest{} }
func (m *QueryGetSignedScriptureRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSignedScriptureRequest) ProtoMessage()    {}
func (*QueryGetSignedScriptureRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{74}
}
func (m *QueryGetSignedScriptureRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSignedScriptureRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSignedScriptureRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSignedScriptureRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSignedScriptureRequest.Merge(m, src)
}
func (m *QueryGetSignedScriptureRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSignedScriptureRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSignedScriptureRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSignedScriptureRequest proto.InternalMessageInfo

func (m *QueryGetSignedScriptureRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetSignedScriptureResponse struct {
	SignedScripture SignedScripture `protobuf:"bytes,1,opt,name=signedScripture,proto3" json:"signedScripture"`
}

func (m *QueryGetSignedScriptureResponse) Reset()         { *m = QueryGetSignedScriptureResponse{} }
func (m *QueryGetSignedScriptureResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSignedScriptureResponse) ProtoMessage()    {}
func (*QueryGetSignedScriptureResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{75}
}
func (m *QueryGetSignedScriptureResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSignedScriptureResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSignedScriptureResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSignedScriptureResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSignedScriptureResponse.Merge(m, src)
}
func (m *QueryGetSignedScriptureResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSignedScriptureResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSignedScriptureResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSignedScriptureResponse proto.InternalMessageInfo

func (m *QueryGetSignedScriptureResponse) GetSignedScripture() SignedScripture {
	if m != nil {
		return m.SignedScripture
	}
	return SignedScripture{}
}

type QueryAllSignedScriptureRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSignedScriptureRequest) Reset()         { *m = QueryAllSignedScriptureRequest{} }
func (m *QueryAllSignedScriptureRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllSignedScriptureRequest) ProtoMessage()    {}
func (*QueryAllSignedScriptureRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{76}
}
func (m *QueryAllSignedScriptureRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSignedScriptureRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSignedScriptureRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSignedScriptureRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSignedScriptureRequest.Merge(m, src)
}
func (m *QueryAllSignedScriptureRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSignedScriptureRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSignedScriptureRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSignedScriptureRequest proto.InternalMessageInfo

func (m *QueryAllSignedScriptureRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllSignedScriptureResponse struct {
	SignedScripture []SignedScripture   `protobuf:"bytes,1,rep,name=signedScripture,proto3" json:"signedScripture"`
	Pagination      *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSignedScriptureResponse) Reset()         { *m = QueryAllSignedScriptureResponse{} }
func (m *QueryAllSignedScriptureResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllSignedScriptureResponse) ProtoMessage()    {}
func (*QueryAllSignedScriptureResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{77}
}
func (m *QueryAllSignedScriptureResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSignedScriptureResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSignedScriptureResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSignedScriptureResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSignedScriptureResponse.Merge(m, src)
}
func (m *QueryAllSignedScriptureResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSignedScriptureResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSignedScriptureResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSignedScriptureResponse proto.InternalMessageInfo

func (m *QueryAllSignedScriptureResponse) GetSignedScripture() []SignedScripture {
	if m != nil {
		return m.SignedScripture
	}
	return nil
}

func (m *QueryAllSignedScriptureResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetSignedScriptureListRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetSignedScriptureListRequest) Reset()         { *m = QueryGetSignedScriptureListRequest{} }
func (m *QueryGetSignedScriptureListRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSignedScriptureListRequest) ProtoMessage()    {}
func (*QueryGetSignedScriptureListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{78}
}
func (m *QueryGetSignedScriptureListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSignedScriptureListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSignedScriptureListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSignedScriptureListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSignedScriptureListRequest.Merge(m, src)
}
func (m *QueryGetSignedScriptureListRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSignedScriptureListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSignedScriptureListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSignedScriptureListRequest proto.InternalMessageInfo

func (m *QueryGetSignedScriptureListRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetSignedScriptureListResponse struct {
	SignedScriptureList SignedScriptureList `protobuf:"bytes,1,opt,name=SignedScriptureList,proto3" json:"SignedScriptureList"`
}

func (m *QueryGetSignedScriptureListResponse) Reset()         { *m = QueryGetSignedScriptureListResponse{} }
func (m *QueryGetSignedScriptureListResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSignedScriptureListResponse) ProtoMessage()    {}
func (*QueryGetSignedScriptureListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{79}
}
func (m *QueryGetSignedScriptureListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSignedScriptureListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSignedScriptureListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSignedScriptureListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSignedScriptureListResponse.Merge(m, src)
}
func (m *QueryGetSignedScriptureListResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSignedScriptureListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSignedScriptureListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSignedScriptureListResponse proto.InternalMessageInfo

func (m *QueryGetSignedScriptureListResponse) GetSignedScriptureList() SignedScriptureList {
	if m != nil {
		return m.SignedScriptureList
	}
	return SignedScriptureList{}
}

type QueryAllSignedScriptureListRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSignedScriptureListRequest) Reset()         { *m = QueryAllSignedScriptureListRequest{} }
func (m *QueryAllSignedScriptureListRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllSignedScriptureListRequest) ProtoMessage()    {}
func (*QueryAllSignedScriptureListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{80}
}
func (m *QueryAllSignedScriptureListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSignedScriptureListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSignedScriptureListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSignedScriptureListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSignedScriptureListRequest.Merge(m, src)
}
func (m *QueryAllSignedScriptureListRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSignedScriptureListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSignedScriptureListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSignedScriptureListRequest proto.InternalMessageInfo

func (m *QueryAllSignedScriptureListRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllSignedScriptureListResponse struct {
	SignedScriptureList []SignedScriptureList `protobuf:"bytes,1,rep,name=SignedScriptureList,proto3" json:"SignedScriptureList"`
	Pagination          *query.PageResponse   `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSignedScriptureListResponse) Reset()         { *m = QueryAllSignedScriptureListResponse{} }
func (m *QueryAllSignedScriptureListResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllSignedScriptureListResponse) ProtoMessage()    {}
func (*QueryAllSignedScriptureListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{81}
}
func (m *QueryAllSignedScriptureListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSignedScriptureListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSignedScriptureListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSignedScriptureListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSignedScriptureListResponse.Merge(m, src)
}
func (m *QueryAllSignedScriptureListResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSignedScriptureListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSignedScriptureListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSignedScriptureListResponse proto.InternalMessageInfo

func (m *QueryAllSignedScriptureListResponse) GetSignedScriptureList() []SignedScriptureList {
	if m != nil {
		return m.SignedScriptureList
	}
	return nil
}

func (m *QueryAllSignedScriptureListResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// this line is used by starport scaffolding # 3
type QueryGetBlessingRequest struct {
	Id    uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Index string `protobuf:"bytes,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetBlessingRequest) Reset()         { *m = QueryGetBlessingRequest{} }
func (m *QueryGetBlessingRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetBlessingRequest) ProtoMessage()    {}
func (*QueryGetBlessingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{82}
}
func (m *QueryGetBlessingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBlessingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBlessingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBlessingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBlessingRequest.Merge(m, src)
}
func (m *QueryGetBlessingRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBlessingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBlessingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBlessingRequest proto.InternalMessageInfo

func (m *QueryGetBlessingRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *QueryGetBlessingRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetBlessingResponse struct {
	Blessing Blessing `protobuf:"bytes,1,opt,name=Blessing,proto3" json:"Blessing"`
}

func (m *QueryGetBlessingResponse) Reset()         { *m = QueryGetBlessingResponse{} }
func (m *QueryGetBlessingResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetBlessingResponse) ProtoMessage()    {}
func (*QueryGetBlessingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{83}
}
func (m *QueryGetBlessingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBlessingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBlessingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBlessingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBlessingResponse.Merge(m, src)
}
func (m *QueryGetBlessingResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBlessingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBlessingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBlessingResponse proto.InternalMessageInfo

func (m *QueryGetBlessingResponse) GetBlessing() Blessing {
	if m != nil {
		return m.Blessing
	}
	return Blessing{}
}

type QueryAllBlessingRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Index      string             `protobuf:"bytes,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryAllBlessingRequest) Reset()         { *m = QueryAllBlessingRequest{} }
func (m *QueryAllBlessingRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllBlessingRequest) ProtoMessage()    {}
func (*QueryAllBlessingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{84}
}
func (m *QueryAllBlessingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllBlessingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllBlessingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllBlessingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllBlessingRequest.Merge(m, src)
}
func (m *QueryAllBlessingRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllBlessingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllBlessingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllBlessingRequest proto.InternalMessageInfo

func (m *QueryAllBlessingRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *QueryAllBlessingRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryAllBlessingResponse struct {
	Blessing   []Blessing          `protobuf:"bytes,1,rep,name=Blessing,proto3" json:"Blessing"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllBlessingResponse) Reset()         { *m = QueryAllBlessingResponse{} }
func (m *QueryAllBlessingResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllBlessingResponse) ProtoMessage()    {}
func (*QueryAllBlessingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{85}
}
func (m *QueryAllBlessingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllBlessingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllBlessingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllBlessingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllBlessingResponse.Merge(m, src)
}
func (m *QueryAllBlessingResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllBlessingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllBlessingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllBlessingResponse proto.InternalMessageInfo

func (m *QueryAllBlessingResponse) GetBlessing() []Blessing {
	if m != nil {
		return m.Blessing
	}
	return nil
}

func (m *QueryAllBlessingResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetBlessingReceiptRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetBlessingReceiptRequest) Reset()         { *m = QueryGetBlessingReceiptRequest{} }
func (m *QueryGetBlessingReceiptRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetBlessingReceiptRequest) ProtoMessage()    {}
func (*QueryGetBlessingReceiptRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{86}
}
func (m *QueryGetBlessingReceiptRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBlessingReceiptRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBlessingReceiptRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBlessingReceiptRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBlessingReceiptRequest.Merge(m, src)
}
func (m *QueryGetBlessingReceiptRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBlessingReceiptRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBlessingReceiptRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBlessingReceiptRequest proto.InternalMessageInfo

func (m *QueryGetBlessingReceiptRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetBlessingReceiptResponse struct {
	BlessingReceipt BlessingReceipt `protobuf:"bytes,1,opt,name=blessingReceipt,proto3" json:"blessingReceipt"`
}

func (m *QueryGetBlessingReceiptResponse) Reset()         { *m = QueryGetBlessingReceiptResponse{} }
func (m *QueryGetBlessingReceiptResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetBlessingReceiptResponse) ProtoMessage()    {}
func (*QueryGetBlessingReceiptResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{87}
}
func (m *QueryGetBlessingReceiptResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBlessingReceiptResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBlessingReceiptResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBlessingReceiptResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBlessingReceiptResponse.Merge(m, src)
}
func (m *QueryGetBlessingReceiptResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBlessingReceiptResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBlessingReceiptResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBlessingReceiptResponse proto.InternalMessageInfo

func (m *QueryGetBlessingReceiptResponse) GetBlessingReceipt() BlessingReceipt {
	if m != nil {
		return m.BlessingReceipt
	}
	return BlessingReceipt{}
}

type QueryAllBlessingReceiptRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllBlessingReceiptRequest) Reset()         { *m = QueryAllBlessingReceiptRequest{} }
func (m *QueryAllBlessingReceiptRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllBlessingReceiptRequest) ProtoMessage()    {}
func (*QueryAllBlessingReceiptRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{88}
}
func (m *QueryAllBlessingReceiptRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllBlessingReceiptRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllBlessingReceiptRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllBlessingReceiptRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllBlessingReceiptRequest.Merge(m, src)
}
func (m *QueryAllBlessingReceiptRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllBlessingReceiptRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllBlessingReceiptRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllBlessingReceiptRequest proto.InternalMessageInfo

func (m *QueryAllBlessingReceiptRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllBlessingReceiptResponse struct {
	BlessingReceipt []BlessingReceipt   `protobuf:"bytes,1,rep,name=blessingReceipt,proto3" json:"blessingReceipt"`
	Pagination      *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllBlessingReceiptResponse) Reset()         { *m = QueryAllBlessingReceiptResponse{} }
func (m *QueryAllBlessingReceiptResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllBlessingReceiptResponse) ProtoMessage()    {}
func (*QueryAllBlessingReceiptResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{89}
}
func (m *QueryAllBlessingReceiptResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllBlessingReceiptResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllBlessingReceiptResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllBlessingReceiptResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllBlessingReceiptResponse.Merge(m, src)
}
func (m *QueryAllBlessingReceiptResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllBlessingReceiptResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllBlessingReceiptResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllBlessingReceiptResponse proto.InternalMessageInfo

func (m *QueryAllBlessingReceiptResponse) GetBlessingReceipt() []BlessingReceipt {
	if m != nil {
		return m.BlessingReceipt
	}
	return nil
}

func (m *QueryAllBlessingReceiptResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetImploringRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetImploringRequest) Reset()         { *m = QueryGetImploringRequest{} }
func (m *QueryGetImploringRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetImploringRequest) ProtoMessage()    {}
func (*QueryGetImploringRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{90}
}
func (m *QueryGetImploringRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetImploringRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetImploringRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetImploringRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetImploringRequest.Merge(m, src)
}
func (m *QueryGetImploringRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetImploringRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetImploringRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetImploringRequest proto.InternalMessageInfo

func (m *QueryGetImploringRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetImploringResponse struct {
	Imploring Imploring `protobuf:"bytes,1,opt,name=Imploring,proto3" json:"Imploring"`
}

func (m *QueryGetImploringResponse) Reset()         { *m = QueryGetImploringResponse{} }
func (m *QueryGetImploringResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetImploringResponse) ProtoMessage()    {}
func (*QueryGetImploringResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{91}
}
func (m *QueryGetImploringResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetImploringResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetImploringResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetImploringResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetImploringResponse.Merge(m, src)
}
func (m *QueryGetImploringResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetImploringResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetImploringResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetImploringResponse proto.InternalMessageInfo

func (m *QueryGetImploringResponse) GetImploring() Imploring {
	if m != nil {
		return m.Imploring
	}
	return Imploring{}
}

type QueryAllImploringRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllImploringRequest) Reset()         { *m = QueryAllImploringRequest{} }
func (m *QueryAllImploringRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllImploringRequest) ProtoMessage()    {}
func (*QueryAllImploringRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{92}
}
func (m *QueryAllImploringRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllImploringRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllImploringRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllImploringRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllImploringRequest.Merge(m, src)
}
func (m *QueryAllImploringRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllImploringRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllImploringRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllImploringRequest proto.InternalMessageInfo

func (m *QueryAllImploringRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllImploringResponse struct {
	Imploring  []Imploring         `protobuf:"bytes,1,rep,name=Imploring,proto3" json:"Imploring"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllImploringResponse) Reset()         { *m = QueryAllImploringResponse{} }
func (m *QueryAllImploringResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllImploringResponse) ProtoMessage()    {}
func (*QueryAllImploringResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{93}
}
func (m *QueryAllImploringResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllImploringResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllImploringResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllImploringResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllImploringResponse.Merge(m, src)
}
func (m *QueryAllImploringResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllImploringResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllImploringResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllImploringResponse proto.InternalMessageInfo

func (m *QueryAllImploringResponse) GetImploring() []Imploring {
	if m != nil {
		return m.Imploring
	}
	return nil
}

func (m *QueryAllImploringResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetKillConjuringRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetKillConjuringRequest) Reset()         { *m = QueryGetKillConjuringRequest{} }
func (m *QueryGetKillConjuringRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetKillConjuringRequest) ProtoMessage()    {}
func (*QueryGetKillConjuringRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{94}
}
func (m *QueryGetKillConjuringRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetKillConjuringRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetKillConjuringRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetKillConjuringRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetKillConjuringRequest.Merge(m, src)
}
func (m *QueryGetKillConjuringRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetKillConjuringRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetKillConjuringRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetKillConjuringRequest proto.InternalMessageInfo

func (m *QueryGetKillConjuringRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetKillConjuringResponse struct {
	KillConjuring KillConjuring `protobuf:"bytes,1,opt,name=KillConjuring,proto3" json:"KillConjuring"`
}

func (m *QueryGetKillConjuringResponse) Reset()         { *m = QueryGetKillConjuringResponse{} }
func (m *QueryGetKillConjuringResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetKillConjuringResponse) ProtoMessage()    {}
func (*QueryGetKillConjuringResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{95}
}
func (m *QueryGetKillConjuringResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetKillConjuringResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetKillConjuringResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetKillConjuringResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetKillConjuringResponse.Merge(m, src)
}
func (m *QueryGetKillConjuringResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetKillConjuringResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetKillConjuringResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetKillConjuringResponse proto.InternalMessageInfo

func (m *QueryGetKillConjuringResponse) GetKillConjuring() KillConjuring {
	if m != nil {
		return m.KillConjuring
	}
	return KillConjuring{}
}

type QueryAllKillConjuringRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllKillConjuringRequest) Reset()         { *m = QueryAllKillConjuringRequest{} }
func (m *QueryAllKillConjuringRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllKillConjuringRequest) ProtoMessage()    {}
func (*QueryAllKillConjuringRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{96}
}
func (m *QueryAllKillConjuringRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllKillConjuringRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllKillConjuringRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllKillConjuringRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllKillConjuringRequest.Merge(m, src)
}
func (m *QueryAllKillConjuringRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllKillConjuringRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllKillConjuringRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllKillConjuringRequest proto.InternalMessageInfo

func (m *QueryAllKillConjuringRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllKillConjuringResponse struct {
	KillConjuring []KillConjuring     `protobuf:"bytes,1,rep,name=KillConjuring,proto3" json:"KillConjuring"`
	Pagination    *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllKillConjuringResponse) Reset()         { *m = QueryAllKillConjuringResponse{} }
func (m *QueryAllKillConjuringResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllKillConjuringResponse) ProtoMessage()    {}
func (*QueryAllKillConjuringResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{97}
}
func (m *QueryAllKillConjuringResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllKillConjuringResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllKillConjuringResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllKillConjuringResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllKillConjuringResponse.Merge(m, src)
}
func (m *QueryAllKillConjuringResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllKillConjuringResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllKillConjuringResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllKillConjuringResponse proto.InternalMessageInfo

func (m *QueryAllKillConjuringResponse) GetKillConjuring() []KillConjuring {
	if m != nil {
		return m.KillConjuring
	}
	return nil
}

func (m *QueryAllKillConjuringResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetKillImploringRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetKillImploringRequest) Reset()         { *m = QueryGetKillImploringRequest{} }
func (m *QueryGetKillImploringRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetKillImploringRequest) ProtoMessage()    {}
func (*QueryGetKillImploringRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{98}
}
func (m *QueryGetKillImploringRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetKillImploringRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetKillImploringRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetKillImploringRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetKillImploringRequest.Merge(m, src)
}
func (m *QueryGetKillImploringRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetKillImploringRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetKillImploringRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetKillImploringRequest proto.InternalMessageInfo

func (m *QueryGetKillImploringRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetKillImploringResponse struct {
	KillImploring KillImploring `protobuf:"bytes,1,opt,name=KillImploring,proto3" json:"KillImploring"`
}

func (m *QueryGetKillImploringResponse) Reset()         { *m = QueryGetKillImploringResponse{} }
func (m *QueryGetKillImploringResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetKillImploringResponse) ProtoMessage()    {}
func (*QueryGetKillImploringResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{99}
}
func (m *QueryGetKillImploringResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetKillImploringResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetKillImploringResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetKillImploringResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetKillImploringResponse.Merge(m, src)
}
func (m *QueryGetKillImploringResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetKillImploringResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetKillImploringResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetKillImploringResponse proto.InternalMessageInfo

func (m *QueryGetKillImploringResponse) GetKillImploring() KillImploring {
	if m != nil {
		return m.KillImploring
	}
	return KillImploring{}
}

type QueryAllKillImploringRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllKillImploringRequest) Reset()         { *m = QueryAllKillImploringRequest{} }
func (m *QueryAllKillImploringRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllKillImploringRequest) ProtoMessage()    {}
func (*QueryAllKillImploringRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{100}
}
func (m *QueryAllKillImploringRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllKillImploringRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllKillImploringRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllKillImploringRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllKillImploringRequest.Merge(m, src)
}
func (m *QueryAllKillImploringRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllKillImploringRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllKillImploringRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllKillImploringRequest proto.InternalMessageInfo

func (m *QueryAllKillImploringRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllKillImploringResponse struct {
	KillImploring []KillImploring     `protobuf:"bytes,1,rep,name=KillImploring,proto3" json:"KillImploring"`
	Pagination    *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllKillImploringResponse) Reset()         { *m = QueryAllKillImploringResponse{} }
func (m *QueryAllKillImploringResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllKillImploringResponse) ProtoMessage()    {}
func (*QueryAllKillImploringResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{101}
}
func (m *QueryAllKillImploringResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllKillImploringResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllKillImploringResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllKillImploringResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllKillImploringResponse.Merge(m, src)
}
func (m *QueryAllKillImploringResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllKillImploringResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllKillImploringResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllKillImploringResponse proto.InternalMessageInfo

func (m *QueryAllKillImploringResponse) GetKillImploring() []KillImploring {
	if m != nil {
		return m.KillImploring
	}
	return nil
}

func (m *QueryAllKillImploringResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetKillMeditationSummoningRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetKillMeditationSummoningRequest) Reset() {
	*m = QueryGetKillMeditationSummoningRequest{}
}
func (m *QueryGetKillMeditationSummoningRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetKillMeditationSummoningRequest) ProtoMessage()    {}
func (*QueryGetKillMeditationSummoningRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{102}
}
func (m *QueryGetKillMeditationSummoningRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetKillMeditationSummoningRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetKillMeditationSummoningRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetKillMeditationSummoningRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetKillMeditationSummoningRequest.Merge(m, src)
}
func (m *QueryGetKillMeditationSummoningRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetKillMeditationSummoningRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetKillMeditationSummoningRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetKillMeditationSummoningRequest proto.InternalMessageInfo

func (m *QueryGetKillMeditationSummoningRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetKillMeditationSummoningResponse struct {
	KillMeditationSummoning KillMeditationSummoning `protobuf:"bytes,1,opt,name=KillMeditationSummoning,proto3" json:"KillMeditationSummoning"`
}

func (m *QueryGetKillMeditationSummoningResponse) Reset() {
	*m = QueryGetKillMeditationSummoningResponse{}
}
func (m *QueryGetKillMeditationSummoningResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetKillMeditationSummoningResponse) ProtoMessage()    {}
func (*QueryGetKillMeditationSummoningResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{103}
}
func (m *QueryGetKillMeditationSummoningResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetKillMeditationSummoningResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetKillMeditationSummoningResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetKillMeditationSummoningResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetKillMeditationSummoningResponse.Merge(m, src)
}
func (m *QueryGetKillMeditationSummoningResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetKillMeditationSummoningResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetKillMeditationSummoningResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetKillMeditationSummoningResponse proto.InternalMessageInfo

func (m *QueryGetKillMeditationSummoningResponse) GetKillMeditationSummoning() KillMeditationSummoning {
	if m != nil {
		return m.KillMeditationSummoning
	}
	return KillMeditationSummoning{}
}

type QueryAllKillMeditationSummoningRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllKillMeditationSummoningRequest) Reset() {
	*m = QueryAllKillMeditationSummoningRequest{}
}
func (m *QueryAllKillMeditationSummoningRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllKillMeditationSummoningRequest) ProtoMessage()    {}
func (*QueryAllKillMeditationSummoningRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{104}
}
func (m *QueryAllKillMeditationSummoningRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllKillMeditationSummoningRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllKillMeditationSummoningRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllKillMeditationSummoningRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllKillMeditationSummoningRequest.Merge(m, src)
}
func (m *QueryAllKillMeditationSummoningRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllKillMeditationSummoningRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllKillMeditationSummoningRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllKillMeditationSummoningRequest proto.InternalMessageInfo

func (m *QueryAllKillMeditationSummoningRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllKillMeditationSummoningResponse struct {
	KillMeditationSummoning []KillMeditationSummoning `protobuf:"bytes,1,rep,name=KillMeditationSummoning,proto3" json:"KillMeditationSummoning"`
	Pagination              *query.PageResponse       `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllKillMeditationSummoningResponse) Reset() {
	*m = QueryAllKillMeditationSummoningResponse{}
}
func (m *QueryAllKillMeditationSummoningResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllKillMeditationSummoningResponse) ProtoMessage()    {}
func (*QueryAllKillMeditationSummoningResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{105}
}
func (m *QueryAllKillMeditationSummoningResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllKillMeditationSummoningResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllKillMeditationSummoningResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllKillMeditationSummoningResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllKillMeditationSummoningResponse.Merge(m, src)
}
func (m *QueryAllKillMeditationSummoningResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllKillMeditationSummoningResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllKillMeditationSummoningResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllKillMeditationSummoningResponse proto.InternalMessageInfo

func (m *QueryAllKillMeditationSummoningResponse) GetKillMeditationSummoning() []KillMeditationSummoning {
	if m != nil {
		return m.KillMeditationSummoning
	}
	return nil
}

func (m *QueryAllKillMeditationSummoningResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetKillMagicKeySummoningRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetKillMagicKeySummoningRequest) Reset()         { *m = QueryGetKillMagicKeySummoningRequest{} }
func (m *QueryGetKillMagicKeySummoningRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetKillMagicKeySummoningRequest) ProtoMessage()    {}
func (*QueryGetKillMagicKeySummoningRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{106}
}
func (m *QueryGetKillMagicKeySummoningRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetKillMagicKeySummoningRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetKillMagicKeySummoningRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetKillMagicKeySummoningRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetKillMagicKeySummoningRequest.Merge(m, src)
}
func (m *QueryGetKillMagicKeySummoningRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetKillMagicKeySummoningRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetKillMagicKeySummoningRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetKillMagicKeySummoningRequest proto.InternalMessageInfo

func (m *QueryGetKillMagicKeySummoningRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetKillMagicKeySummoningResponse struct {
	KillMagicKeySummoning KillMagicKeySummoning `protobuf:"bytes,1,opt,name=KillMagicKeySummoning,proto3" json:"KillMagicKeySummoning"`
}

func (m *QueryGetKillMagicKeySummoningResponse) Reset()         { *m = QueryGetKillMagicKeySummoningResponse{} }
func (m *QueryGetKillMagicKeySummoningResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetKillMagicKeySummoningResponse) ProtoMessage()    {}
func (*QueryGetKillMagicKeySummoningResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{107}
}
func (m *QueryGetKillMagicKeySummoningResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetKillMagicKeySummoningResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetKillMagicKeySummoningResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetKillMagicKeySummoningResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetKillMagicKeySummoningResponse.Merge(m, src)
}
func (m *QueryGetKillMagicKeySummoningResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetKillMagicKeySummoningResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetKillMagicKeySummoningResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetKillMagicKeySummoningResponse proto.InternalMessageInfo

func (m *QueryGetKillMagicKeySummoningResponse) GetKillMagicKeySummoning() KillMagicKeySummoning {
	if m != nil {
		return m.KillMagicKeySummoning
	}
	return KillMagicKeySummoning{}
}

type QueryAllKillMagicKeySummoningRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllKillMagicKeySummoningRequest) Reset()         { *m = QueryAllKillMagicKeySummoningRequest{} }
func (m *QueryAllKillMagicKeySummoningRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllKillMagicKeySummoningRequest) ProtoMessage()    {}
func (*QueryAllKillMagicKeySummoningRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{108}
}
func (m *QueryAllKillMagicKeySummoningRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllKillMagicKeySummoningRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllKillMagicKeySummoningRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllKillMagicKeySummoningRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllKillMagicKeySummoningRequest.Merge(m, src)
}
func (m *QueryAllKillMagicKeySummoningRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllKillMagicKeySummoningRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllKillMagicKeySummoningRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllKillMagicKeySummoningRequest proto.InternalMessageInfo

func (m *QueryAllKillMagicKeySummoningRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllKillMagicKeySummoningResponse struct {
	KillMagicKeySummoning []KillMagicKeySummoning `protobuf:"bytes,1,rep,name=KillMagicKeySummoning,proto3" json:"KillMagicKeySummoning"`
	Pagination            *query.PageResponse     `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllKillMagicKeySummoningResponse) Reset()         { *m = QueryAllKillMagicKeySummoningResponse{} }
func (m *QueryAllKillMagicKeySummoningResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllKillMagicKeySummoningResponse) ProtoMessage()    {}
func (*QueryAllKillMagicKeySummoningResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{109}
}
func (m *QueryAllKillMagicKeySummoningResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllKillMagicKeySummoningResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllKillMagicKeySummoningResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllKillMagicKeySummoningResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllKillMagicKeySummoningResponse.Merge(m, src)
}
func (m *QueryAllKillMagicKeySummoningResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllKillMagicKeySummoningResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllKillMagicKeySummoningResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllKillMagicKeySummoningResponse proto.InternalMessageInfo

func (m *QueryAllKillMagicKeySummoningResponse) GetKillMagicKeySummoning() []KillMagicKeySummoning {
	if m != nil {
		return m.KillMagicKeySummoning
	}
	return nil
}

func (m *QueryAllKillMagicKeySummoningResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetKillScriptureSignatureRequestRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetKillScriptureSignatureRequestRequest) Reset() {
	*m = QueryGetKillScriptureSignatureRequestRequest{}
}
func (m *QueryGetKillScriptureSignatureRequestRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetKillScriptureSignatureRequestRequest) ProtoMessage() {}
func (*QueryGetKillScriptureSignatureRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{110}
}
func (m *QueryGetKillScriptureSignatureRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetKillScriptureSignatureRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetKillScriptureSignatureRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetKillScriptureSignatureRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetKillScriptureSignatureRequestRequest.Merge(m, src)
}
func (m *QueryGetKillScriptureSignatureRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetKillScriptureSignatureRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetKillScriptureSignatureRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetKillScriptureSignatureRequestRequest proto.InternalMessageInfo

func (m *QueryGetKillScriptureSignatureRequestRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetKillScriptureSignatureRequestResponse struct {
	KillScriptureSignatureRequest KillScriptureSignatureRequest `protobuf:"bytes,1,opt,name=KillScriptureSignatureRequest,proto3" json:"KillScriptureSignatureRequest"`
}

func (m *QueryGetKillScriptureSignatureRequestResponse) Reset() {
	*m = QueryGetKillScriptureSignatureRequestResponse{}
}
func (m *QueryGetKillScriptureSignatureRequestResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetKillScriptureSignatureRequestResponse) ProtoMessage() {}
func (*QueryGetKillScriptureSignatureRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{111}
}
func (m *QueryGetKillScriptureSignatureRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetKillScriptureSignatureRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetKillScriptureSignatureRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetKillScriptureSignatureRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetKillScriptureSignatureRequestResponse.Merge(m, src)
}
func (m *QueryGetKillScriptureSignatureRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetKillScriptureSignatureRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetKillScriptureSignatureRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetKillScriptureSignatureRequestResponse proto.InternalMessageInfo

func (m *QueryGetKillScriptureSignatureRequestResponse) GetKillScriptureSignatureRequest() KillScriptureSignatureRequest {
	if m != nil {
		return m.KillScriptureSignatureRequest
	}
	return KillScriptureSignatureRequest{}
}

type QueryAllKillScriptureSignatureRequestRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllKillScriptureSignatureRequestRequest) Reset() {
	*m = QueryAllKillScriptureSignatureRequestRequest{}
}
func (m *QueryAllKillScriptureSignatureRequestRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllKillScriptureSignatureRequestRequest) ProtoMessage() {}
func (*QueryAllKillScriptureSignatureRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{112}
}
func (m *QueryAllKillScriptureSignatureRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllKillScriptureSignatureRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllKillScriptureSignatureRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllKillScriptureSignatureRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllKillScriptureSignatureRequestRequest.Merge(m, src)
}
func (m *QueryAllKillScriptureSignatureRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllKillScriptureSignatureRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllKillScriptureSignatureRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllKillScriptureSignatureRequestRequest proto.InternalMessageInfo

func (m *QueryAllKillScriptureSignatureRequestRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllKillScriptureSignatureRequestResponse struct {
	KillScriptureSignatureRequest []KillScriptureSignatureRequest `protobuf:"bytes,1,rep,name=KillScriptureSignatureRequest,proto3" json:"KillScriptureSignatureRequest"`
	Pagination                    *query.PageResponse             `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllKillScriptureSignatureRequestResponse) Reset() {
	*m = QueryAllKillScriptureSignatureRequestResponse{}
}
func (m *QueryAllKillScriptureSignatureRequestResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllKillScriptureSignatureRequestResponse) ProtoMessage() {}
func (*QueryAllKillScriptureSignatureRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{113}
}
func (m *QueryAllKillScriptureSignatureRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllKillScriptureSignatureRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllKillScriptureSignatureRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllKillScriptureSignatureRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllKillScriptureSignatureRequestResponse.Merge(m, src)
}
func (m *QueryAllKillScriptureSignatureRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllKillScriptureSignatureRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllKillScriptureSignatureRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllKillScriptureSignatureRequestResponse proto.InternalMessageInfo

func (m *QueryAllKillScriptureSignatureRequestResponse) GetKillScriptureSignatureRequest() []KillScriptureSignatureRequest {
	if m != nil {
		return m.KillScriptureSignatureRequest
	}
	return nil
}

func (m *QueryAllKillScriptureSignatureRequestResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetKillSignatureRequestRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetKillSignatureRequestRequest) Reset()         { *m = QueryGetKillSignatureRequestRequest{} }
func (m *QueryGetKillSignatureRequestRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetKillSignatureRequestRequest) ProtoMessage()    {}
func (*QueryGetKillSignatureRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{114}
}
func (m *QueryGetKillSignatureRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetKillSignatureRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetKillSignatureRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetKillSignatureRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetKillSignatureRequestRequest.Merge(m, src)
}
func (m *QueryGetKillSignatureRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetKillSignatureRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetKillSignatureRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetKillSignatureRequestRequest proto.InternalMessageInfo

func (m *QueryGetKillSignatureRequestRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetKillSignatureRequestResponse struct {
	KillSignatureRequest KillSignatureRequest `protobuf:"bytes,1,opt,name=KillSignatureRequest,proto3" json:"KillSignatureRequest"`
}

func (m *QueryGetKillSignatureRequestResponse) Reset()         { *m = QueryGetKillSignatureRequestResponse{} }
func (m *QueryGetKillSignatureRequestResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetKillSignatureRequestResponse) ProtoMessage()    {}
func (*QueryGetKillSignatureRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{115}
}
func (m *QueryGetKillSignatureRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetKillSignatureRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetKillSignatureRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetKillSignatureRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetKillSignatureRequestResponse.Merge(m, src)
}
func (m *QueryGetKillSignatureRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetKillSignatureRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetKillSignatureRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetKillSignatureRequestResponse proto.InternalMessageInfo

func (m *QueryGetKillSignatureRequestResponse) GetKillSignatureRequest() KillSignatureRequest {
	if m != nil {
		return m.KillSignatureRequest
	}
	return KillSignatureRequest{}
}

type QueryAllKillSignatureRequestRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllKillSignatureRequestRequest) Reset()         { *m = QueryAllKillSignatureRequestRequest{} }
func (m *QueryAllKillSignatureRequestRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllKillSignatureRequestRequest) ProtoMessage()    {}
func (*QueryAllKillSignatureRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{116}
}
func (m *QueryAllKillSignatureRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllKillSignatureRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllKillSignatureRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllKillSignatureRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllKillSignatureRequestRequest.Merge(m, src)
}
func (m *QueryAllKillSignatureRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllKillSignatureRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllKillSignatureRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllKillSignatureRequestRequest proto.InternalMessageInfo

func (m *QueryAllKillSignatureRequestRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllKillSignatureRequestResponse struct {
	KillSignatureRequest []KillSignatureRequest `protobuf:"bytes,1,rep,name=KillSignatureRequest,proto3" json:"KillSignatureRequest"`
	Pagination           *query.PageResponse    `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllKillSignatureRequestResponse) Reset()         { *m = QueryAllKillSignatureRequestResponse{} }
func (m *QueryAllKillSignatureRequestResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllKillSignatureRequestResponse) ProtoMessage()    {}
func (*QueryAllKillSignatureRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{117}
}
func (m *QueryAllKillSignatureRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllKillSignatureRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllKillSignatureRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllKillSignatureRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllKillSignatureRequestResponse.Merge(m, src)
}
func (m *QueryAllKillSignatureRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllKillSignatureRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllKillSignatureRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllKillSignatureRequestResponse proto.InternalMessageInfo

func (m *QueryAllKillSignatureRequestResponse) GetKillSignatureRequest() []KillSignatureRequest {
	if m != nil {
		return m.KillSignatureRequest
	}
	return nil
}

func (m *QueryAllKillSignatureRequestResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetEncryptedMagicKeyShareRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetEncryptedMagicKeyShareRequest) Reset()         { *m = QueryGetEncryptedMagicKeyShareRequest{} }
func (m *QueryGetEncryptedMagicKeyShareRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetEncryptedMagicKeyShareRequest) ProtoMessage()    {}
func (*QueryGetEncryptedMagicKeyShareRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{118}
}
func (m *QueryGetEncryptedMagicKeyShareRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEncryptedMagicKeyShareRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEncryptedMagicKeyShareRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEncryptedMagicKeyShareRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEncryptedMagicKeyShareRequest.Merge(m, src)
}
func (m *QueryGetEncryptedMagicKeyShareRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEncryptedMagicKeyShareRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEncryptedMagicKeyShareRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEncryptedMagicKeyShareRequest proto.InternalMessageInfo

func (m *QueryGetEncryptedMagicKeyShareRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetEncryptedMagicKeyShareResponse struct {
	EncryptedMagicKeyShare EncryptedMagicKeyShare `protobuf:"bytes,1,opt,name=encryptedMagicKeyShare,proto3" json:"encryptedMagicKeyShare"`
}

func (m *QueryGetEncryptedMagicKeyShareResponse) Reset() {
	*m = QueryGetEncryptedMagicKeyShareResponse{}
}
func (m *QueryGetEncryptedMagicKeyShareResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetEncryptedMagicKeyShareResponse) ProtoMessage()    {}
func (*QueryGetEncryptedMagicKeyShareResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{119}
}
func (m *QueryGetEncryptedMagicKeyShareResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEncryptedMagicKeyShareResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEncryptedMagicKeyShareResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEncryptedMagicKeyShareResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEncryptedMagicKeyShareResponse.Merge(m, src)
}
func (m *QueryGetEncryptedMagicKeyShareResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEncryptedMagicKeyShareResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEncryptedMagicKeyShareResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEncryptedMagicKeyShareResponse proto.InternalMessageInfo

func (m *QueryGetEncryptedMagicKeyShareResponse) GetEncryptedMagicKeyShare() EncryptedMagicKeyShare {
	if m != nil {
		return m.EncryptedMagicKeyShare
	}
	return EncryptedMagicKeyShare{}
}

type QueryAllEncryptedMagicKeyShareRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllEncryptedMagicKeyShareRequest) Reset()         { *m = QueryAllEncryptedMagicKeyShareRequest{} }
func (m *QueryAllEncryptedMagicKeyShareRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllEncryptedMagicKeyShareRequest) ProtoMessage()    {}
func (*QueryAllEncryptedMagicKeyShareRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{120}
}
func (m *QueryAllEncryptedMagicKeyShareRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllEncryptedMagicKeyShareRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllEncryptedMagicKeyShareRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllEncryptedMagicKeyShareRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllEncryptedMagicKeyShareRequest.Merge(m, src)
}
func (m *QueryAllEncryptedMagicKeyShareRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllEncryptedMagicKeyShareRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllEncryptedMagicKeyShareRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllEncryptedMagicKeyShareRequest proto.InternalMessageInfo

func (m *QueryAllEncryptedMagicKeyShareRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllEncryptedMagicKeyShareResponse struct {
	EncryptedMagicKeyShare []EncryptedMagicKeyShare `protobuf:"bytes,1,rep,name=encryptedMagicKeyShare,proto3" json:"encryptedMagicKeyShare"`
	Pagination             *query.PageResponse      `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllEncryptedMagicKeyShareResponse) Reset() {
	*m = QueryAllEncryptedMagicKeyShareResponse{}
}
func (m *QueryAllEncryptedMagicKeyShareResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllEncryptedMagicKeyShareResponse) ProtoMessage()    {}
func (*QueryAllEncryptedMagicKeyShareResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{121}
}
func (m *QueryAllEncryptedMagicKeyShareResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllEncryptedMagicKeyShareResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllEncryptedMagicKeyShareResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllEncryptedMagicKeyShareResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllEncryptedMagicKeyShareResponse.Merge(m, src)
}
func (m *QueryAllEncryptedMagicKeyShareResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllEncryptedMagicKeyShareResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllEncryptedMagicKeyShareResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllEncryptedMagicKeyShareResponse proto.InternalMessageInfo

func (m *QueryAllEncryptedMagicKeyShareResponse) GetEncryptedMagicKeyShare() []EncryptedMagicKeyShare {
	if m != nil {
		return m.EncryptedMagicKeyShare
	}
	return nil
}

func (m *QueryAllEncryptedMagicKeyShareResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetEncryptedPreSignRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetEncryptedPreSignRequest) Reset()         { *m = QueryGetEncryptedPreSignRequest{} }
func (m *QueryGetEncryptedPreSignRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetEncryptedPreSignRequest) ProtoMessage()    {}
func (*QueryGetEncryptedPreSignRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{122}
}
func (m *QueryGetEncryptedPreSignRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEncryptedPreSignRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEncryptedPreSignRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEncryptedPreSignRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEncryptedPreSignRequest.Merge(m, src)
}
func (m *QueryGetEncryptedPreSignRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEncryptedPreSignRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEncryptedPreSignRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEncryptedPreSignRequest proto.InternalMessageInfo

func (m *QueryGetEncryptedPreSignRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetEncryptedPreSignResponse struct {
	EncryptedPreSign EncryptedPreSign `protobuf:"bytes,1,opt,name=encryptedPreSign,proto3" json:"encryptedPreSign"`
}

func (m *QueryGetEncryptedPreSignResponse) Reset()         { *m = QueryGetEncryptedPreSignResponse{} }
func (m *QueryGetEncryptedPreSignResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetEncryptedPreSignResponse) ProtoMessage()    {}
func (*QueryGetEncryptedPreSignResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{123}
}
func (m *QueryGetEncryptedPreSignResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEncryptedPreSignResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEncryptedPreSignResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEncryptedPreSignResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEncryptedPreSignResponse.Merge(m, src)
}
func (m *QueryGetEncryptedPreSignResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEncryptedPreSignResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEncryptedPreSignResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEncryptedPreSignResponse proto.InternalMessageInfo

func (m *QueryGetEncryptedPreSignResponse) GetEncryptedPreSign() EncryptedPreSign {
	if m != nil {
		return m.EncryptedPreSign
	}
	return EncryptedPreSign{}
}

type QueryAllEncryptedPreSignRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllEncryptedPreSignRequest) Reset()         { *m = QueryAllEncryptedPreSignRequest{} }
func (m *QueryAllEncryptedPreSignRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllEncryptedPreSignRequest) ProtoMessage()    {}
func (*QueryAllEncryptedPreSignRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{124}
}
func (m *QueryAllEncryptedPreSignRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllEncryptedPreSignRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllEncryptedPreSignRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllEncryptedPreSignRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllEncryptedPreSignRequest.Merge(m, src)
}
func (m *QueryAllEncryptedPreSignRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllEncryptedPreSignRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllEncryptedPreSignRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllEncryptedPreSignRequest proto.InternalMessageInfo

func (m *QueryAllEncryptedPreSignRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllEncryptedPreSignResponse struct {
	EncryptedPreSign []EncryptedPreSign  `protobuf:"bytes,1,rep,name=encryptedPreSign,proto3" json:"encryptedPreSign"`
	Pagination       *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllEncryptedPreSignResponse) Reset()         { *m = QueryAllEncryptedPreSignResponse{} }
func (m *QueryAllEncryptedPreSignResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllEncryptedPreSignResponse) ProtoMessage()    {}
func (*QueryAllEncryptedPreSignResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ad9a3db171de02, []int{125}
}
func (m *QueryAllEncryptedPreSignResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllEncryptedPreSignResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllEncryptedPreSignResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllEncryptedPreSignResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllEncryptedPreSignResponse.Merge(m, src)
}
func (m *QueryAllEncryptedPreSignResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllEncryptedPreSignResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllEncryptedPreSignResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllEncryptedPreSignResponse proto.InternalMessageInfo

func (m *QueryAllEncryptedPreSignResponse) GetEncryptedPreSign() []EncryptedPreSign {
	if m != nil {
		return m.EncryptedPreSign
	}
	return nil
}

func (m *QueryAllEncryptedPreSignResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "eightball.eightball.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "eightball.eightball.QueryParamsResponse")
	proto.RegisterType((*QueryGetMagicKeyRequest)(nil), "eightball.eightball.QueryGetMagicKeyRequest")
	proto.RegisterType((*QueryGetMagicKeyResponse)(nil), "eightball.eightball.QueryGetMagicKeyResponse")
	proto.RegisterType((*QueryAllMagicKeyRequest)(nil), "eightball.eightball.QueryAllMagicKeyRequest")
	proto.RegisterType((*QueryAllMagicKeyResponse)(nil), "eightball.eightball.QueryAllMagicKeyResponse")
	proto.RegisterType((*QueryGetMagicKeySummoningRequest)(nil), "eightball.eightball.QueryGetMagicKeySummoningRequest")
	proto.RegisterType((*QueryGetMagicKeySummoningResponse)(nil), "eightball.eightball.QueryGetMagicKeySummoningResponse")
	proto.RegisterType((*QueryAllMagicKeySummoningRequest)(nil), "eightball.eightball.QueryAllMagicKeySummoningRequest")
	proto.RegisterType((*QueryAllMagicKeySummoningResponse)(nil), "eightball.eightball.QueryAllMagicKeySummoningResponse")
	proto.RegisterType((*QueryGetHighCouncilRequest)(nil), "eightball.eightball.QueryGetHighCouncilRequest")
	proto.RegisterType((*QueryGetHighCouncilResponse)(nil), "eightball.eightball.QueryGetHighCouncilResponse")
	proto.RegisterType((*QueryAllHighCouncilRequest)(nil), "eightball.eightball.QueryAllHighCouncilRequest")
	proto.RegisterType((*QueryAllHighCouncilResponse)(nil), "eightball.eightball.QueryAllHighCouncilResponse")
	proto.RegisterType((*QueryGetCurrentMagicKeyRequest)(nil), "eightball.eightball.QueryGetCurrentMagicKeyRequest")
	proto.RegisterType((*QueryGetCurrentMagicKeyResponse)(nil), "eightball.eightball.QueryGetCurrentMagicKeyResponse")
	proto.RegisterType((*QueryGetHighCouncilConjuringsRequest)(nil), "eightball.eightball.QueryGetHighCouncilConjuringsRequest")
	proto.RegisterType((*QueryGetHighCouncilConjuringsResponse)(nil), "eightball.eightball.QueryGetHighCouncilConjuringsResponse")
	proto.RegisterType((*QueryAllHighCouncilConjuringsRequest)(nil), "eightball.eightball.QueryAllHighCouncilConjuringsRequest")
	proto.RegisterType((*QueryAllHighCouncilConjuringsResponse)(nil), "eightball.eightball.QueryAllHighCouncilConjuringsResponse")
	proto.RegisterType((*QueryGetSpiritConjuringPoemsRequest)(nil), "eightball.eightball.QueryGetSpiritConjuringPoemsRequest")
	proto.RegisterType((*QueryGetSpiritConjuringPoemsResponse)(nil), "eightball.eightball.QueryGetSpiritConjuringPoemsResponse")
	proto.RegisterType((*QueryAllSpiritConjuringPoemsRequest)(nil), "eightball.eightball.QueryAllSpiritConjuringPoemsRequest")
	proto.RegisterType((*QueryAllSpiritConjuringPoemsResponse)(nil), "eightball.eightball.QueryAllSpiritConjuringPoemsResponse")
	proto.RegisterType((*QueryGetVerseRequest)(nil), "eightball.eightball.QueryGetVerseRequest")
	proto.RegisterType((*QueryGetVerseResponse)(nil), "eightball.eightball.QueryGetVerseResponse")
	proto.RegisterType((*QueryAllVerseRequest)(nil), "eightball.eightball.QueryAllVerseRequest")
	proto.RegisterType((*QueryAllVerseResponse)(nil), "eightball.eightball.QueryAllVerseResponse")
	proto.RegisterType((*QueryVerseCountRequest)(nil), "eightball.eightball.QueryVerseCountRequest")
	proto.RegisterType((*QueryVerseCountResponse)(nil), "eightball.eightball.QueryVerseCountResponse")
	proto.RegisterType((*QueryMagicKeyCountRequest)(nil), "eightball.eightball.QueryMagicKeyCountRequest")
	proto.RegisterType((*QueryMagicKeyCountResponse)(nil), "eightball.eightball.QueryMagicKeyCountResponse")
	proto.RegisterType((*QueryGetVisionRequest)(nil), "eightball.eightball.QueryGetVisionRequest")
	proto.RegisterType((*QueryGetVisionResponse)(nil), "eightball.eightball.QueryGetVisionResponse")
	proto.RegisterType((*QueryAllVisionRequest)(nil), "eightball.eightball.QueryAllVisionRequest")
	proto.RegisterType((*QueryAllVisionResponse)(nil), "eightball.eightball.QueryAllVisionResponse")
	proto.RegisterType((*QueryGetMessageRequest)(nil), "eightball.eightball.QueryGetMessageRequest")
	proto.RegisterType((*QueryGetMessageResponse)(nil), "eightball.eightball.QueryGetMessageResponse")
	proto.RegisterType((*QueryAllMessageRequest)(nil), "eightball.eightball.QueryAllMessageRequest")
	proto.RegisterType((*QueryAllMessageResponse)(nil), "eightball.eightball.QueryAllMessageResponse")
	proto.RegisterType((*QueryGetSignatureRequestRequest)(nil), "eightball.eightball.QueryGetSignatureRequestRequest")
	proto.RegisterType((*QueryGetSignatureRequestResponse)(nil), "eightball.eightball.QueryGetSignatureRequestResponse")
	proto.RegisterType((*QueryAllSignatureRequestRequest)(nil), "eightball.eightball.QueryAllSignatureRequestRequest")
	proto.RegisterType((*QueryAllSignatureRequestResponse)(nil), "eightball.eightball.QueryAllSignatureRequestResponse")
	proto.RegisterType((*QueryGetSignatureShareRequest)(nil), "eightball.eightball.QueryGetSignatureShareRequest")
	proto.RegisterType((*QueryGetSignatureShareResponse)(nil), "eightball.eightball.QueryGetSignatureShareResponse")
	proto.RegisterType((*QueryAllSignatureShareRequest)(nil), "eightball.eightball.QueryAllSignatureShareRequest")
	proto.RegisterType((*QueryAllSignatureShareResponse)(nil), "eightball.eightball.QueryAllSignatureShareResponse")
	proto.RegisterType((*QueryGetSignedMessageRequest)(nil), "eightball.eightball.QueryGetSignedMessageRequest")
	proto.RegisterType((*QueryGetSignedMessageResponse)(nil), "eightball.eightball.QueryGetSignedMessageResponse")
	proto.RegisterType((*QueryAllSignedMessageRequest)(nil), "eightball.eightball.QueryAllSignedMessageRequest")
	proto.RegisterType((*QueryAllSignedMessageResponse)(nil), "eightball.eightball.QueryAllSignedMessageResponse")
	proto.RegisterType((*QueryGetMeditationSummoningRequest)(nil), "eightball.eightball.QueryGetMeditationSummoningRequest")
	proto.RegisterType((*QueryGetMeditationSummoningResponse)(nil), "eightball.eightball.QueryGetMeditationSummoningResponse")
	proto.RegisterType((*QueryAllMeditationSummoningRequest)(nil), "eightball.eightball.QueryAllMeditationSummoningRequest")
	proto.RegisterType((*QueryAllMeditationSummoningResponse)(nil), "eightball.eightball.QueryAllMeditationSummoningResponse")
	proto.RegisterType((*QueryGetMeditationRequest)(nil), "eightball.eightball.QueryGetMeditationRequest")
	proto.RegisterType((*QueryGetMeditationResponse)(nil), "eightball.eightball.QueryGetMeditationResponse")
	proto.RegisterType((*QueryAllMeditationRequest)(nil), "eightball.eightball.QueryAllMeditationRequest")
	proto.RegisterType((*QueryAllMeditationResponse)(nil), "eightball.eightball.QueryAllMeditationResponse")
	proto.RegisterType((*QueryMeditationCountRequest)(nil), "eightball.eightball.QueryMeditationCountRequest")
	proto.RegisterType((*QueryMeditationCountResponse)(nil), "eightball.eightball.QueryMeditationCountResponse")
	proto.RegisterType((*QueryGetScriptureRequest)(nil), "eightball.eightball.QueryGetScriptureRequest")
	proto.RegisterType((*QueryGetScriptureResponse)(nil), "eightball.eightball.QueryGetScriptureResponse")
	proto.RegisterType((*QueryAllScriptureRequest)(nil), "eightball.eightball.QueryAllScriptureRequest")
	proto.RegisterType((*QueryAllScriptureResponse)(nil), "eightball.eightball.QueryAllScriptureResponse")
	proto.RegisterType((*QueryGetScriptureSignatureRequestRequest)(nil), "eightball.eightball.QueryGetScriptureSignatureRequestRequest")
	proto.RegisterType((*QueryGetScriptureSignatureRequestResponse)(nil), "eightball.eightball.QueryGetScriptureSignatureRequestResponse")
	proto.RegisterType((*QueryAllScriptureSignatureRequestRequest)(nil), "eightball.eightball.QueryAllScriptureSignatureRequestRequest")
	proto.RegisterType((*QueryAllScriptureSignatureRequestResponse)(nil), "eightball.eightball.QueryAllScriptureSignatureRequestResponse")
	proto.RegisterType((*QueryGetScriptureSignatureShareRequest)(nil), "eightball.eightball.QueryGetScriptureSignatureShareRequest")
	proto.RegisterType((*QueryGetScriptureSignatureShareResponse)(nil), "eightball.eightball.QueryGetScriptureSignatureShareResponse")
	proto.RegisterType((*QueryAllScriptureSignatureShareRequest)(nil), "eightball.eightball.QueryAllScriptureSignatureShareRequest")
	proto.RegisterType((*QueryAllScriptureSignatureShareResponse)(nil), "eightball.eightball.QueryAllScriptureSignatureShareResponse")
	proto.RegisterType((*QueryGetSignedScriptureRequest)(nil), "eightball.eightball.QueryGetSignedScriptureRequest")
	proto.RegisterType((*QueryGetSignedScriptureResponse)(nil), "eightball.eightball.QueryGetSignedScriptureResponse")
	proto.RegisterType((*QueryAllSignedScriptureRequest)(nil), "eightball.eightball.QueryAllSignedScriptureRequest")
	proto.RegisterType((*QueryAllSignedScriptureResponse)(nil), "eightball.eightball.QueryAllSignedScriptureResponse")
	proto.RegisterType((*QueryGetSignedScriptureListRequest)(nil), "eightball.eightball.QueryGetSignedScriptureListRequest")
	proto.RegisterType((*QueryGetSignedScriptureListResponse)(nil), "eightball.eightball.QueryGetSignedScriptureListResponse")
	proto.RegisterType((*QueryAllSignedScriptureListRequest)(nil), "eightball.eightball.QueryAllSignedScriptureListRequest")
	proto.RegisterType((*QueryAllSignedScriptureListResponse)(nil), "eightball.eightball.QueryAllSignedScriptureListResponse")
	proto.RegisterType((*QueryGetBlessingRequest)(nil), "eightball.eightball.QueryGetBlessingRequest")
	proto.RegisterType((*QueryGetBlessingResponse)(nil), "eightball.eightball.QueryGetBlessingResponse")
	proto.RegisterType((*QueryAllBlessingRequest)(nil), "eightball.eightball.QueryAllBlessingRequest")
	proto.RegisterType((*QueryAllBlessingResponse)(nil), "eightball.eightball.QueryAllBlessingResponse")
	proto.RegisterType((*QueryGetBlessingReceiptRequest)(nil), "eightball.eightball.QueryGetBlessingReceiptRequest")
	proto.RegisterType((*QueryGetBlessingReceiptResponse)(nil), "eightball.eightball.QueryGetBlessingReceiptResponse")
	proto.RegisterType((*QueryAllBlessingReceiptRequest)(nil), "eightball.eightball.QueryAllBlessingReceiptRequest")
	proto.RegisterType((*QueryAllBlessingReceiptResponse)(nil), "eightball.eightball.QueryAllBlessingReceiptResponse")
	proto.RegisterType((*QueryGetImploringRequest)(nil), "eightball.eightball.QueryGetImploringRequest")
	proto.RegisterType((*QueryGetImploringResponse)(nil), "eightball.eightball.QueryGetImploringResponse")
	proto.RegisterType((*QueryAllImploringRequest)(nil), "eightball.eightball.QueryAllImploringRequest")
	proto.RegisterType((*QueryAllImploringResponse)(nil), "eightball.eightball.QueryAllImploringResponse")
	proto.RegisterType((*QueryGetKillConjuringRequest)(nil), "eightball.eightball.QueryGetKillConjuringRequest")
	proto.RegisterType((*QueryGetKillConjuringResponse)(nil), "eightball.eightball.QueryGetKillConjuringResponse")
	proto.RegisterType((*QueryAllKillConjuringRequest)(nil), "eightball.eightball.QueryAllKillConjuringRequest")
	proto.RegisterType((*QueryAllKillConjuringResponse)(nil), "eightball.eightball.QueryAllKillConjuringResponse")
	proto.RegisterType((*QueryGetKillImploringRequest)(nil), "eightball.eightball.QueryGetKillImploringRequest")
	proto.RegisterType((*QueryGetKillImploringResponse)(nil), "eightball.eightball.QueryGetKillImploringResponse")
	proto.RegisterType((*QueryAllKillImploringRequest)(nil), "eightball.eightball.QueryAllKillImploringRequest")
	proto.RegisterType((*QueryAllKillImploringResponse)(nil), "eightball.eightball.QueryAllKillImploringResponse")
	proto.RegisterType((*QueryGetKillMeditationSummoningRequest)(nil), "eightball.eightball.QueryGetKillMeditationSummoningRequest")
	proto.RegisterType((*QueryGetKillMeditationSummoningResponse)(nil), "eightball.eightball.QueryGetKillMeditationSummoningResponse")
	proto.RegisterType((*QueryAllKillMeditationSummoningRequest)(nil), "eightball.eightball.QueryAllKillMeditationSummoningRequest")
	proto.RegisterType((*QueryAllKillMeditationSummoningResponse)(nil), "eightball.eightball.QueryAllKillMeditationSummoningResponse")
	proto.RegisterType((*QueryGetKillMagicKeySummoningRequest)(nil), "eightball.eightball.QueryGetKillMagicKeySummoningRequest")
	proto.RegisterType((*QueryGetKillMagicKeySummoningResponse)(nil), "eightball.eightball.QueryGetKillMagicKeySummoningResponse")
	proto.RegisterType((*QueryAllKillMagicKeySummoningRequest)(nil), "eightball.eightball.QueryAllKillMagicKeySummoningRequest")
	proto.RegisterType((*QueryAllKillMagicKeySummoningResponse)(nil), "eightball.eightball.QueryAllKillMagicKeySummoningResponse")
	proto.RegisterType((*QueryGetKillScriptureSignatureRequestRequest)(nil), "eightball.eightball.QueryGetKillScriptureSignatureRequestRequest")
	proto.RegisterType((*QueryGetKillScriptureSignatureRequestResponse)(nil), "eightball.eightball.QueryGetKillScriptureSignatureRequestResponse")
	proto.RegisterType((*QueryAllKillScriptureSignatureRequestRequest)(nil), "eightball.eightball.QueryAllKillScriptureSignatureRequestRequest")
	proto.RegisterType((*QueryAllKillScriptureSignatureRequestResponse)(nil), "eightball.eightball.QueryAllKillScriptureSignatureRequestResponse")
	proto.RegisterType((*QueryGetKillSignatureRequestRequest)(nil), "eightball.eightball.QueryGetKillSignatureRequestRequest")
	proto.RegisterType((*QueryGetKillSignatureRequestResponse)(nil), "eightball.eightball.QueryGetKillSignatureRequestResponse")
	proto.RegisterType((*QueryAllKillSignatureRequestRequest)(nil), "eightball.eightball.QueryAllKillSignatureRequestRequest")
	proto.RegisterType((*QueryAllKillSignatureRequestResponse)(nil), "eightball.eightball.QueryAllKillSignatureRequestResponse")
	proto.RegisterType((*QueryGetEncryptedMagicKeyShareRequest)(nil), "eightball.eightball.QueryGetEncryptedMagicKeyShareRequest")
	proto.RegisterType((*QueryGetEncryptedMagicKeyShareResponse)(nil), "eightball.eightball.QueryGetEncryptedMagicKeyShareResponse")
	proto.RegisterType((*QueryAllEncryptedMagicKeyShareRequest)(nil), "eightball.eightball.QueryAllEncryptedMagicKeyShareRequest")
	proto.RegisterType((*QueryAllEncryptedMagicKeyShareResponse)(nil), "eightball.eightball.QueryAllEncryptedMagicKeyShareResponse")
	proto.RegisterType((*QueryGetEncryptedPreSignRequest)(nil), "eightball.eightball.QueryGetEncryptedPreSignRequest")
	proto.RegisterType((*QueryGetEncryptedPreSignResponse)(nil), "eightball.eightball.QueryGetEncryptedPreSignResponse")
	proto.RegisterType((*QueryAllEncryptedPreSignRequest)(nil), "eightball.eightball.QueryAllEncryptedPreSignRequest")
	proto.RegisterType((*QueryAllEncryptedPreSignResponse)(nil), "eightball.eightball.QueryAllEncryptedPreSignResponse")
}

func init() { proto.RegisterFile("eightball/eightball/query.proto", fileDescriptor_e4ad9a3db171de02) }

var fileDescriptor_e4ad9a3db171de02 = []byte{
	// 3921 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x5d, 0xef, 0x8f, 0x1d, 0x55,
	0xf9, 0xef, 0xe9, 0xb4, 0x40, 0x4f, 0xbf, 0x14, 0x38, 0x5d, 0x4a, 0xb9, 0x6d, 0xb7, 0xdb, 0xd3,
	0x76, 0xbb, 0xbb, 0xdd, 0xde, 0xe9, 0xee, 0x76, 0xfb, 0xbb, 0x90, 0x96, 0x2f, 0x3f, 0x1a, 0xbe,
	0x7c, 0x29, 0xad, 0x11, 0x83, 0x2f, 0x96, 0xbb, 0xbb, 0xc3, 0xdd, 0x81, 0xbb, 0xf7, 0x5e, 0xee,
	0xbd, 0x5b, 0xa8, 0x15, 0x30, 0x12, 0x42, 0x0c, 0x31, 0xa8, 0x68, 0xc0, 0x1f, 0x51, 0x5e, 0x18,
	0x43, 0x0c, 0x51, 0x23, 0x26, 0x62, 0x62, 0x14, 0xa3, 0xc6, 0x6a, 0x4c, 0xc4, 0x68, 0x22, 0x26,
	0xc6, 0x10, 0xf0, 0x05, 0xf1, 0x2f, 0xf0, 0xa5, 0x99, 0x33, 0xcf, 0xcc, 0x39, 0x73, 0xe6, 0xfc,
	0x9a, 0xd9, 0x59, 0xde, 0x75, 0x67, 0xce, 0xf3, 0xcc, 0xe7, 0xf3, 0x79, 0xce, 0x3d, 0xbf, 0xe6,
	0x79, 0xa6, 0x78, 0x77, 0x10, 0x36, 0x97, 0x06, 0xf3, 0x8d, 0x56, 0xcb, 0xe7, 0xff, 0x7a, 0x72,
	0x25, 0xe8, 0x5d, 0xa9, 0x77, 0x7b, 0x9d, 0x41, 0x87, 0x6c, 0x4d, 0x2f, 0xd7, 0xd3, 0x7f, 0xd5,
	0x86, 0x9a, 0x9d, 0x66, 0x87, 0xdd, 0xf7, 0xa3, 0x7f, 0xc5, 0x4d, 0x6b, 0x3b, 0x9b, 0x9d, 0x4e,
	0xb3, 0x15, 0xf8, 0x8d, 0x6e, 0xe8, 0x37, 0xda, 0xed, 0xce, 0xa0, 0x31, 0x08, 0x3b, 0xed, 0x3e,
	0xdc, 0x9d, 0x58, 0xe8, 0xf4, 0x97, 0x3b, 0x7d, 0x7f, 0xbe, 0xd1, 0x0f, 0xe2, 0x27, 0xf8, 0x97,
	0xa7, 0xe6, 0x83, 0x41, 0x63, 0xca, 0xef, 0x36, 0x9a, 0x61, 0x9b, 0x35, 0x86, 0xb6, 0x23, 0x2a,
	0x54, 0xdd, 0x46, 0xaf, 0xb1, 0x9c, 0x78, 0xdb, 0xab, 0x6a, 0xb1, 0xdc, 0x68, 0x86, 0x0b, 0x73,
	0x4f, 0x04, 0x80, 0xbd, 0x76, 0xc8, 0xd8, 0x68, 0xae, 0xbf, 0xb2, 0xbc, 0xdc, 0x69, 0x87, 0xed,
	0x26, 0x34, 0x1f, 0x55, 0x35, 0x5f, 0x0a, 0x9b, 0x4b, 0x73, 0x0b, 0x9d, 0x95, 0xf6, 0x42, 0xd8,
	0x82, 0x76, 0x07, 0x55, 0xed, 0x16, 0x56, 0x7a, 0xbd, 0xa0, 0x3d, 0x98, 0x93, 0x31, 0x4c, 0xd9,
	0x9c, 0xce, 0x2d, 0x74, 0xda, 0x8f, 0xaf, 0xf4, 0xc2, 0x76, 0x33, 0xe1, 0x76, 0x58, 0x65, 0xd2,
	0xef, 0x86, 0xbd, 0x70, 0xc0, 0x1b, 0xcf, 0x75, 0x3b, 0x41, 0xaa, 0x86, 0x32, 0x8a, 0x97, 0x83,
	0x5e, 0x3f, 0x30, 0x09, 0x7a, 0x39, 0xec, 0x73, 0xc9, 0xf7, 0x28, 0xb5, 0x0a, 0xfa, 0xfd, 0x46,
	0x33, 0x30, 0xf1, 0xee, 0x87, 0xcd, 0x76, 0x63, 0xb0, 0xd2, 0x0b, 0xe6, 0x7a, 0xc1, 0x93, 0x2b,
	0x41, 0x7f, 0x00, 0x8d, 0xc7, 0xcd, 0x8d, 0xfb, 0x4b, 0x8d, 0x5e, 0xe2, 0x77, 0x4c, 0xd7, 0x34,
	0x58, 0x9c, 0xcb, 0x22, 0xa8, 0xab, 0x41, 0x2e, 0x86, 0x71, 0x57, 0xcb, 0x45, 0x74, 0x9f, 0xb9,
	0xbd, 0xa9, 0x2f, 0xf5, 0x17, 0x7a, 0x61, 0x37, 0x82, 0x0a, 0x8d, 0x66, 0x8d, 0x8d, 0xe6, 0x74,
	0x32, 0xcc, 0xb8, 0x9a, 0x89, 0x82, 0x4c, 0x18, 0x04, 0x91, 0x71, 0xf9, 0x2e, 0x6d, 0xe7, 0x5a,
	0x61, 0x8a, 0x88, 0xaa, 0x0c, 0xe6, 0x5b, 0x41, 0xbf, 0xcf, 0x75, 0x9b, 0x30, 0xb5, 0x99, 0xeb,
	0x05, 0x0b, 0x41, 0xd8, 0x1d, 0x98, 0xd4, 0x0b, 0x97, 0xbb, 0xad, 0x4e, 0x8f, 0x3b, 0x54, 0x86,
	0xf8, 0x89, 0xb0, 0x25, 0xf4, 0x7e, 0x6b, 0x4b, 0xd9, 0xe7, 0x8c, 0xb6, 0xa5, 0xa1, 0x47, 0x4c,
	0xeb, 0x8d, 0xb4, 0xe3, 0xc2, 0x49, 0xad, 0x8d, 0x3d, 0xfe, 0x87, 0xf5, 0xb6, 0x45, 0x7a, 0x4c,
	0xd0, 0x5e, 0xe8, 0x5d, 0xe9, 0x0e, 0xa2, 0x1f, 0x04, 0x87, 0x29, 0xf4, 0x98, 0x49, 0xb3, 0x51,
	0x17, 0x10, 0xc6, 0xad, 0xe9, 0x10, 0x26, 0x0f, 0x45, 0x03, 0xf0, 0x05, 0x36, 0xa2, 0x5e, 0x8c,
	0x1f, 0x4f, 0x2f, 0xe0, 0xad, 0x99, 0xab, 0xfd, 0x6e, 0xa7, 0xdd, 0x0f, 0xc8, 0x09, 0x7c, 0x5d,
	0x3c, 0xf2, 0x6e, 0x47, 0x23, 0x68, 0x6c, 0xf3, 0xf4, 0x8e, 0xba, 0x62, 0x46, 0xa8, 0xc7, 0x46,
	0xe7, 0x36, 0x5c, 0xfb, 0xe7, 0xee, 0x75, 0x17, 0xc1, 0x80, 0x8e, 0xe3, 0xdb, 0x98, 0xc7, 0x7b,
	0x83, 0xc1, 0x03, 0x11, 0xec, 0xfb, 0x83, 0x2b, 0xf0, 0x30, 0xb2, 0x05, 0xaf, 0x0f, 0x17, 0x99,
	0xc7, 0x0d, 0x17, 0xd7, 0x87, 0x8b, 0xf4, 0xd3, 0x78, 0x7b, 0xbe, 0x29, 0x20, 0xb8, 0x13, 0xdf,
	0x90, 0x5c, 0x03, 0x0c, 0xbb, 0x94, 0x18, 0x92, 0x46, 0x80, 0x22, 0x35, 0xa2, 0x0d, 0xc0, 0x71,
	0xb6, 0xd5, 0x92, 0x71, 0xdc, 0x83, 0x31, 0x9f, 0x7d, 0xc0, 0xfb, 0x68, 0x3d, 0x9e, 0xaa, 0xea,
	0xd1, 0x54, 0x55, 0x8f, 0x27, 0x43, 0x98, 0xaa, 0xea, 0x17, 0x1a, 0xcd, 0x00, 0x6c, 0x2f, 0x0a,
	0x96, 0xf4, 0xbb, 0x08, 0x08, 0x64, 0x9e, 0xa1, 0x24, 0xe0, 0x15, 0x26, 0x40, 0xee, 0xcd, 0xa0,
	0x5c, 0xcf, 0x50, 0x1e, 0xb0, 0xa2, 0x8c, 0x9f, 0x9e, 0x81, 0x39, 0x8d, 0x47, 0x64, 0x99, 0x2f,
	0x25, 0xbd, 0x5d, 0x17, 0x9a, 0xe7, 0xf0, 0x1e, 0x83, 0x0d, 0x50, 0x7c, 0x04, 0xdf, 0x92, 0xbb,
	0x99, 0xca, 0x69, 0xe2, 0x9a, 0xb6, 0x06, 0xd2, 0x79, 0x37, 0xf4, 0x71, 0x00, 0x2d, 0x48, 0x9b,
	0x03, 0x5d, 0x55, 0x1c, 0xaf, 0x21, 0x60, 0xab, 0x7e, 0x98, 0x99, 0xad, 0x57, 0x01, 0xdb, 0xea,
	0x62, 0x7d, 0x0e, 0xd7, 0x92, 0xb8, 0xdd, 0x17, 0x36, 0x97, 0xee, 0x8a, 0x97, 0x1b, 0x9a, 0x28,
	0x93, 0x21, 0xbc, 0xf1, 0x89, 0xe0, 0xca, 0xf9, 0x45, 0xf6, 0xc4, 0x0d, 0x17, 0xe3, 0x3f, 0x68,
	0x13, 0xef, 0x50, 0xfa, 0x00, 0x1d, 0xee, 0xc3, 0x9b, 0x85, 0xcb, 0x20, 0xfb, 0x88, 0x52, 0x01,
	0xa1, 0x1d, 0x70, 0x17, 0x4d, 0xe9, 0x67, 0x00, 0xec, 0xd9, 0x56, 0x4b, 0x01, 0xb6, 0xa2, 0xe8,
	0x6a, 0x48, 0xfe, 0x08, 0x01, 0x4b, 0xf9, 0xe1, 0x3a, 0x96, 0x5e, 0x49, 0x96, 0xd5, 0xc5, 0x76,
	0x04, 0x0f, 0x27, 0x71, 0xb9, 0x2b, 0x5e, 0x78, 0x4a, 0x03, 0x1b, 0x7d, 0x0a, 0xef, 0xd6, 0xb6,
	0x00, 0x5e, 0x9f, 0xc0, 0x37, 0x49, 0xb7, 0x40, 0xda, 0x7d, 0x4a, 0x6e, 0x52, 0x5b, 0xe0, 0x27,
	0xbb, 0xa0, 0x47, 0xf1, 0x3e, 0x45, 0x97, 0xb9, 0x2b, 0x5d, 0xe4, 0xea, 0x86, 0x99, 0x97, 0x11,
	0xde, 0x6f, 0x31, 0x04, 0xdc, 0x8f, 0xe1, 0x5b, 0x95, 0x0d, 0x00, 0xfd, 0x84, 0x2d, 0x32, 0xdc,
	0x02, 0x38, 0xa8, 0xdd, 0xd1, 0x36, 0x30, 0xc9, 0x76, 0x8b, 0x3c, 0x93, 0xaa, 0xc6, 0x9e, 0xf7,
	0x12, 0x05, 0xf4, 0x0f, 0xb4, 0x2b, 0xe0, 0x55, 0xa8, 0x40, 0x75, 0xfd, 0xf5, 0x41, 0xbc, 0x37,
	0x89, 0xed, 0x25, 0xb6, 0x91, 0x49, 0x1f, 0x72, 0x21, 0xda, 0xc6, 0xe8, 0x06, 0xa5, 0xed, 0xf8,
	0x7a, 0xb6, 0xde, 0x49, 0x7f, 0xb1, 0xc9, 0x9f, 0xf4, 0x25, 0xc4, 0xbb, 0x99, 0xda, 0x23, 0x48,
	0xb5, 0x80, 0x87, 0x54, 0xf7, 0x21, 0x4c, 0xe3, 0x4a, 0xa5, 0x54, 0x06, 0x20, 0x94, 0xd2, 0x19,
	0x7d, 0x11, 0x01, 0xbf, 0xb3, 0xad, 0x96, 0x89, 0x5f, 0x55, 0xe3, 0x98, 0x5e, 0x97, 0xbf, 0x22,
	0xde, 0x69, 0x4b, 0xea, 0xe2, 0x55, 0xa6, 0x4b, 0x75, 0xfd, 0xe7, 0x1e, 0x3c, 0x94, 0x44, 0xfb,
	0x93, 0xd1, 0xb6, 0x56, 0xd7, 0x61, 0x86, 0x31, 0x5e, 0x86, 0x81, 0x28, 0xd5, 0x46, 0xb8, 0x42,
	0x1f, 0xc4, 0xb7, 0x4a, 0x7e, 0x40, 0x8e, 0xa3, 0x78, 0x23, 0xbb, 0x00, 0x41, 0xa9, 0x29, 0xf9,
	0xb3, 0x16, 0x40, 0x38, 0x6e, 0x4e, 0x9f, 0x05, 0x60, 0x67, 0x5b, 0xad, 0x0c, 0xb0, 0xaa, 0x22,
	0x6d, 0x23, 0xf4, 0x1a, 0x02, 0x46, 0x1c, 0x40, 0x9e, 0x91, 0x57, 0x80, 0x51, 0x75, 0x31, 0x3b,
	0x8e, 0xb7, 0x31, 0x64, 0xcc, 0x6d, 0x34, 0xb6, 0x0c, 0x12, 0x71, 0xb2, 0xa4, 0x22, 0x71, 0x36,
	0x65, 0x48, 0xf9, 0xb0, 0x5e, 0x17, 0x2d, 0x81, 0xd5, 0x10, 0xde, 0xb8, 0x10, 0x5d, 0x00, 0xab,
	0xf8, 0x0f, 0xba, 0x03, 0xdf, 0xce, 0x0c, 0x92, 0x49, 0x48, 0x7c, 0x1a, 0x9d, 0x86, 0xa5, 0x85,
	0x74, 0x53, 0xe5, 0x70, 0x43, 0xe2, 0xf0, 0x5e, 0xa1, 0x9f, 0xb0, 0x53, 0x92, 0xb2, 0x1d, 0xee,
	0x12, 0x88, 0x20, 0x38, 0xe2, 0xfb, 0xaa, 0xf8, 0x8a, 0x71, 0x5f, 0x15, 0x37, 0x49, 0xf6, 0x55,
	0xf1, 0x5f, 0xf4, 0x39, 0x21, 0xe6, 0x19, 0x74, 0x1f, 0x57, 0xaf, 0xfb, 0x16, 0x02, 0x5a, 0x02,
	0x02, 0x05, 0x2d, 0xaf, 0x10, 0xad, 0xea, 0x7a, 0xde, 0x18, 0x17, 0xfd, 0x81, 0xf8, 0xfc, 0x48,
	0xb7, 0xe8, 0x78, 0x58, 0xd8, 0xa1, 0x26, 0x2d, 0x81, 0xc8, 0x69, 0x7c, 0x3d, 0x5c, 0x02, 0x21,
	0x77, 0xaa, 0x57, 0xf6, 0x71, 0x1b, 0xa0, 0x92, 0x98, 0xd0, 0x47, 0xb9, 0x40, 0x12, 0x84, 0xaa,
	0x56, 0x0b, 0xaf, 0x23, 0x61, 0x57, 0x6b, 0xc2, 0xee, 0x15, 0xc4, 0x5e, 0x5d, 0x1c, 0xa6, 0xf8,
	0x1a, 0xf4, 0x52, 0x72, 0xda, 0x91, 0x50, 0xd1, 0x04, 0xe4, 0x2a, 0xdf, 0xa0, 0xe6, 0x4d, 0x80,
	0xdd, 0xc3, 0xf8, 0x66, 0xf9, 0x1e, 0xe8, 0xb8, 0x5f, 0x3d, 0x6d, 0x49, 0x8d, 0x81, 0x6f, 0xce,
	0x09, 0x0d, 0x01, 0x6f, 0x34, 0x77, 0x6a, 0xf0, 0x56, 0x15, 0xbd, 0xdf, 0x20, 0xbe, 0xa9, 0x2d,
	0x48, 0xd4, 0x5b, 0x35, 0xd1, 0xea, 0x22, 0xfc, 0x00, 0xde, 0x95, 0x0b, 0xd7, 0xa5, 0xa5, 0x06,
	0x7f, 0xd2, 0x4e, 0xbc, 0x09, 0x8e, 0x70, 0xcf, 0x27, 0x61, 0xe6, 0x17, 0x20, 0xfa, 0xeb, 0xd3,
	0xe8, 0xf7, 0xf9, 0xb6, 0x46, 0x76, 0x07, 0x92, 0x3c, 0x84, 0xb7, 0x64, 0xef, 0x40, 0x0c, 0xf6,
	0x9a, 0x05, 0x61, 0x4d, 0x41, 0x0e, 0xc9, 0x01, 0x7d, 0x01, 0x01, 0x09, 0x31, 0x14, 0x19, 0x12,
	0x55, 0x0d, 0xab, 0x19, 0x31, 0xd6, 0x4b, 0x62, 0xd0, 0x9f, 0x23, 0x60, 0xaf, 0xc0, 0x61, 0x60,
	0xef, 0xad, 0x8a, 0x7d, 0x75, 0x5d, 0xe1, 0x7f, 0xf1, 0x4e, 0x31, 0x76, 0xc1, 0xa2, 0x79, 0xe8,
	0x8d, 0x26, 0xde, 0xe5, 0x7e, 0x93, 0xef, 0xc5, 0xd9, 0x1f, 0xb4, 0x93, 0xed, 0x50, 0x82, 0x17,
	0x90, 0xe0, 0xff, 0xf1, 0x8d, 0x99, 0x1b, 0x10, 0x0e, 0xaa, 0x55, 0x20, 0x6d, 0x09, 0x02, 0x64,
	0xcd, 0xe9, 0x67, 0x01, 0x36, 0x88, 0x9e, 0x83, 0x5d, 0xe1, 0xd1, 0x83, 0x82, 0xee, 0xdb, 0x52,
	0xdf, 0x73, 0xe2, 0xeb, 0xad, 0x82, 0x6f, 0x75, 0xf1, 0x3e, 0x82, 0x29, 0x9f, 0x3a, 0x93, 0xf3,
	0x76, 0xeb, 0x61, 0x62, 0xba, 0x53, 0xd2, 0x99, 0x01, 0xed, 0x47, 0xf1, 0x56, 0xc5, 0x6d, 0xd0,
	0x7f, 0x4c, 0x33, 0x9b, 0xe5, 0xda, 0x83, 0x04, 0x2a, 0x57, 0xb4, 0x05, 0xf8, 0xd9, 0xf4, 0xa9,
	0xc5, 0x5f, 0xd5, 0x78, 0xff, 0xae, 0xb0, 0x43, 0x2c, 0xc5, 0xdb, 0xab, 0x88, 0x77, 0x75, 0x1d,
	0xe0, 0x7e, 0x58, 0x74, 0x67, 0x22, 0x59, 0x76, 0x9d, 0xbc, 0xc0, 0x0f, 0x2b, 0x45, 0x67, 0xa0,
	0xca, 0xdd, 0x18, 0xf3, 0xab, 0x10, 0x85, 0xdd, 0x16, 0x31, 0x40, 0x03, 0xc1, 0x90, 0x3e, 0x8f,
	0x00, 0x72, 0x26, 0x08, 0x1f, 0xf7, 0xe2, 0xf9, 0x4d, 0xc4, 0xcf, 0x3a, 0x1d, 0xb8, 0x7a, 0xa5,
	0xb8, 0x56, 0x17, 0xe6, 0x33, 0x70, 0x38, 0xca, 0x7d, 0x5b, 0xf6, 0x72, 0x59, 0xb6, 0x47, 0x60,
	0x7c, 0xcd, 0x99, 0x1b, 0x37, 0x74, 0x87, 0xf9, 0xeb, 0xa0, 0x4b, 0xc9, 0x3b, 0xb6, 0xe4, 0x89,
	0x43, 0x78, 0x63, 0xd8, 0x5e, 0x0c, 0x9e, 0x4e, 0x2c, 0xd8, 0x1f, 0x74, 0x8e, 0xf7, 0x46, 0xc1,
	0x02, 0x1e, 0x72, 0x0e, 0x6f, 0x4a, 0x5f, 0xd5, 0x41, 0x64, 0x87, 0xd5, 0x03, 0x68, 0xd2, 0x0a,
	0x14, 0xe5, 0x66, 0x74, 0x9e, 0xbf, 0xe0, 0xc9, 0x41, 0xaa, 0x6a, 0x94, 0x78, 0x43, 0xe8, 0xa0,
	0x56, 0x16, 0x5e, 0x09, 0x16, 0xd5, 0x75, 0x8b, 0x93, 0x78, 0x2c, 0xa7, 0xb7, 0xeb, 0x22, 0xff,
	0x3b, 0x08, 0x8f, 0x3b, 0x18, 0x03, 0xed, 0x1e, 0xbe, 0x5d, 0xdb, 0x08, 0xb4, 0xae, 0x9b, 0x65,
	0xd0, 0xac, 0x8b, 0xf5, 0x6e, 0x69, 0x0f, 0xd8, 0x89, 0x71, 0x58, 0xeb, 0x2d, 0xc1, 0x47, 0x89,
	0x2a, 0xe6, 0x87, 0xba, 0xa9, 0xe2, 0xad, 0x81, 0x2a, 0xd5, 0x75, 0x9e, 0x47, 0xf1, 0xa8, 0x3e,
	0xfe, 0x99, 0xa5, 0xb7, 0x3c, 0x8f, 0x8c, 0xe2, 0x2d, 0x69, 0x67, 0x3e, 0xcf, 0x46, 0x81, 0xf5,
	0x6c, 0x14, 0x90, 0xae, 0xd2, 0x57, 0x11, 0x3e, 0x60, 0x7d, 0x04, 0x48, 0xd9, 0xc2, 0xb7, 0x69,
	0x9a, 0x40, 0x34, 0x27, 0x1d, 0x85, 0x14, 0xd7, 0xd9, 0x3a, 0x97, 0xf4, 0x35, 0x04, 0xe4, 0x95,
	0x61, 0x5e, 0x93, 0x7d, 0x87, 0xab, 0x68, 0xef, 0x27, 0xa2, 0x99, 0xa0, 0xb9, 0x88, 0xe6, 0x55,
	0x2c, 0x5a, 0x75, 0x3d, 0xef, 0x68, 0x76, 0x87, 0x19, 0x2c, 0x3a, 0x4e, 0x2f, 0x4f, 0x65, 0x8f,
	0x32, 0x32, 0x76, 0xfc, 0x75, 0x5a, 0x3f, 0x7b, 0xcb, 0xf8, 0x3a, 0x4d, 0x72, 0x93, 0xbc, 0x4e,
	0x93, 0x5c, 0xd0, 0xa5, 0xec, 0xa6, 0x50, 0x01, 0xb8, 0xaa, 0xf1, 0xe7, 0x1d, 0x94, 0x3d, 0xfe,
	0x70, 0xe6, 0xe8, 0xad, 0x92, 0xe3, 0x9a, 0xec, 0x49, 0xa4, 0x47, 0xff, 0x5f, 0xa8, 0x9f, 0x8e,
	0xc4, 0x3d, 0x89, 0xd2, 0x8c, 0xaf, 0xcd, 0x15, 0xb7, 0x8d, 0x7b, 0x12, 0x45, 0xfb, 0x64, 0x6d,
	0xae, 0xb8, 0x25, 0xee, 0x49, 0x0c, 0xf8, 0xd7, 0x62, 0x4f, 0x52, 0x8a, 0xb7, 0x57, 0x11, 0xef,
	0xea, 0x3a, 0xc0, 0x9d, 0xfc, 0x3c, 0xf7, 0x1c, 0xa4, 0xab, 0x19, 0xce, 0x1f, 0x42, 0x61, 0x2c,
	0x84, 0xdf, 0xb9, 0x90, 0x87, 0xc4, 0x1d, 0xf0, 0x34, 0x9e, 0xe4, 0x9a, 0x31, 0x0f, 0x29, 0x69,
	0x94, 0xa4, 0xf1, 0x24, 0x7f, 0xd3, 0xa7, 0xf8, 0x89, 0xad, 0x8c, 0xae, 0xc2, 0x63, 0x06, 0x05,
	0x2b, 0x31, 0x3b, 0xc9, 0x42, 0xcb, 0x2b, 0x4c, 0x6b, 0x4d, 0x06, 0x67, 0x8e, 0x92, 0xe5, 0x1a,
	0x3a, 0x0f, 0xce, 0x39, 0x3b, 0x3e, 0x70, 0xcd, 0x67, 0x6f, 0x19, 0x07, 0x67, 0xc9, 0x4d, 0x32,
	0x70, 0x49, 0x2e, 0xc4, 0xc1, 0x59, 0x03, 0x78, 0x2d, 0x06, 0xe7, 0x42, 0x1c, 0xbd, 0x55, 0x72,
	0xac, 0x2e, 0xba, 0x13, 0xfc, 0xa7, 0x75, 0x3e, 0x49, 0xe5, 0xd4, 0x0d, 0xc9, 0xc2, 0x6e, 0x4e,
	0x68, 0xcb, 0xf7, 0x41, 0xe9, 0x45, 0xe3, 0x6e, 0x2e, 0x6d, 0x95, 0xec, 0x83, 0xd2, 0x0b, 0xe2,
	0x6e, 0x2e, 0x07, 0x66, 0x2d, 0x76, 0x73, 0x56, 0x16, 0x5e, 0x09, 0x16, 0xd5, 0xc5, 0xa6, 0xce,
	0x0f, 0x6f, 0xef, 0x0f, 0x5b, 0x3c, 0x05, 0x44, 0x17, 0x1f, 0xe1, 0x98, 0x56, 0x6a, 0xcf, 0x8f,
	0x2d, 0x33, 0x37, 0x8c, 0xc7, 0xb4, 0x99, 0x96, 0xc9, 0xb1, 0x65, 0xe6, 0x22, 0x7d, 0x8c, 0x1f,
	0xd3, 0x2a, 0x01, 0x56, 0x15, 0x33, 0xf1, 0x40, 0xd6, 0x99, 0x99, 0xb7, 0x0a, 0x66, 0x6b, 0x16,
	0x43, 0xeb, 0x6f, 0x4c, 0x8a, 0x61, 0xbe, 0x87, 0x02, 0x53, 0xf9, 0xb7, 0xa6, 0x67, 0x2a, 0xf7,
	0xd4, 0xac, 0xb9, 0x1c, 0xc3, 0x35, 0xfb, 0xdd, 0xc9, 0x31, 0x74, 0x62, 0xe6, 0xad, 0x82, 0x59,
	0x95, 0x39, 0x13, 0xa3, 0x62, 0x4c, 0x0a, 0x1c, 0xac, 0x8b, 0x1b, 0x5e, 0xad, 0x29, 0xdf, 0xbb,
	0x69, 0x9a, 0x18, 0x37, 0xbc, 0x1a, 0x9b, 0x64, 0xef, 0xa6, 0xb9, 0x4d, 0xbb, 0x7c, 0xbf, 0x6b,
	0xe1, 0x54, 0x55, 0x07, 0x10, 0xf7, 0xb1, 0xab, 0xd2, 0xc2, 0xab, 0x58, 0x8b, 0x2a, 0x97, 0x4a,
	0xfb, 0x32, 0xd1, 0x76, 0x4d, 0xe6, 0x16, 0xb3, 0x2c, 0x35, 0x86, 0x3c, 0xc7, 0x50, 0xd9, 0xc0,
	0x98, 0x65, 0xa9, 0xb4, 0x48, 0x72, 0x0c, 0x95, 0x37, 0xc5, 0x2c, 0x4b, 0x23, 0x93, 0xb5, 0xc8,
	0xb2, 0x2c, 0xad, 0x80, 0x57, 0xa1, 0x02, 0xd5, 0x75, 0x8a, 0x3b, 0xf0, 0xa4, 0x18, 0xdb, 0xc2,
	0xe7, 0xb2, 0x3f, 0x44, 0xf8, 0x90, 0xa3, 0x03, 0x90, 0xe8, 0x59, 0xbc, 0xcb, 0xd8, 0x10, 0xe2,
	0x34, 0xad, 0x95, 0xca, 0x76, 0x1a, 0x69, 0x76, 0x4f, 0x2f, 0x03, 0x63, 0x88, 0xe5, 0xc7, 0x76,
	0x56, 0xfb, 0x9f, 0x44, 0x29, 0xfb, 0x83, 0xdd, 0x95, 0xf2, 0xd6, 0x50, 0xa9, 0xea, 0x3a, 0xd9,
	0x2c, 0x3f, 0x2c, 0x61, 0x4f, 0x74, 0xec, 0x5b, 0x62, 0xc2, 0xae, 0xda, 0x8e, 0x27, 0xa6, 0xaa,
	0xee, 0x1b, 0x13, 0x76, 0x55, 0x06, 0x49, 0x62, 0xaa, 0xea, 0x1e, 0x5d, 0xe6, 0x27, 0x1f, 0x26,
	0x12, 0x55, 0x75, 0x17, 0x31, 0x2b, 0xb7, 0x24, 0x79, 0xaf, 0x32, 0xf2, 0x55, 0xbe, 0x1a, 0x4c,
	0xe7, 0x92, 0xbb, 0x93, 0x5a, 0xb3, 0x74, 0x78, 0x13, 0x0f, 0xb2, 0xd5, 0xdb, 0xf6, 0x57, 0x10,
	0x5f, 0xed, 0xe8, 0xec, 0x41, 0x97, 0x10, 0x6f, 0x0b, 0x94, 0x2d, 0x20, 0x28, 0x07, 0x95, 0xca,
	0xa8, 0x9d, 0x82, 0x36, 0x1a, 0x87, 0xb4, 0xc3, 0xa7, 0x07, 0x33, 0xa9, 0xaa, 0x3a, 0xc7, 0x3f,
	0x84, 0x17, 0x02, 0xab, 0x90, 0xc1, 0xab, 0x54, 0x86, 0xea, 0x3a, 0xc9, 0x31, 0x7e, 0x38, 0x93,
	0x02, 0xb9, 0x10, 0x0f, 0x50, 0xe6, 0xee, 0x21, 0xa4, 0x02, 0xe6, 0x0d, 0x79, 0x86, 0x5c, 0x20,
	0xdd, 0x33, 0xa6, 0x02, 0xca, 0x8e, 0x92, 0x0c, 0x39, 0xd9, 0x89, 0x98, 0x0a, 0xa8, 0x43, 0xbd,
	0x16, 0xa9, 0x80, 0x05, 0x89, 0x7a, 0xab, 0x26, 0x5a, 0x59, 0x9c, 0xa7, 0x9f, 0xff, 0x14, 0xde,
	0xc8, 0x68, 0x90, 0xcf, 0x21, 0x7c, 0x5d, 0x5c, 0x0f, 0x4a, 0x0e, 0x28, 0xc1, 0xe5, 0x8b, 0x4f,
	0x6b, 0x63, 0xf6, 0x86, 0xf1, 0x33, 0xe9, 0xde, 0xcf, 0xff, 0xe5, 0x5f, 0xaf, 0xac, 0xdf, 0x45,
	0x76, 0xf8, 0xfa, 0x8f, 0x04, 0x90, 0xaf, 0x22, 0x5e, 0x72, 0x49, 0x26, 0xf5, 0xbe, 0xf3, 0x95,
	0xa9, 0xb5, 0x43, 0x8e, 0xad, 0x01, 0xce, 0x41, 0x06, 0x67, 0x3f, 0xd9, 0xeb, 0x1b, 0x3f, 0x36,
	0xe0, 0x5f, 0x0d, 0x17, 0x9f, 0x21, 0x5f, 0x41, 0x78, 0x73, 0xe2, 0xe1, 0x6c, 0xab, 0x65, 0x42,
	0x96, 0xaf, 0x55, 0x35, 0x21, 0x53, 0x54, 0x9d, 0xd2, 0x51, 0x86, 0x6c, 0x84, 0x0c, 0x9b, 0x91,
	0x91, 0x9f, 0x21, 0x45, 0x35, 0x23, 0x99, 0x75, 0x92, 0x41, 0x5e, 0xa5, 0xd7, 0x8e, 0x16, 0x35,
	0x03, 0xb0, 0xb3, 0x0c, 0xac, 0x4f, 0x0e, 0xf9, 0x8e, 0xdf, 0x6c, 0x88, 0x05, 0xfd, 0x29, 0xc2,
	0x43, 0x39, 0xa7, 0x91, 0xb2, 0xb3, 0x4e, 0x5a, 0x15, 0x81, 0x6f, 0x2a, 0x08, 0xa5, 0x87, 0x19,
	0xfc, 0x09, 0x32, 0xe6, 0x0a, 0x9f, 0xbc, 0x8e, 0x32, 0x55, 0x85, 0xc4, 0x37, 0x0a, 0x97, 0xaf,
	0x89, 0xac, 0x1d, 0x76, 0x37, 0x00, 0x90, 0x75, 0x06, 0x72, 0x8c, 0x8c, 0xfa, 0xb6, 0x6f, 0x52,
	0xc4, 0xe2, 0x7e, 0x1b, 0xe1, 0x2d, 0x82, 0x9f, 0x48, 0x56, 0xdf, 0xa8, 0x4f, 0x31, 0x94, 0xea,
	0x6a, 0x4b, 0x3a, 0xce, 0x50, 0xee, 0x25, 0x7b, 0xac, 0x28, 0xc9, 0x9b, 0x28, 0x57, 0xc1, 0x48,
	0x66, 0x8c, 0xb2, 0xa8, 0x8b, 0x25, 0x6b, 0x47, 0x8a, 0x19, 0x39, 0xe9, 0x99, 0xfb, 0x20, 0x08,
	0xf9, 0x3d, 0xd2, 0x94, 0xed, 0x91, 0x13, 0xae, 0xb1, 0xcc, 0x15, 0x1f, 0xd6, 0x4e, 0x96, 0x31,
	0x05, 0x02, 0x27, 0x18, 0x81, 0x19, 0x32, 0xe5, 0x17, 0xf8, 0x48, 0x49, 0xdc, 0x37, 0x7e, 0x87,
	0xf0, 0x76, 0xa5, 0xf3, 0xa8, 0x97, 0x9c, 0x70, 0x0d, 0x7a, 0x21, 0x3a, 0xb6, 0xaa, 0x48, 0x7a,
	0x84, 0xd1, 0xa9, 0x93, 0xc9, 0x22, 0x74, 0xc8, 0x6f, 0x91, 0xba, 0x12, 0x8e, 0x1c, 0x37, 0x2a,
	0x6b, 0x28, 0xf3, 0xab, 0x9d, 0x28, 0x61, 0x09, 0x1c, 0x8e, 0x33, 0x0e, 0xd3, 0xe4, 0xb0, 0xef,
	0xfe, 0x11, 0x98, 0x38, 0x22, 0xbf, 0x46, 0xf8, 0x36, 0x95, 0xeb, 0x28, 0x20, 0xc7, 0x8d, 0xaa,
	0x96, 0xa4, 0x62, 0xa9, 0x30, 0xa4, 0x33, 0x8c, 0xca, 0x21, 0x72, 0xb0, 0x00, 0x15, 0xf2, 0x22,
	0x82, 0xb2, 0x35, 0x32, 0x6e, 0x14, 0x51, 0x2c, 0xb6, 0xab, 0x4d, 0xb8, 0x34, 0x05, 0x54, 0x07,
	0x18, 0xaa, 0x3d, 0x64, 0xb7, 0xaf, 0xfd, 0x66, 0x4e, 0xac, 0xe7, 0x0b, 0x08, 0xdf, 0xc0, 0x4c,
	0x23, 0x01, 0xc7, 0x8d, 0x32, 0xb8, 0x82, 0x91, 0x6b, 0xf4, 0x28, 0x65, 0x60, 0x76, 0x92, 0x9a,
	0x1e, 0x4c, 0x34, 0x0a, 0x63, 0x5e, 0x08, 0x47, 0x0e, 0xea, 0xdd, 0xe7, 0x0a, 0xed, 0x6a, 0x93,
	0x6e, 0x8d, 0x9d, 0xe6, 0x60, 0x86, 0x86, 0xfd, 0x80, 0x06, 0xfe, 0x55, 0x9e, 0xe0, 0xc9, 0xa6,
	0x89, 0x1b, 0x33, 0xb5, 0x75, 0xa4, 0xae, 0x7f, 0xac, 0xaa, 0x42, 0xaf, 0xe6, 0x3b, 0xb7, 0x07,
	0xa4, 0x93, 0x0c, 0xe9, 0x28, 0xd9, 0x67, 0x99, 0x6e, 0x19, 0x5a, 0xf2, 0x12, 0x4a, 0x6a, 0xd2,
	0x88, 0xa5, 0xa7, 0x88, 0xc5, 0x74, 0xb5, 0x83, 0x4e, 0x6d, 0x01, 0xd1, 0x18, 0x43, 0x44, 0xc9,
	0x88, 0xaf, 0xff, 0xd2, 0x52, 0xdc, 0xaf, 0xbe, 0x80, 0xf0, 0xa6, 0xd8, 0x38, 0xea, 0x58, 0x96,
	0xde, 0xe2, 0x0a, 0x28, 0x57, 0x87, 0x67, 0x59, 0x26, 0xc7, 0x80, 0xc8, 0xcb, 0x28, 0x2d, 0x14,
	0x23, 0x66, 0xba, 0xd9, 0xaa, 0x88, 0xda, 0xa4, 0x5b, 0x63, 0xa7, 0x29, 0x1d, 0x2a, 0x60, 0x62,
	0x75, 0xbe, 0x88, 0x30, 0x06, 0xf3, 0x48, 0x1e, 0x33, 0x65, 0x77, 0x50, 0xf9, 0x1a, 0x39, 0xba,
	0x8f, 0x81, 0x1a, 0x26, 0x3b, 0x4d, 0xa0, 0xc8, 0x4f, 0x50, 0xbe, 0x06, 0x8b, 0x98, 0x97, 0x0b,
	0x9a, 0xc3, 0xa4, 0xda, 0x6c, 0x41, 0x2b, 0xb7, 0x61, 0x54, 0xfe, 0x8a, 0x50, 0x2c, 0xe3, 0x8f,
	0x51, 0x9c, 0xb3, 0x23, 0x7a, 0x8c, 0xf4, 0x3c, 0x62, 0x1e, 0xce, 0x8b, 0x23, 0x37, 0x94, 0xaf,
	0x59, 0xd6, 0x47, 0x39, 0xe4, 0xd1, 0x72, 0x4e, 0xae, 0x4e, 0x9a, 0x76, 0xd3, 0x4c, 0x3c, 0x97,
	0xa9, 0xcd, 0x14, 0xb2, 0x01, 0xac, 0x53, 0x0c, 0xeb, 0x41, 0x32, 0xee, 0x3b, 0x7c, 0xb7, 0x2c,
	0xd6, 0xf8, 0xfb, 0x08, 0xdf, 0x92, 0xf5, 0x16, 0x29, 0x3c, 0xed, 0xa6, 0x95, 0x2b, 0x62, 0x6d,
	0x2d, 0x98, 0x65, 0x0c, 0x94, 0x10, 0x93, 0x37, 0x90, 0x54, 0x47, 0x44, 0xa6, 0xac, 0x32, 0xc9,
	0xb5, 0x50, 0xb5, 0xe9, 0x22, 0x26, 0x4e, 0x3b, 0xa3, 0xec, 0x57, 0xde, 0x62, 0x5d, 0xbf, 0x07,
	0x3f, 0xb9, 0xd4, 0x57, 0x24, 0xeb, 0x94, 0x55, 0xa2, 0x22, 0x68, 0x75, 0xd5, 0x56, 0x96, 0xdd,
	0x7c, 0x16, 0x2d, 0x79, 0x07, 0x29, 0x8b, 0x75, 0xc8, 0x31, 0xcb, 0xe0, 0xa8, 0x7b, 0xff, 0x59,
	0x3b, 0x5e, 0xdc, 0x10, 0x70, 0x1f, 0x65, 0xb8, 0x0f, 0x93, 0xba, 0xef, 0xfa, 0x85, 0xbc, 0x58,
	0xeb, 0x5f, 0x20, 0xbc, 0x4d, 0xe1, 0x37, 0x52, 0xfc, 0x98, 0x65, 0x34, 0x2d, 0xc3, 0xc2, 0x5c,
	0xfc, 0x64, 0xf9, 0x11, 0xaa, 0x58, 0x90, 0x6f, 0x22, 0xb1, 0x5c, 0xc6, 0xb4, 0xf2, 0x50, 0x95,
	0x29, 0xd5, 0x7c, 0xe7, 0xf6, 0x6e, 0x2b, 0x8f, 0xd4, 0x20, 0x96, 0xf7, 0xeb, 0xd1, 0xd2, 0x28,
	0xbd, 0x16, 0xa9, 0x5a, 0x77, 0x14, 0xc7, 0x01, 0xa0, 0xb2, 0x7c, 0xc8, 0xb2, 0xbe, 0xe5, 0x00,
	0xa3, 0x29, 0xe2, 0x26, 0xa9, 0x28, 0x87, 0x18, 0x76, 0xeb, 0xea, 0xf2, 0x9f, 0xda, 0x54, 0x01,
	0x0b, 0x40, 0x78, 0x92, 0x21, 0x3c, 0x42, 0xa6, 0x6d, 0x51, 0x56, 0xac, 0x35, 0xbf, 0x81, 0xf0,
	0x26, 0x9e, 0x37, 0x6c, 0x3e, 0xaa, 0x93, 0x13, 0xa5, 0x6b, 0x75, 0xd7, 0xe6, 0x6e, 0xf3, 0x57,
	0xd2, 0xde, 0xbf, 0xca, 0xce, 0xab, 0x9f, 0x21, 0x5f, 0x43, 0xf8, 0x7f, 0x52, 0x2f, 0x51, 0xb0,
	0xcd, 0x07, 0x76, 0x45, 0xf0, 0xa9, 0xea, 0x81, 0x2c, 0x07, 0x7c, 0xbc, 0xe6, 0xe7, 0xef, 0xc8,
	0x50, 0x2b, 0x42, 0xce, 0xb8, 0xa9, 0xa2, 0x5b, 0x1b, 0xdc, 0x51, 0xd6, 0x1c, 0x48, 0x9c, 0x61,
	0x24, 0x8e, 0x91, 0x59, 0xbf, 0xe0, 0x07, 0x36, 0xe3, 0x5f, 0xd8, 0xdf, 0x10, 0xde, 0xa9, 0x7d,
	0x48, 0x14, 0x83, 0x33, 0x6e, 0xa2, 0x96, 0xa0, 0xe7, 0x52, 0xa6, 0x63, 0xdb, 0xcf, 0xeb, 0xe9,
	0x91, 0x3f, 0x23, 0x6d, 0x85, 0x05, 0x39, 0x55, 0x50, 0xf4, 0xcc, 0x6a, 0xe3, 0x74, 0x39, 0x63,
	0x20, 0x74, 0x8a, 0x11, 0x9a, 0x25, 0x33, 0x7e, 0xa1, 0x2f, 0x9b, 0xc6, 0xd1, 0xfa, 0x13, 0xc2,
	0x35, 0xcd, 0x03, 0xa2, 0x58, 0x9d, 0x2a, 0x28, 0xb6, 0x2b, 0x2d, 0x7b, 0x39, 0x8b, 0x65, 0x02,
	0xd5, 0xd2, 0x22, 0x6f, 0x21, 0x7c, 0x93, 0x94, 0xd1, 0x4e, 0x66, 0x1c, 0x96, 0x49, 0xb9, 0x1f,
	0xff, 0x91, 0x62, 0x46, 0x4e, 0x5b, 0x76, 0xf9, 0x33, 0xb0, 0xe9, 0x48, 0xf5, 0x03, 0x84, 0x89,
	0xe4, 0x32, 0xd2, 0x7f, 0xc6, 0x61, 0xc5, 0x54, 0x04, 0xb8, 0xbe, 0x90, 0x84, 0x1e, 0x62, 0xc0,
	0x0f, 0x90, 0xfd, 0x4e, 0xc0, 0xc9, 0xaf, 0x90, 0xb2, 0x06, 0xc1, 0xb2, 0xd4, 0xd2, 0xd7, 0x50,
	0x58, 0x96, 0x5a, 0x86, 0x6a, 0x08, 0x7a, 0x8c, 0x21, 0x9f, 0x22, 0xbe, 0xfb, 0x97, 0x77, 0xe3,
	0xce, 0xff, 0x4b, 0x84, 0xb7, 0x29, 0x1c, 0xdb, 0xd7, 0x5a, 0xe5, 0x68, 0x98, 0x8b, 0x3a, 0xe8,
	0x34, 0xa3, 0x31, 0x49, 0x26, 0xdc, 0x69, 0x90, 0x57, 0x10, 0x2f, 0x15, 0xb0, 0xbc, 0x55, 0x93,
	0xea, 0x1b, 0x2c, 0x6f, 0xd5, 0xe4, 0x9a, 0x04, 0x3a, 0xc1, 0xd0, 0xed, 0x23, 0xd4, 0x37, 0x7d,
	0x89, 0x38, 0xd6, 0xf5, 0xcb, 0x08, 0x6f, 0x4e, 0x1c, 0xd8, 0x5f, 0xaa, 0x15, 0x00, 0xa6, 0x28,
	0x96, 0xa0, 0xfb, 0x19, 0xb0, 0xdd, 0x64, 0x97, 0x11, 0x18, 0x1b, 0x16, 0xa4, 0xfc, 0x7a, 0xcb,
	0xb0, 0xa0, 0xae, 0x1f, 0xb0, 0x0c, 0x0b, 0x9a, 0x4a, 0x00, 0xcb, 0xb0, 0x20, 0x7f, 0xc8, 0x39,
	0x33, 0x2c, 0x48, 0x2e, 0xed, 0xc3, 0x42, 0x71, 0xe0, 0xfa, 0x12, 0x06, 0xcb, 0xb0, 0x20, 0x03,
	0x27, 0xaf, 0x22, 0x21, 0x89, 0xde, 0xb2, 0x1c, 0x94, 0xd3, 0x8d, 0x2d, 0xcb, 0xc1, 0x5c, 0xd2,
	0xb0, 0x65, 0x6f, 0x98, 0x7e, 0x9d, 0x3a, 0xee, 0x94, 0xd1, 0x5a, 0x30, 0x75, 0x61, 0x5f, 0x0b,
	0x16, 0x01, 0xa7, 0xaa, 0x26, 0xb0, 0xac, 0x05, 0x53, 0x70, 0xec, 0x1c, 0x20, 0x9b, 0x7f, 0x6e,
	0x3e, 0x07, 0x50, 0x25, 0xdb, 0x5b, 0xce, 0x01, 0x94, 0x69, 0xf3, 0x96, 0x73, 0x80, 0xec, 0xa7,
	0xc0, 0xf9, 0x39, 0x40, 0xc6, 0x97, 0xfd, 0x1c, 0xa0, 0x28, 0x5a, 0x5d, 0x92, 0xbf, 0x25, 0xd6,
	0x59, 0xb4, 0xa9, 0xa6, 0xbc, 0x27, 0xda, 0x35, 0xcd, 0x05, 0x7c, 0xba, 0x88, 0x89, 0xbb, 0xa6,
	0x52, 0xb7, 0x4c, 0x34, 0xcd, 0x74, 0x4d, 0xbb, 0xa6, 0x45, 0xd0, 0xea, 0x92, 0xee, 0x5d, 0x34,
	0xe5, 0xfd, 0x34, 0x5a, 0xfd, 0xea, 0x92, 0xa8, 0x4f, 0x59, 0xa5, 0x32, 0x9c, 0x4e, 0x9c, 0x2e,
	0x67, 0xec, 0xb4, 0xfa, 0xd5, 0x7e, 0x7c, 0x9e, 0xaf, 0x7e, 0x35, 0x0f, 0xb0, 0xaf, 0x7e, 0xcb,
	0xd3, 0xb2, 0x27, 0xc1, 0x5b, 0x56, 0xbf, 0x5a, 0x5a, 0xe4, 0x0f, 0x48, 0x93, 0x22, 0x6d, 0x79,
	0xa3, 0x6d, 0x4a, 0xf4, 0xb6, 0xbc, 0xd1, 0x36, 0xa6, 0x6c, 0x5b, 0xce, 0x16, 0x74, 0xdf, 0xf9,
	0x8f, 0xc3, 0x73, 0x0d, 0xe1, 0xed, 0x4a, 0xef, 0xf6, 0x57, 0xda, 0x65, 0xf9, 0xd8, 0x52, 0xd0,
	0x2d, 0x13, 0xb9, 0x8e, 0x0f, 0xf9, 0x37, 0xb2, 0x64, 0x1b, 0x93, 0xb3, 0x56, 0x91, 0xad, 0x5b,
	0xe3, 0x73, 0xab, 0x71, 0x01, 0xfc, 0xce, 0x31, 0x7e, 0xa7, 0xc9, 0x49, 0xbf, 0xcc, 0xff, 0xb1,
	0x10, 0xc7, 0xed, 0x23, 0x84, 0x47, 0x8c, 0x4f, 0x8b, 0xe2, 0x77, 0xd6, 0x1a, 0x84, 0xd5, 0xf0,
	0x75, 0xcd, 0x02, 0xb7, 0x9c, 0x76, 0xd8, 0xf8, 0xb2, 0x5c, 0x05, 0x65, 0x4a, 0xef, 0x71, 0x7b,
	0x2c, 0x34, 0xac, 0x4e, 0x94, 0xb0, 0x74, 0x3a, 0xdb, 0x50, 0xff, 0x27, 0x17, 0x3c, 0x57, 0x41,
	0xe5, 0xda, 0x9e, 0xab, 0x50, 0x92, 0x8a, 0x25, 0xef, 0xda, 0xf2, 0x92, 0x4d, 0x4d, 0x25, 0x9a,
	0xa3, 0xb6, 0xa9, 0x73, 0x6b, 0x89, 0x79, 0x0c, 0x33, 0xe6, 0x15, 0xd7, 0x4e, 0x95, 0xb2, 0x05,
	0x22, 0x77, 0x30, 0x22, 0xc7, 0xc9, 0x51, 0xbf, 0xd0, 0x7f, 0x23, 0x92, 0x6e, 0x01, 0xfe, 0x88,
	0xf0, 0xed, 0xea, 0x47, 0x44, 0xb1, 0x31, 0x0f, 0x65, 0xa5, 0x69, 0x59, 0x13, 0x9f, 0x2d, 0x13,
	0x94, 0x96, 0x16, 0x79, 0x1b, 0xe1, 0x9b, 0xe5, 0x54, 0x58, 0xcb, 0xeb, 0x5b, 0x4d, 0xba, 0xaf,
	0xe5, 0xf5, 0xad, 0x2e, 0x71, 0xd7, 0x72, 0x5c, 0x90, 0xff, 0x2f, 0x5a, 0xd2, 0x48, 0xbc, 0x85,
	0xf0, 0x56, 0xd9, 0xab, 0xfd, 0x15, 0x6e, 0x09, 0xf4, 0x86, 0xb4, 0x63, 0xea, 0x33, 0xf4, 0xe3,
	0xe4, 0x80, 0x23, 0xfa, 0x73, 0xb3, 0xd7, 0x3e, 0x18, 0x46, 0xef, 0x7e, 0x30, 0x8c, 0xde, 0xff,
	0x60, 0x18, 0x7d, 0xe9, 0xc3, 0xe1, 0x75, 0xef, 0x7e, 0x38, 0xbc, 0xee, 0xbd, 0x0f, 0x87, 0xd7,
	0x3d, 0xb2, 0x83, 0xdb, 0x3d, 0x2d, 0xf8, 0x18, 0x5c, 0xe9, 0x06, 0xfd, 0xf9, 0xeb, 0xd8, 0x7f,
	0x4c, 0x33, 0xf3, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xdc, 0x0a, 0xd3, 0xed, 0x8f, 0x6c, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a MagicKey by id.
	MagicKey(ctx context.Context, in *QueryGetMagicKeyRequest, opts ...grpc.CallOption) (*QueryGetMagicKeyResponse, error)
	// Queries a list of MagicKey items.
	MagicKeyAll(ctx context.Context, in *QueryAllMagicKeyRequest, opts ...grpc.CallOption) (*QueryAllMagicKeyResponse, error)
	// Queries a MagicKeySummoning by id.
	MagicKeySummoning(ctx context.Context, in *QueryGetMagicKeySummoningRequest, opts ...grpc.CallOption) (*QueryGetMagicKeySummoningResponse, error)
	// Queries a list of MagicKeySummoning items.
	MagicKeySummoningAll(ctx context.Context, in *QueryAllMagicKeySummoningRequest, opts ...grpc.CallOption) (*QueryAllMagicKeySummoningResponse, error)
	// Queries a HighCouncil by id.
	HighCouncil(ctx context.Context, in *QueryGetHighCouncilRequest, opts ...grpc.CallOption) (*QueryGetHighCouncilResponse, error)
	// Queries a list of HighCouncil items.
	HighCouncilAll(ctx context.Context, in *QueryAllHighCouncilRequest, opts ...grpc.CallOption) (*QueryAllHighCouncilResponse, error)
	// Queries a CurrentMagicKey by index.
	CurrentMagicKey(ctx context.Context, in *QueryGetCurrentMagicKeyRequest, opts ...grpc.CallOption) (*QueryGetCurrentMagicKeyResponse, error)
	// Queries a HighCouncilConjurings by id.
	HighCouncilConjurings(ctx context.Context, in *QueryGetHighCouncilConjuringsRequest, opts ...grpc.CallOption) (*QueryGetHighCouncilConjuringsResponse, error)
	// Queries a list of HighCouncilConjurings items.
	HighCouncilConjuringsAll(ctx context.Context, in *QueryAllHighCouncilConjuringsRequest, opts ...grpc.CallOption) (*QueryAllHighCouncilConjuringsResponse, error)
	// Queries a SpiritConjuringPoems by id.
	SpiritConjuringPoems(ctx context.Context, in *QueryGetSpiritConjuringPoemsRequest, opts ...grpc.CallOption) (*QueryGetSpiritConjuringPoemsResponse, error)
	// Queries a list of SpiritConjuringPoems items.
	SpiritConjuringPoemsAll(ctx context.Context, in *QueryAllSpiritConjuringPoemsRequest, opts ...grpc.CallOption) (*QueryAllSpiritConjuringPoemsResponse, error)
	// Queries a Verse by id.
	Verse(ctx context.Context, in *QueryGetVerseRequest, opts ...grpc.CallOption) (*QueryGetVerseResponse, error)
	// Queries a list of Verse items.
	VerseAll(ctx context.Context, in *QueryAllVerseRequest, opts ...grpc.CallOption) (*QueryAllVerseResponse, error)
	// Queries a list of VerseCount items.
	VerseCount(ctx context.Context, in *QueryVerseCountRequest, opts ...grpc.CallOption) (*QueryVerseCountResponse, error)
	// Queries a list of MagicKeyCount items.
	MagicKeyCount(ctx context.Context, in *QueryMagicKeyCountRequest, opts ...grpc.CallOption) (*QueryMagicKeyCountResponse, error)
	// Queries a Vision by id.
	Vision(ctx context.Context, in *QueryGetVisionRequest, opts ...grpc.CallOption) (*QueryGetVisionResponse, error)
	// Queries a list of Vision items.
	VisionAll(ctx context.Context, in *QueryAllVisionRequest, opts ...grpc.CallOption) (*QueryAllVisionResponse, error)
	// Queries a Message by id.
	Message(ctx context.Context, in *QueryGetMessageRequest, opts ...grpc.CallOption) (*QueryGetMessageResponse, error)
	// Queries a list of Message items.
	MessageAll(ctx context.Context, in *QueryAllMessageRequest, opts ...grpc.CallOption) (*QueryAllMessageResponse, error)
	// Queries a SignatureRequest by id.
	SignatureRequest(ctx context.Context, in *QueryGetSignatureRequestRequest, opts ...grpc.CallOption) (*QueryGetSignatureRequestResponse, error)
	// Queries a list of SignatureRequest items.
	SignatureRequestAll(ctx context.Context, in *QueryAllSignatureRequestRequest, opts ...grpc.CallOption) (*QueryAllSignatureRequestResponse, error)
	// Queries a SignatureShare by id.
	SignatureShare(ctx context.Context, in *QueryGetSignatureShareRequest, opts ...grpc.CallOption) (*QueryGetSignatureShareResponse, error)
	// Queries a list of SignatureShare items.
	SignatureShareAll(ctx context.Context, in *QueryAllSignatureShareRequest, opts ...grpc.CallOption) (*QueryAllSignatureShareResponse, error)
	// Queries a SignedMessage by id.
	SignedMessage(ctx context.Context, in *QueryGetSignedMessageRequest, opts ...grpc.CallOption) (*QueryGetSignedMessageResponse, error)
	// Queries a list of SignedMessage items.
	SignedMessageAll(ctx context.Context, in *QueryAllSignedMessageRequest, opts ...grpc.CallOption) (*QueryAllSignedMessageResponse, error)
	// Queries a MeditationSummoning by id.
	MeditationSummoning(ctx context.Context, in *QueryGetMeditationSummoningRequest, opts ...grpc.CallOption) (*QueryGetMeditationSummoningResponse, error)
	// Queries a list of MeditationSummoning items.
	MeditationSummoningAll(ctx context.Context, in *QueryAllMeditationSummoningRequest, opts ...grpc.CallOption) (*QueryAllMeditationSummoningResponse, error)
	// Queries a Meditation by id.
	Meditation(ctx context.Context, in *QueryGetMeditationRequest, opts ...grpc.CallOption) (*QueryGetMeditationResponse, error)
	// Queries a list of Meditation items.
	MeditationAll(ctx context.Context, in *QueryAllMeditationRequest, opts ...grpc.CallOption) (*QueryAllMeditationResponse, error)
	// Queries a list of MeditationCount items.
	MeditationCount(ctx context.Context, in *QueryMeditationCountRequest, opts ...grpc.CallOption) (*QueryMeditationCountResponse, error)
	// Queries a Scripture by index.
	Scripture(ctx context.Context, in *QueryGetScriptureRequest, opts ...grpc.CallOption) (*QueryGetScriptureResponse, error)
	// Queries a list of Scripture items.
	ScriptureAll(ctx context.Context, in *QueryAllScriptureRequest, opts ...grpc.CallOption) (*QueryAllScriptureResponse, error)
	// Queries a ScriptureSignatureRequest by id.
	ScriptureSignatureRequest(ctx context.Context, in *QueryGetScriptureSignatureRequestRequest, opts ...grpc.CallOption) (*QueryGetScriptureSignatureRequestResponse, error)
	// Queries a list of ScriptureSignatureRequest items.
	ScriptureSignatureRequestAll(ctx context.Context, in *QueryAllScriptureSignatureRequestRequest, opts ...grpc.CallOption) (*QueryAllScriptureSignatureRequestResponse, error)
	// Queries a ScriptureSignatureShare by id.
	ScriptureSignatureShare(ctx context.Context, in *QueryGetScriptureSignatureShareRequest, opts ...grpc.CallOption) (*QueryGetScriptureSignatureShareResponse, error)
	// Queries a list of ScriptureSignatureShare items.
	ScriptureSignatureShareAll(ctx context.Context, in *QueryAllScriptureSignatureShareRequest, opts ...grpc.CallOption) (*QueryAllScriptureSignatureShareResponse, error)
	// Queries a SignedScripture by index.
	SignedScripture(ctx context.Context, in *QueryGetSignedScriptureRequest, opts ...grpc.CallOption) (*QueryGetSignedScriptureResponse, error)
	// Queries a list of SignedScripture items.
	SignedScriptureAll(ctx context.Context, in *QueryAllSignedScriptureRequest, opts ...grpc.CallOption) (*QueryAllSignedScriptureResponse, error)
	// Queries a SignedScriptureList by id.
	SignedScriptureList(ctx context.Context, in *QueryGetSignedScriptureListRequest, opts ...grpc.CallOption) (*QueryGetSignedScriptureListResponse, error)
	// Queries a list of SignedScriptureList items.
	SignedScriptureListAll(ctx context.Context, in *QueryAllSignedScriptureListRequest, opts ...grpc.CallOption) (*QueryAllSignedScriptureListResponse, error)
	// Queries a list of Blessing items.
	Blessing(ctx context.Context, in *QueryGetBlessingRequest, opts ...grpc.CallOption) (*QueryGetBlessingResponse, error)
	BlessingAll(ctx context.Context, in *QueryAllBlessingRequest, opts ...grpc.CallOption) (*QueryAllBlessingResponse, error)
	// Queries a list of BlessingReceipt items.
	BlessingReceipt(ctx context.Context, in *QueryGetBlessingReceiptRequest, opts ...grpc.CallOption) (*QueryGetBlessingReceiptResponse, error)
	BlessingReceiptAll(ctx context.Context, in *QueryAllBlessingReceiptRequest, opts ...grpc.CallOption) (*QueryAllBlessingReceiptResponse, error)
	// Queries a list of Imploring items.
	Imploring(ctx context.Context, in *QueryGetImploringRequest, opts ...grpc.CallOption) (*QueryGetImploringResponse, error)
	ImploringAll(ctx context.Context, in *QueryAllImploringRequest, opts ...grpc.CallOption) (*QueryAllImploringResponse, error)
	// Queries a list of KillConjuring items.
	KillConjuring(ctx context.Context, in *QueryGetKillConjuringRequest, opts ...grpc.CallOption) (*QueryGetKillConjuringResponse, error)
	KillConjuringAll(ctx context.Context, in *QueryAllKillConjuringRequest, opts ...grpc.CallOption) (*QueryAllKillConjuringResponse, error)
	// Queries a list of KillImploring items.
	KillImploring(ctx context.Context, in *QueryGetKillImploringRequest, opts ...grpc.CallOption) (*QueryGetKillImploringResponse, error)
	KillImploringAll(ctx context.Context, in *QueryAllKillImploringRequest, opts ...grpc.CallOption) (*QueryAllKillImploringResponse, error)
	// Queries a list of KillMeditationSummoning items.
	KillMeditationSummoning(ctx context.Context, in *QueryGetKillMeditationSummoningRequest, opts ...grpc.CallOption) (*QueryGetKillMeditationSummoningResponse, error)
	KillMeditationSummoningAll(ctx context.Context, in *QueryAllKillMeditationSummoningRequest, opts ...grpc.CallOption) (*QueryAllKillMeditationSummoningResponse, error)
	// Queries a list of KillMagicKeySummoning items.
	KillMagicKeySummoning(ctx context.Context, in *QueryGetKillMagicKeySummoningRequest, opts ...grpc.CallOption) (*QueryGetKillMagicKeySummoningResponse, error)
	KillMagicKeySummoningAll(ctx context.Context, in *QueryAllKillMagicKeySummoningRequest, opts ...grpc.CallOption) (*QueryAllKillMagicKeySummoningResponse, error)
	// Queries a list of KillScriptureSignatureRequest items.
	KillScriptureSignatureRequest(ctx context.Context, in *QueryGetKillScriptureSignatureRequestRequest, opts ...grpc.CallOption) (*QueryGetKillScriptureSignatureRequestResponse, error)
	KillScriptureSignatureRequestAll(ctx context.Context, in *QueryAllKillScriptureSignatureRequestRequest, opts ...grpc.CallOption) (*QueryAllKillScriptureSignatureRequestResponse, error)
	// Queries a list of KillSignatureRequest items.
	KillSignatureRequest(ctx context.Context, in *QueryGetKillSignatureRequestRequest, opts ...grpc.CallOption) (*QueryGetKillSignatureRequestResponse, error)
	KillSignatureRequestAll(ctx context.Context, in *QueryAllKillSignatureRequestRequest, opts ...grpc.CallOption) (*QueryAllKillSignatureRequestResponse, error)
	// Queries a list of EncryptedMagicKeyShare items.
	EncryptedMagicKeyShare(ctx context.Context, in *QueryGetEncryptedMagicKeyShareRequest, opts ...grpc.CallOption) (*QueryGetEncryptedMagicKeyShareResponse, error)
	EncryptedMagicKeyShareAll(ctx context.Context, in *QueryAllEncryptedMagicKeyShareRequest, opts ...grpc.CallOption) (*QueryAllEncryptedMagicKeyShareResponse, error)
	// Queries a list of EncryptedPreSign items.
	EncryptedPreSign(ctx context.Context, in *QueryGetEncryptedPreSignRequest, opts ...grpc.CallOption) (*QueryGetEncryptedPreSignResponse, error)
	EncryptedPreSignAll(ctx context.Context, in *QueryAllEncryptedPreSignRequest, opts ...grpc.CallOption) (*QueryAllEncryptedPreSignResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/eightball.eightball.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MagicKey(ctx context.Context, in *QueryGetMagicKeyRequest, opts ...grpc.CallOption) (*QueryGetMagicKeyResponse, error) {
	out := new(QueryGetMagicKeyResponse)
	err := c.cc.Invoke(ctx, "/eightball.eightball.Query/MagicKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MagicKeyAll(ctx context.Context, in *QueryAllMagicKeyRequest, opts ...grpc.CallOption) (*QueryAllMagicKeyResponse, error) {
	out := new(QueryAllMagicKeyResponse)
	err := c.cc.Invoke(ctx, "/eightball.eightball.Query/MagicKeyAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MagicKeySummoning(ctx context.Context, in *QueryGetMagicKeySummoningRequest, opts ...grpc.CallOption) (*QueryGetMagicKeySummoningResponse, error) {
	out := new(QueryGetMagicKeySummoningResponse)
	err := c.cc.Invoke(ctx, "/eightball.eightball.Query/MagicKeySummoning", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MagicKeySummoningAll(ctx context.Context, in *QueryAllMagicKeySummoningRequest, opts ...grpc.CallOption) (*QueryAllMagicKeySummoningResponse, error) {
	out := new(QueryAllMagicKeySummoningResponse)
	err := c.cc.Invoke(ctx, "/eightball.eightball.Query/MagicKeySummoningAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HighCouncil(ctx context.Context, in *QueryGetHighCouncilRequest, opts ...grpc.CallOption) (*QueryGetHighCouncilResponse, error) {
	out := new(QueryGetHighCouncilResponse)
	err := c.cc.Invoke(ctx, "/eightball.eightball.Query/HighCouncil", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HighCouncilAll(ctx context.Context, in *QueryAllHighCouncilRequest, opts ...grpc.CallOption) (*QueryAllHighCouncilResponse, error) {
	out := new(QueryAllHighCouncilResponse)
	err := c.cc.Invoke(ctx, "/eightball.eightball.Query/HighCouncilAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CurrentMagicKey(ctx context.Context, in *QueryGetCurrentMagicKeyRequest, opts ...grpc.CallOption) (*QueryGetCurrentMagicKeyResponse, error) {
	out := new(QueryGetCurrentMagicKeyResponse)
	err := c.cc.Invoke(ctx, "/eightball.eightball.Query/CurrentMagicKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HighCouncilConjurings(ctx context.Context, in *QueryGetHighCouncilConjuringsRequest, opts ...grpc.CallOption) (*QueryGetHighCouncilConjuringsResponse, error) {
	out := new(QueryGetHighCouncilConjuringsResponse)
	err := c.cc.Invoke(ctx, "/eightball.eightball.Query/HighCouncilConjurings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HighCouncilConjuringsAll(ctx context.Context, in *QueryAllHighCouncilConjuringsRequest, opts ...grpc.CallOption) (*QueryAllHighCouncilConjuringsResponse, error) {
	out := new(QueryAllHighCouncilConjuringsResponse)
	err := c.cc.Invoke(ctx, "/eightball.eightball.Query/HighCouncilConjuringsAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SpiritConjuringPoems(ctx context.Context, in *QueryGetSpiritConjuringPoemsRequest, opts ...grpc.CallOption) (*QueryGetSpiritConjuringPoemsResponse, error) {
	out := new(QueryGetSpiritConjuringPoemsResponse)
	err := c.cc.Invoke(ctx, "/eightball.eightball.Query/SpiritConjuringPoems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SpiritConjuringPoemsAll(ctx context.Context, in *QueryAllSpiritConjuringPoemsRequest, opts ...grpc.CallOption) (*QueryAllSpiritConjuringPoemsResponse, error) {
	out := new(QueryAllSpiritConjuringPoemsResponse)
	err := c.cc.Invoke(ctx, "/eightball.eightball.Query/SpiritConjuringPoemsAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Verse(ctx context.Context, in *QueryGetVerseRequest, opts ...grpc.CallOption) (*QueryGetVerseResponse, error) {
	out := new(QueryGetVerseResponse)
	err := c.cc.Invoke(ctx, "/eightball.eightball.Query/Verse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VerseAll(ctx context.Context, in *QueryAllVerseRequest, opts ...grpc.CallOption) (*QueryAllVerseResponse, error) {
	out := new(QueryAllVerseResponse)
	err := c.cc.Invoke(ctx, "/eightball.eightball.Query/VerseAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VerseCount(ctx context.Context, in *QueryVerseCountRequest, opts ...grpc.CallOption) (*QueryVerseCountResponse, error) {
	out := new(QueryVerseCountResponse)
	err := c.cc.Invoke(ctx, "/eightball.eightball.Query/VerseCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MagicKeyCount(ctx context.Context, in *QueryMagicKeyCountRequest, opts ...grpc.CallOption) (*QueryMagicKeyCountResponse, error) {
	out := new(QueryMagicKeyCountResponse)
	err := c.cc.Invoke(ctx, "/eightball.eightball.Query/MagicKeyCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Vision(ctx context.Context, in *QueryGetVisionRequest, opts ...grpc.CallOption) (*QueryGetVisionResponse, error) {
	out := new(QueryGetVisionResponse)
	err := c.cc.Invoke(ctx, "/eightball.eightball.Query/Vision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VisionAll(ctx context.Context, in *QueryAllVisionRequest, opts ...grpc.CallOption) (*QueryAllVisionResponse, error) {
	out := new(QueryAllVisionResponse)
	err := c.cc.Invoke(ctx, "/eightball.eightball.Query/VisionAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Message(ctx context.Context, in *QueryGetMessageRequest, opts ...grpc.CallOption) (*QueryGetMessageResponse, error) {
	out := new(QueryGetMessageResponse)
	err := c.cc.Invoke(ctx, "/eightball.eightball.Query/Message", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MessageAll(ctx context.Context, in *QueryAllMessageRequest, opts ...grpc.CallOption) (*QueryAllMessageResponse, error) {
	out := new(QueryAllMessageResponse)
	err := c.cc.Invoke(ctx, "/eightball.eightball.Query/MessageAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SignatureRequest(ctx context.Context, in *QueryGetSignatureRequestRequest, opts ...grpc.CallOption) (*QueryGetSignatureRequestResponse, error) {
	out := new(QueryGetSignatureRequestResponse)
	err := c.cc.Invoke(ctx, "/eightball.eightball.Query/SignatureRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SignatureRequestAll(ctx context.Context, in *QueryAllSignatureRequestRequest, opts ...grpc.CallOption) (*QueryAllSignatureRequestResponse, error) {
	out := new(QueryAllSignatureRequestResponse)
	err := c.cc.Invoke(ctx, "/eightball.eightball.Query/SignatureRequestAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SignatureShare(ctx context.Context, in *QueryGetSignatureShareRequest, opts ...grpc.CallOption) (*QueryGetSignatureShareResponse, error) {
	out := new(QueryGetSignatureShareResponse)
	err := c.cc.Invoke(ctx, "/eightball.eightball.Query/SignatureShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SignatureShareAll(ctx context.Context, in *QueryAllSignatureShareRequest, opts ...grpc.CallOption) (*QueryAllSignatureShareResponse, error) {
	out := new(QueryAllSignatureShareResponse)
	err := c.cc.Invoke(ctx, "/eightball.eightball.Query/SignatureShareAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SignedMessage(ctx context.Context, in *QueryGetSignedMessageRequest, opts ...grpc.CallOption) (*QueryGetSignedMessageResponse, error) {
	out := new(QueryGetSignedMessageResponse)
	err := c.cc.Invoke(ctx, "/eightball.eightball.Query/SignedMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SignedMessageAll(ctx context.Context, in *QueryAllSignedMessageRequest, opts ...grpc.CallOption) (*QueryAllSignedMessageResponse, error) {
	out := new(QueryAllSignedMessageResponse)
	err := c.cc.Invoke(ctx, "/eightball.eightball.Query/SignedMessageAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MeditationSummoning(ctx context.Context, in *QueryGetMeditationSummoningRequest, opts ...grpc.CallOption) (*QueryGetMeditationSummoningResponse, error) {
	out := new(QueryGetMeditationSummoningResponse)
	err := c.cc.Invoke(ctx, "/eightball.eightball.Query/MeditationSummoning", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MeditationSummoningAll(ctx context.Context, in *QueryAllMeditationSummoningRequest, opts ...grpc.CallOption) (*QueryAllMeditationSummoningResponse, error) {
	out := new(QueryAllMeditationSummoningResponse)
	err := c.cc.Invoke(ctx, "/eightball.eightball.Query/MeditationSummoningAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Meditation(ctx context.Context, in *QueryGetMeditationRequest, opts ...grpc.CallOption) (*QueryGetMeditationResponse, error) {
	out := new(QueryGetMeditationResponse)
	err := c.cc.Invoke(ctx, "/eightball.eightball.Query/Meditation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MeditationAll(ctx context.Context, in *QueryAllMeditationRequest, opts ...grpc.CallOption) (*QueryAllMeditationResponse, error) {
	out := new(QueryAllMeditationResponse)
	err := c.cc.Invoke(ctx, "/eightball.eightball.Query/MeditationAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MeditationCount(ctx context.Context, in *QueryMeditationCountRequest, opts ...grpc.CallOption) (*QueryMeditationCountResponse, error) {
	out := new(QueryMeditationCountResponse)
	err := c.cc.Invoke(ctx, "/eightball.eightball.Query/MeditationCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Scripture(ctx context.Context, in *QueryGetScriptureRequest, opts ...grpc.CallOption) (*QueryGetScriptureResponse, error) {
	out := new(QueryGetScriptureResponse)
	err := c.cc.Invoke(ctx, "/eightball.eightball.Query/Scripture", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ScriptureAll(ctx context.Context, in *QueryAllScriptureRequest, opts ...grpc.CallOption) (*QueryAllScriptureResponse, error) {
	out := new(QueryAllScriptureResponse)
	err := c.cc.Invoke(ctx, "/eightball.eightball.Query/ScriptureAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ScriptureSignatureRequest(ctx context.Context, in *QueryGetScriptureSignatureRequestRequest, opts ...grpc.CallOption) (*QueryGetScriptureSignatureRequestResponse, error) {
	out := new(QueryGetScriptureSignatureRequestResponse)
	err := c.cc.Invoke(ctx, "/eightball.eightball.Query/ScriptureSignatureRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ScriptureSignatureRequestAll(ctx context.Context, in *QueryAllScriptureSignatureRequestRequest, opts ...grpc.CallOption) (*QueryAllScriptureSignatureRequestResponse, error) {
	out := new(QueryAllScriptureSignatureRequestResponse)
	err := c.cc.Invoke(ctx, "/eightball.eightball.Query/ScriptureSignatureRequestAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ScriptureSignatureShare(ctx context.Context, in *QueryGetScriptureSignatureShareRequest, opts ...grpc.CallOption) (*QueryGetScriptureSignatureShareResponse, error) {
	out := new(QueryGetScriptureSignatureShareResponse)
	err := c.cc.Invoke(ctx, "/eightball.eightball.Query/ScriptureSignatureShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ScriptureSignatureShareAll(ctx context.Context, in *QueryAllScriptureSignatureShareRequest, opts ...grpc.CallOption) (*QueryAllScriptureSignatureShareResponse, error) {
	out := new(QueryAllScriptureSignatureShareResponse)
	err := c.cc.Invoke(ctx, "/eightball.eightball.Query/ScriptureSignatureShareAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SignedScripture(ctx context.Context, in *QueryGetSignedScriptureRequest, opts ...grpc.CallOption) (*QueryGetSignedScriptureResponse, error) {
	out := new(QueryGetSignedScriptureResponse)
	err := c.cc.Invoke(ctx, "/eightball.eightball.Query/SignedScripture", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SignedScriptureAll(ctx context.Context, in *QueryAllSignedScriptureRequest, opts ...grpc.CallOption) (*QueryAllSignedScriptureResponse, error) {
	out := new(QueryAllSignedScriptureResponse)
	err := c.cc.Invoke(ctx, "/eightball.eightball.Query/SignedScriptureAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SignedScriptureList(ctx context.Context, in *QueryGetSignedScriptureListRequest, opts ...grpc.CallOption) (*QueryGetSignedScriptureListResponse, error) {
	out := new(QueryGetSignedScriptureListResponse)
	err := c.cc.Invoke(ctx, "/eightball.eightball.Query/SignedScriptureList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SignedScriptureListAll(ctx context.Context, in *QueryAllSignedScriptureListRequest, opts ...grpc.CallOption) (*QueryAllSignedScriptureListResponse, error) {
	out := new(QueryAllSignedScriptureListResponse)
	err := c.cc.Invoke(ctx, "/eightball.eightball.Query/SignedScriptureListAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Blessing(ctx context.Context, in *QueryGetBlessingRequest, opts ...grpc.CallOption) (*QueryGetBlessingResponse, error) {
	out := new(QueryGetBlessingResponse)
	err := c.cc.Invoke(ctx, "/eightball.eightball.Query/Blessing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BlessingAll(ctx context.Context, in *QueryAllBlessingRequest, opts ...grpc.CallOption) (*QueryAllBlessingResponse, error) {
	out := new(QueryAllBlessingResponse)
	err := c.cc.Invoke(ctx, "/eightball.eightball.Query/BlessingAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BlessingReceipt(ctx context.Context, in *QueryGetBlessingReceiptRequest, opts ...grpc.CallOption) (*QueryGetBlessingReceiptResponse, error) {
	out := new(QueryGetBlessingReceiptResponse)
	err := c.cc.Invoke(ctx, "/eightball.eightball.Query/BlessingReceipt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BlessingReceiptAll(ctx context.Context, in *QueryAllBlessingReceiptRequest, opts ...grpc.CallOption) (*QueryAllBlessingReceiptResponse, error) {
	out := new(QueryAllBlessingReceiptResponse)
	err := c.cc.Invoke(ctx, "/eightball.eightball.Query/BlessingReceiptAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Imploring(ctx context.Context, in *QueryGetImploringRequest, opts ...grpc.CallOption) (*QueryGetImploringResponse, error) {
	out := new(QueryGetImploringResponse)
	err := c.cc.Invoke(ctx, "/eightball.eightball.Query/Imploring", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ImploringAll(ctx context.Context, in *QueryAllImploringRequest, opts ...grpc.CallOption) (*QueryAllImploringResponse, error) {
	out := new(QueryAllImploringResponse)
	err := c.cc.Invoke(ctx, "/eightball.eightball.Query/ImploringAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) KillConjuring(ctx context.Context, in *QueryGetKillConjuringRequest, opts ...grpc.CallOption) (*QueryGetKillConjuringResponse, error) {
	out := new(QueryGetKillConjuringResponse)
	err := c.cc.Invoke(ctx, "/eightball.eightball.Query/KillConjuring", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) KillConjuringAll(ctx context.Context, in *QueryAllKillConjuringRequest, opts ...grpc.CallOption) (*QueryAllKillConjuringResponse, error) {
	out := new(QueryAllKillConjuringResponse)
	err := c.cc.Invoke(ctx, "/eightball.eightball.Query/KillConjuringAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) KillImploring(ctx context.Context, in *QueryGetKillImploringRequest, opts ...grpc.CallOption) (*QueryGetKillImploringResponse, error) {
	out := new(QueryGetKillImploringResponse)
	err := c.cc.Invoke(ctx, "/eightball.eightball.Query/KillImploring", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) KillImploringAll(ctx context.Context, in *QueryAllKillImploringRequest, opts ...grpc.CallOption) (*QueryAllKillImploringResponse, error) {
	out := new(QueryAllKillImploringResponse)
	err := c.cc.Invoke(ctx, "/eightball.eightball.Query/KillImploringAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) KillMeditationSummoning(ctx context.Context, in *QueryGetKillMeditationSummoningRequest, opts ...grpc.CallOption) (*QueryGetKillMeditationSummoningResponse, error) {
	out := new(QueryGetKillMeditationSummoningResponse)
	err := c.cc.Invoke(ctx, "/eightball.eightball.Query/KillMeditationSummoning", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) KillMeditationSummoningAll(ctx context.Context, in *QueryAllKillMeditationSummoningRequest, opts ...grpc.CallOption) (*QueryAllKillMeditationSummoningResponse, error) {
	out := new(QueryAllKillMeditationSummoningResponse)
	err := c.cc.Invoke(ctx, "/eightball.eightball.Query/KillMeditationSummoningAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) KillMagicKeySummoning(ctx context.Context, in *QueryGetKillMagicKeySummoningRequest, opts ...grpc.CallOption) (*QueryGetKillMagicKeySummoningResponse, error) {
	out := new(QueryGetKillMagicKeySummoningResponse)
	err := c.cc.Invoke(ctx, "/eightball.eightball.Query/KillMagicKeySummoning", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) KillMagicKeySummoningAll(ctx context.Context, in *QueryAllKillMagicKeySummoningRequest, opts ...grpc.CallOption) (*QueryAllKillMagicKeySummoningResponse, error) {
	out := new(QueryAllKillMagicKeySummoningResponse)
	err := c.cc.Invoke(ctx, "/eightball.eightball.Query/KillMagicKeySummoningAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) KillScriptureSignatureRequest(ctx context.Context, in *QueryGetKillScriptureSignatureRequestRequest, opts ...grpc.CallOption) (*QueryGetKillScriptureSignatureRequestResponse, error) {
	out := new(QueryGetKillScriptureSignatureRequestResponse)
	err := c.cc.Invoke(ctx, "/eightball.eightball.Query/KillScriptureSignatureRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) KillScriptureSignatureRequestAll(ctx context.Context, in *QueryAllKillScriptureSignatureRequestRequest, opts ...grpc.CallOption) (*QueryAllKillScriptureSignatureRequestResponse, error) {
	out := new(QueryAllKillScriptureSignatureRequestResponse)
	err := c.cc.Invoke(ctx, "/eightball.eightball.Query/KillScriptureSignatureRequestAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) KillSignatureRequest(ctx context.Context, in *QueryGetKillSignatureRequestRequest, opts ...grpc.CallOption) (*QueryGetKillSignatureRequestResponse, error) {
	out := new(QueryGetKillSignatureRequestResponse)
	err := c.cc.Invoke(ctx, "/eightball.eightball.Query/KillSignatureRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) KillSignatureRequestAll(ctx context.Context, in *QueryAllKillSignatureRequestRequest, opts ...grpc.CallOption) (*QueryAllKillSignatureRequestResponse, error) {
	out := new(QueryAllKillSignatureRequestResponse)
	err := c.cc.Invoke(ctx, "/eightball.eightball.Query/KillSignatureRequestAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EncryptedMagicKeyShare(ctx context.Context, in *QueryGetEncryptedMagicKeyShareRequest, opts ...grpc.CallOption) (*QueryGetEncryptedMagicKeyShareResponse, error) {
	out := new(QueryGetEncryptedMagicKeyShareResponse)
	err := c.cc.Invoke(ctx, "/eightball.eightball.Query/EncryptedMagicKeyShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EncryptedMagicKeyShareAll(ctx context.Context, in *QueryAllEncryptedMagicKeyShareRequest, opts ...grpc.CallOption) (*QueryAllEncryptedMagicKeyShareResponse, error) {
	out := new(QueryAllEncryptedMagicKeyShareResponse)
	err := c.cc.Invoke(ctx, "/eightball.eightball.Query/EncryptedMagicKeyShareAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EncryptedPreSign(ctx context.Context, in *QueryGetEncryptedPreSignRequest, opts ...grpc.CallOption) (*QueryGetEncryptedPreSignResponse, error) {
	out := new(QueryGetEncryptedPreSignResponse)
	err := c.cc.Invoke(ctx, "/eightball.eightball.Query/EncryptedPreSign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EncryptedPreSignAll(ctx context.Context, in *QueryAllEncryptedPreSignRequest, opts ...grpc.CallOption) (*QueryAllEncryptedPreSignResponse, error) {
	out := new(QueryAllEncryptedPreSignResponse)
	err := c.cc.Invoke(ctx, "/eightball.eightball.Query/EncryptedPreSignAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a MagicKey by id.
	MagicKey(context.Context, *QueryGetMagicKeyRequest) (*QueryGetMagicKeyResponse, error)
	// Queries a list of MagicKey items.
	MagicKeyAll(context.Context, *QueryAllMagicKeyRequest) (*QueryAllMagicKeyResponse, error)
	// Queries a MagicKeySummoning by id.
	MagicKeySummoning(context.Context, *QueryGetMagicKeySummoningRequest) (*QueryGetMagicKeySummoningResponse, error)
	// Queries a list of MagicKeySummoning items.
	MagicKeySummoningAll(context.Context, *QueryAllMagicKeySummoningRequest) (*QueryAllMagicKeySummoningResponse, error)
	// Queries a HighCouncil by id.
	HighCouncil(context.Context, *QueryGetHighCouncilRequest) (*QueryGetHighCouncilResponse, error)
	// Queries a list of HighCouncil items.
	HighCouncilAll(context.Context, *QueryAllHighCouncilRequest) (*QueryAllHighCouncilResponse, error)
	// Queries a CurrentMagicKey by index.
	CurrentMagicKey(context.Context, *QueryGetCurrentMagicKeyRequest) (*QueryGetCurrentMagicKeyResponse, error)
	// Queries a HighCouncilConjurings by id.
	HighCouncilConjurings(context.Context, *QueryGetHighCouncilConjuringsRequest) (*QueryGetHighCouncilConjuringsResponse, error)
	// Queries a list of HighCouncilConjurings items.
	HighCouncilConjuringsAll(context.Context, *QueryAllHighCouncilConjuringsRequest) (*QueryAllHighCouncilConjuringsResponse, error)
	// Queries a SpiritConjuringPoems by id.
	SpiritConjuringPoems(context.Context, *QueryGetSpiritConjuringPoemsRequest) (*QueryGetSpiritConjuringPoemsResponse, error)
	// Queries a list of SpiritConjuringPoems items.
	SpiritConjuringPoemsAll(context.Context, *QueryAllSpiritConjuringPoemsRequest) (*QueryAllSpiritConjuringPoemsResponse, error)
	// Queries a Verse by id.
	Verse(context.Context, *QueryGetVerseRequest) (*QueryGetVerseResponse, error)
	// Queries a list of Verse items.
	VerseAll(context.Context, *QueryAllVerseRequest) (*QueryAllVerseResponse, error)
	// Queries a list of VerseCount items.
	VerseCount(context.Context, *QueryVerseCountRequest) (*QueryVerseCountResponse, error)
	// Queries a list of MagicKeyCount items.
	MagicKeyCount(context.Context, *QueryMagicKeyCountRequest) (*QueryMagicKeyCountResponse, error)
	// Queries a Vision by id.
	Vision(context.Context, *QueryGetVisionRequest) (*QueryGetVisionResponse, error)
	// Queries a list of Vision items.
	VisionAll(context.Context, *QueryAllVisionRequest) (*QueryAllVisionResponse, error)
	// Queries a Message by id.
	Message(context.Context, *QueryGetMessageRequest) (*QueryGetMessageResponse, error)
	// Queries a list of Message items.
	MessageAll(context.Context, *QueryAllMessageRequest) (*QueryAllMessageResponse, error)
	// Queries a SignatureRequest by id.
	SignatureRequest(context.Context, *QueryGetSignatureRequestRequest) (*QueryGetSignatureRequestResponse, error)
	// Queries a list of SignatureRequest items.
	SignatureRequestAll(context.Context, *QueryAllSignatureRequestRequest) (*QueryAllSignatureRequestResponse, error)
	// Queries a SignatureShare by id.
	SignatureShare(context.Context, *QueryGetSignatureShareRequest) (*QueryGetSignatureShareResponse, error)
	// Queries a list of SignatureShare items.
	SignatureShareAll(context.Context, *QueryAllSignatureShareRequest) (*QueryAllSignatureShareResponse, error)
	// Queries a SignedMessage by id.
	SignedMessage(context.Context, *QueryGetSignedMessageRequest) (*QueryGetSignedMessageResponse, error)
	// Queries a list of SignedMessage items.
	SignedMessageAll(context.Context, *QueryAllSignedMessageRequest) (*QueryAllSignedMessageResponse, error)
	// Queries a MeditationSummoning by id.
	MeditationSummoning(context.Context, *QueryGetMeditationSummoningRequest) (*QueryGetMeditationSummoningResponse, error)
	// Queries a list of MeditationSummoning items.
	MeditationSummoningAll(context.Context, *QueryAllMeditationSummoningRequest) (*QueryAllMeditationSummoningResponse, error)
	// Queries a Meditation by id.
	Meditation(context.Context, *QueryGetMeditationRequest) (*QueryGetMeditationResponse, error)
	// Queries a list of Meditation items.
	MeditationAll(context.Context, *QueryAllMeditationRequest) (*QueryAllMeditationResponse, error)
	// Queries a list of MeditationCount items.
	MeditationCount(context.Context, *QueryMeditationCountRequest) (*QueryMeditationCountResponse, error)
	// Queries a Scripture by index.
	Scripture(context.Context, *QueryGetScriptureRequest) (*QueryGetScriptureResponse, error)
	// Queries a list of Scripture items.
	ScriptureAll(context.Context, *QueryAllScriptureRequest) (*QueryAllScriptureResponse, error)
	// Queries a ScriptureSignatureRequest by id.
	ScriptureSignatureRequest(context.Context, *QueryGetScriptureSignatureRequestRequest) (*QueryGetScriptureSignatureRequestResponse, error)
	// Queries a list of ScriptureSignatureRequest items.
	ScriptureSignatureRequestAll(context.Context, *QueryAllScriptureSignatureRequestRequest) (*QueryAllScriptureSignatureRequestResponse, error)
	// Queries a ScriptureSignatureShare by id.
	ScriptureSignatureShare(context.Context, *QueryGetScriptureSignatureShareRequest) (*QueryGetScriptureSignatureShareResponse, error)
	// Queries a list of ScriptureSignatureShare items.
	ScriptureSignatureShareAll(context.Context, *QueryAllScriptureSignatureShareRequest) (*QueryAllScriptureSignatureShareResponse, error)
	// Queries a SignedScripture by index.
	SignedScripture(context.Context, *QueryGetSignedScriptureRequest) (*QueryGetSignedScriptureResponse, error)
	// Queries a list of SignedScripture items.
	SignedScriptureAll(context.Context, *QueryAllSignedScriptureRequest) (*QueryAllSignedScriptureResponse, error)
	// Queries a SignedScriptureList by id.
	SignedScriptureList(context.Context, *QueryGetSignedScriptureListRequest) (*QueryGetSignedScriptureListResponse, error)
	// Queries a list of SignedScriptureList items.
	SignedScriptureListAll(context.Context, *QueryAllSignedScriptureListRequest) (*QueryAllSignedScriptureListResponse, error)
	// Queries a list of Blessing items.
	Blessing(context.Context, *QueryGetBlessingRequest) (*QueryGetBlessingResponse, error)
	BlessingAll(context.Context, *QueryAllBlessingRequest) (*QueryAllBlessingResponse, error)
	// Queries a list of BlessingReceipt items.
	BlessingReceipt(context.Context, *QueryGetBlessingReceiptRequest) (*QueryGetBlessingReceiptResponse, error)
	BlessingReceiptAll(context.Context, *QueryAllBlessingReceiptRequest) (*QueryAllBlessingReceiptResponse, error)
	// Queries a list of Imploring items.
	Imploring(context.Context, *QueryGetImploringRequest) (*QueryGetImploringResponse, error)
	ImploringAll(context.Context, *QueryAllImploringRequest) (*QueryAllImploringResponse, error)
	// Queries a list of KillConjuring items.
	KillConjuring(context.Context, *QueryGetKillConjuringRequest) (*QueryGetKillConjuringResponse, error)
	KillConjuringAll(context.Context, *QueryAllKillConjuringRequest) (*QueryAllKillConjuringResponse, error)
	// Queries a list of KillImploring items.
	KillImploring(context.Context, *QueryGetKillImploringRequest) (*QueryGetKillImploringResponse, error)
	KillImploringAll(context.Context, *QueryAllKillImploringRequest) (*QueryAllKillImploringResponse, error)
	// Queries a list of KillMeditationSummoning items.
	KillMeditationSummoning(context.Context, *QueryGetKillMeditationSummoningRequest) (*QueryGetKillMeditationSummoningResponse, error)
	KillMeditationSummoningAll(context.Context, *QueryAllKillMeditationSummoningRequest) (*QueryAllKillMeditationSummoningResponse, error)
	// Queries a list of KillMagicKeySummoning items.
	KillMagicKeySummoning(context.Context, *QueryGetKillMagicKeySummoningRequest) (*QueryGetKillMagicKeySummoningResponse, error)
	KillMagicKeySummoningAll(context.Context, *QueryAllKillMagicKeySummoningRequest) (*QueryAllKillMagicKeySummoningResponse, error)
	// Queries a list of KillScriptureSignatureRequest items.
	KillScriptureSignatureRequest(context.Context, *QueryGetKillScriptureSignatureRequestRequest) (*QueryGetKillScriptureSignatureRequestResponse, error)
	KillScriptureSignatureRequestAll(context.Context, *QueryAllKillScriptureSignatureRequestRequest) (*QueryAllKillScriptureSignatureRequestResponse, error)
	// Queries a list of KillSignatureRequest items.
	KillSignatureRequest(context.Context, *QueryGetKillSignatureRequestRequest) (*QueryGetKillSignatureRequestResponse, error)
	KillSignatureRequestAll(context.Context, *QueryAllKillSignatureRequestRequest) (*QueryAllKillSignatureRequestResponse, error)
	// Queries a list of EncryptedMagicKeyShare items.
	EncryptedMagicKeyShare(context.Context, *QueryGetEncryptedMagicKeyShareRequest) (*QueryGetEncryptedMagicKeyShareResponse, error)
	EncryptedMagicKeyShareAll(context.Context, *QueryAllEncryptedMagicKeyShareRequest) (*QueryAllEncryptedMagicKeyShareResponse, error)
	// Queries a list of EncryptedPreSign items.
	EncryptedPreSign(context.Context, *QueryGetEncryptedPreSignRequest) (*QueryGetEncryptedPreSignResponse, error)
	EncryptedPreSignAll(context.Context, *QueryAllEncryptedPreSignRequest) (*QueryAllEncryptedPreSignResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) MagicKey(ctx context.Context, req *QueryGetMagicKeyRequest) (*QueryGetMagicKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MagicKey not implemented")
}
func (*UnimplementedQueryServer) MagicKeyAll(ctx context.Context, req *QueryAllMagicKeyRequest) (*QueryAllMagicKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MagicKeyAll not implemented")
}
func (*UnimplementedQueryServer) MagicKeySummoning(ctx context.Context, req *QueryGetMagicKeySummoningRequest) (*QueryGetMagicKeySummoningResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MagicKeySummoning not implemented")
}
func (*UnimplementedQueryServer) MagicKeySummoningAll(ctx context.Context, req *QueryAllMagicKeySummoningRequest) (*QueryAllMagicKeySummoningResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MagicKeySummoningAll not implemented")
}
func (*UnimplementedQueryServer) HighCouncil(ctx context.Context, req *QueryGetHighCouncilRequest) (*QueryGetHighCouncilResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HighCouncil not implemented")
}
func (*UnimplementedQueryServer) HighCouncilAll(ctx context.Context, req *QueryAllHighCouncilRequest) (*QueryAllHighCouncilResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HighCouncilAll not implemented")
}
func (*UnimplementedQueryServer) CurrentMagicKey(ctx context.Context, req *QueryGetCurrentMagicKeyRequest) (*QueryGetCurrentMagicKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentMagicKey not implemented")
}
func (*UnimplementedQueryServer) HighCouncilConjurings(ctx context.Context, req *QueryGetHighCouncilConjuringsRequest) (*QueryGetHighCouncilConjuringsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HighCouncilConjurings not implemented")
}
func (*UnimplementedQueryServer) HighCouncilConjuringsAll(ctx context.Context, req *QueryAllHighCouncilConjuringsRequest) (*QueryAllHighCouncilConjuringsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HighCouncilConjuringsAll not implemented")
}
func (*UnimplementedQueryServer) SpiritConjuringPoems(ctx context.Context, req *QueryGetSpiritConjuringPoemsRequest) (*QueryGetSpiritConjuringPoemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpiritConjuringPoems not implemented")
}
func (*UnimplementedQueryServer) SpiritConjuringPoemsAll(ctx context.Context, req *QueryAllSpiritConjuringPoemsRequest) (*QueryAllSpiritConjuringPoemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpiritConjuringPoemsAll not implemented")
}
func (*UnimplementedQueryServer) Verse(ctx context.Context, req *QueryGetVerseRequest) (*QueryGetVerseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verse not implemented")
}
func (*UnimplementedQueryServer) VerseAll(ctx context.Context, req *QueryAllVerseRequest) (*QueryAllVerseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerseAll not implemented")
}
func (*UnimplementedQueryServer) VerseCount(ctx context.Context, req *QueryVerseCountRequest) (*QueryVerseCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerseCount not implemented")
}
func (*UnimplementedQueryServer) MagicKeyCount(ctx context.Context, req *QueryMagicKeyCountRequest) (*QueryMagicKeyCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MagicKeyCount not implemented")
}
func (*UnimplementedQueryServer) Vision(ctx context.Context, req *QueryGetVisionRequest) (*QueryGetVisionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Vision not implemented")
}
func (*UnimplementedQueryServer) VisionAll(ctx context.Context, req *QueryAllVisionRequest) (*QueryAllVisionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VisionAll not implemented")
}
func (*UnimplementedQueryServer) Message(ctx context.Context, req *QueryGetMessageRequest) (*QueryGetMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Message not implemented")
}
func (*UnimplementedQueryServer) MessageAll(ctx context.Context, req *QueryAllMessageRequest) (*QueryAllMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageAll not implemented")
}
func (*UnimplementedQueryServer) SignatureRequest(ctx context.Context, req *QueryGetSignatureRequestRequest) (*QueryGetSignatureRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignatureRequest not implemented")
}
func (*UnimplementedQueryServer) SignatureRequestAll(ctx context.Context, req *QueryAllSignatureRequestRequest) (*QueryAllSignatureRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignatureRequestAll not implemented")
}
func (*UnimplementedQueryServer) SignatureShare(ctx context.Context, req *QueryGetSignatureShareRequest) (*QueryGetSignatureShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignatureShare not implemented")
}
func (*UnimplementedQueryServer) SignatureShareAll(ctx context.Context, req *QueryAllSignatureShareRequest) (*QueryAllSignatureShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignatureShareAll not implemented")
}
func (*UnimplementedQueryServer) SignedMessage(ctx context.Context, req *QueryGetSignedMessageRequest) (*QueryGetSignedMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignedMessage not implemented")
}
func (*UnimplementedQueryServer) SignedMessageAll(ctx context.Context, req *QueryAllSignedMessageRequest) (*QueryAllSignedMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignedMessageAll not implemented")
}
func (*UnimplementedQueryServer) MeditationSummoning(ctx context.Context, req *QueryGetMeditationSummoningRequest) (*QueryGetMeditationSummoningResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MeditationSummoning not implemented")
}
func (*UnimplementedQueryServer) MeditationSummoningAll(ctx context.Context, req *QueryAllMeditationSummoningRequest) (*QueryAllMeditationSummoningResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MeditationSummoningAll not implemented")
}
func (*UnimplementedQueryServer) Meditation(ctx context.Context, req *QueryGetMeditationRequest) (*QueryGetMeditationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Meditation not implemented")
}
func (*UnimplementedQueryServer) MeditationAll(ctx context.Context, req *QueryAllMeditationRequest) (*QueryAllMeditationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MeditationAll not implemented")
}
func (*UnimplementedQueryServer) MeditationCount(ctx context.Context, req *QueryMeditationCountRequest) (*QueryMeditationCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MeditationCount not implemented")
}
func (*UnimplementedQueryServer) Scripture(ctx context.Context, req *QueryGetScriptureRequest) (*QueryGetScriptureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Scripture not implemented")
}
func (*UnimplementedQueryServer) ScriptureAll(ctx context.Context, req *QueryAllScriptureRequest) (*QueryAllScriptureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScriptureAll not implemented")
}
func (*UnimplementedQueryServer) ScriptureSignatureRequest(ctx context.Context, req *QueryGetScriptureSignatureRequestRequest) (*QueryGetScriptureSignatureRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScriptureSignatureRequest not implemented")
}
func (*UnimplementedQueryServer) ScriptureSignatureRequestAll(ctx context.Context, req *QueryAllScriptureSignatureRequestRequest) (*QueryAllScriptureSignatureRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScriptureSignatureRequestAll not implemented")
}
func (*UnimplementedQueryServer) ScriptureSignatureShare(ctx context.Context, req *QueryGetScriptureSignatureShareRequest) (*QueryGetScriptureSignatureShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScriptureSignatureShare not implemented")
}
func (*UnimplementedQueryServer) ScriptureSignatureShareAll(ctx context.Context, req *QueryAllScriptureSignatureShareRequest) (*QueryAllScriptureSignatureShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScriptureSignatureShareAll not implemented")
}
func (*UnimplementedQueryServer) SignedScripture(ctx context.Context, req *QueryGetSignedScriptureRequest) (*QueryGetSignedScriptureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignedScripture not implemented")
}
func (*UnimplementedQueryServer) SignedScriptureAll(ctx context.Context, req *QueryAllSignedScriptureRequest) (*QueryAllSignedScriptureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignedScriptureAll not implemented")
}
func (*UnimplementedQueryServer) SignedScriptureList(ctx context.Context, req *QueryGetSignedScriptureListRequest) (*QueryGetSignedScriptureListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignedScriptureList not implemented")
}
func (*UnimplementedQueryServer) SignedScriptureListAll(ctx context.Context, req *QueryAllSignedScriptureListRequest) (*QueryAllSignedScriptureListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignedScriptureListAll not implemented")
}
func (*UnimplementedQueryServer) Blessing(ctx context.Context, req *QueryGetBlessingRequest) (*QueryGetBlessingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Blessing not implemented")
}
func (*UnimplementedQueryServer) BlessingAll(ctx context.Context, req *QueryAllBlessingRequest) (*QueryAllBlessingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlessingAll not implemented")
}
func (*UnimplementedQueryServer) BlessingReceipt(ctx context.Context, req *QueryGetBlessingReceiptRequest) (*QueryGetBlessingReceiptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlessingReceipt not implemented")
}
func (*UnimplementedQueryServer) BlessingReceiptAll(ctx context.Context, req *QueryAllBlessingReceiptRequest) (*QueryAllBlessingReceiptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlessingReceiptAll not implemented")
}
func (*UnimplementedQueryServer) Imploring(ctx context.Context, req *QueryGetImploringRequest) (*QueryGetImploringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Imploring not implemented")
}
func (*UnimplementedQueryServer) ImploringAll(ctx context.Context, req *QueryAllImploringRequest) (*QueryAllImploringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImploringAll not implemented")
}
func (*UnimplementedQueryServer) KillConjuring(ctx context.Context, req *QueryGetKillConjuringRequest) (*QueryGetKillConjuringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KillConjuring not implemented")
}
func (*UnimplementedQueryServer) KillConjuringAll(ctx context.Context, req *QueryAllKillConjuringRequest) (*QueryAllKillConjuringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KillConjuringAll not implemented")
}
func (*UnimplementedQueryServer) KillImploring(ctx context.Context, req *QueryGetKillImploringRequest) (*QueryGetKillImploringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KillImploring not implemented")
}
func (*UnimplementedQueryServer) KillImploringAll(ctx context.Context, req *QueryAllKillImploringRequest) (*QueryAllKillImploringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KillImploringAll not implemented")
}
func (*UnimplementedQueryServer) KillMeditationSummoning(ctx context.Context, req *QueryGetKillMeditationSummoningRequest) (*QueryGetKillMeditationSummoningResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KillMeditationSummoning not implemented")
}
func (*UnimplementedQueryServer) KillMeditationSummoningAll(ctx context.Context, req *QueryAllKillMeditationSummoningRequest) (*QueryAllKillMeditationSummoningResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KillMeditationSummoningAll not implemented")
}
func (*UnimplementedQueryServer) KillMagicKeySummoning(ctx context.Context, req *QueryGetKillMagicKeySummoningRequest) (*QueryGetKillMagicKeySummoningResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KillMagicKeySummoning not implemented")
}
func (*UnimplementedQueryServer) KillMagicKeySummoningAll(ctx context.Context, req *QueryAllKillMagicKeySummoningRequest) (*QueryAllKillMagicKeySummoningResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KillMagicKeySummoningAll not implemented")
}
func (*UnimplementedQueryServer) KillScriptureSignatureRequest(ctx context.Context, req *QueryGetKillScriptureSignatureRequestRequest) (*QueryGetKillScriptureSignatureRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KillScriptureSignatureRequest not implemented")
}
func (*UnimplementedQueryServer) KillScriptureSignatureRequestAll(ctx context.Context, req *QueryAllKillScriptureSignatureRequestRequest) (*QueryAllKillScriptureSignatureRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KillScriptureSignatureRequestAll not implemented")
}
func (*UnimplementedQueryServer) KillSignatureRequest(ctx context.Context, req *QueryGetKillSignatureRequestRequest) (*QueryGetKillSignatureRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KillSignatureRequest not implemented")
}
func (*UnimplementedQueryServer) KillSignatureRequestAll(ctx context.Context, req *QueryAllKillSignatureRequestRequest) (*QueryAllKillSignatureRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KillSignatureRequestAll not implemented")
}
func (*UnimplementedQueryServer) EncryptedMagicKeyShare(ctx context.Context, req *QueryGetEncryptedMagicKeyShareRequest) (*QueryGetEncryptedMagicKeyShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncryptedMagicKeyShare not implemented")
}
func (*UnimplementedQueryServer) EncryptedMagicKeyShareAll(ctx context.Context, req *QueryAllEncryptedMagicKeyShareRequest) (*QueryAllEncryptedMagicKeyShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncryptedMagicKeyShareAll not implemented")
}
func (*UnimplementedQueryServer) EncryptedPreSign(ctx context.Context, req *QueryGetEncryptedPreSignRequest) (*QueryGetEncryptedPreSignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncryptedPreSign not implemented")
}
func (*UnimplementedQueryServer) EncryptedPreSignAll(ctx context.Context, req *QueryAllEncryptedPreSignRequest) (*QueryAllEncryptedPreSignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncryptedPreSignAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eightball.eightball.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MagicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetMagicKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MagicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eightball.eightball.Query/MagicKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MagicKey(ctx, req.(*QueryGetMagicKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MagicKeyAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllMagicKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MagicKeyAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eightball.eightball.Query/MagicKeyAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MagicKeyAll(ctx, req.(*QueryAllMagicKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MagicKeySummoning_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetMagicKeySummoningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MagicKeySummoning(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eightball.eightball.Query/MagicKeySummoning",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MagicKeySummoning(ctx, req.(*QueryGetMagicKeySummoningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MagicKeySummoningAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllMagicKeySummoningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MagicKeySummoningAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eightball.eightball.Query/MagicKeySummoningAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MagicKeySummoningAll(ctx, req.(*QueryAllMagicKeySummoningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HighCouncil_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetHighCouncilRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HighCouncil(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eightball.eightball.Query/HighCouncil",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HighCouncil(ctx, req.(*QueryGetHighCouncilRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HighCouncilAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllHighCouncilRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HighCouncilAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eightball.eightball.Query/HighCouncilAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HighCouncilAll(ctx, req.(*QueryAllHighCouncilRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CurrentMagicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCurrentMagicKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CurrentMagicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eightball.eightball.Query/CurrentMagicKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CurrentMagicKey(ctx, req.(*QueryGetCurrentMagicKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HighCouncilConjurings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetHighCouncilConjuringsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HighCouncilConjurings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eightball.eightball.Query/HighCouncilConjurings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HighCouncilConjurings(ctx, req.(*QueryGetHighCouncilConjuringsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HighCouncilConjuringsAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllHighCouncilConjuringsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HighCouncilConjuringsAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eightball.eightball.Query/HighCouncilConjuringsAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HighCouncilConjuringsAll(ctx, req.(*QueryAllHighCouncilConjuringsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SpiritConjuringPoems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSpiritConjuringPoemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SpiritConjuringPoems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eightball.eightball.Query/SpiritConjuringPoems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SpiritConjuringPoems(ctx, req.(*QueryGetSpiritConjuringPoemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SpiritConjuringPoemsAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllSpiritConjuringPoemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SpiritConjuringPoemsAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eightball.eightball.Query/SpiritConjuringPoemsAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SpiritConjuringPoemsAll(ctx, req.(*QueryAllSpiritConjuringPoemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Verse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetVerseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Verse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eightball.eightball.Query/Verse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Verse(ctx, req.(*QueryGetVerseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VerseAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllVerseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VerseAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eightball.eightball.Query/VerseAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VerseAll(ctx, req.(*QueryAllVerseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VerseCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVerseCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VerseCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eightball.eightball.Query/VerseCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VerseCount(ctx, req.(*QueryVerseCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MagicKeyCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMagicKeyCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MagicKeyCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eightball.eightball.Query/MagicKeyCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MagicKeyCount(ctx, req.(*QueryMagicKeyCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Vision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetVisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Vision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eightball.eightball.Query/Vision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Vision(ctx, req.(*QueryGetVisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VisionAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllVisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VisionAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eightball.eightball.Query/VisionAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VisionAll(ctx, req.(*QueryAllVisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Message_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Message(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eightball.eightball.Query/Message",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Message(ctx, req.(*QueryGetMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MessageAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MessageAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eightball.eightball.Query/MessageAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MessageAll(ctx, req.(*QueryAllMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SignatureRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSignatureRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SignatureRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eightball.eightball.Query/SignatureRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SignatureRequest(ctx, req.(*QueryGetSignatureRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SignatureRequestAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllSignatureRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SignatureRequestAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eightball.eightball.Query/SignatureRequestAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SignatureRequestAll(ctx, req.(*QueryAllSignatureRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SignatureShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSignatureShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SignatureShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eightball.eightball.Query/SignatureShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SignatureShare(ctx, req.(*QueryGetSignatureShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SignatureShareAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllSignatureShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SignatureShareAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eightball.eightball.Query/SignatureShareAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SignatureShareAll(ctx, req.(*QueryAllSignatureShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SignedMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSignedMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SignedMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eightball.eightball.Query/SignedMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SignedMessage(ctx, req.(*QueryGetSignedMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SignedMessageAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllSignedMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SignedMessageAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eightball.eightball.Query/SignedMessageAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SignedMessageAll(ctx, req.(*QueryAllSignedMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MeditationSummoning_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetMeditationSummoningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MeditationSummoning(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eightball.eightball.Query/MeditationSummoning",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MeditationSummoning(ctx, req.(*QueryGetMeditationSummoningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MeditationSummoningAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllMeditationSummoningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MeditationSummoningAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eightball.eightball.Query/MeditationSummoningAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MeditationSummoningAll(ctx, req.(*QueryAllMeditationSummoningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Meditation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetMeditationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Meditation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eightball.eightball.Query/Meditation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Meditation(ctx, req.(*QueryGetMeditationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MeditationAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllMeditationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MeditationAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eightball.eightball.Query/MeditationAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MeditationAll(ctx, req.(*QueryAllMeditationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MeditationCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMeditationCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MeditationCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eightball.eightball.Query/MeditationCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MeditationCount(ctx, req.(*QueryMeditationCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Scripture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetScriptureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Scripture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eightball.eightball.Query/Scripture",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Scripture(ctx, req.(*QueryGetScriptureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ScriptureAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllScriptureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ScriptureAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eightball.eightball.Query/ScriptureAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ScriptureAll(ctx, req.(*QueryAllScriptureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ScriptureSignatureRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetScriptureSignatureRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ScriptureSignatureRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eightball.eightball.Query/ScriptureSignatureRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ScriptureSignatureRequest(ctx, req.(*QueryGetScriptureSignatureRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ScriptureSignatureRequestAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllScriptureSignatureRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ScriptureSignatureRequestAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eightball.eightball.Query/ScriptureSignatureRequestAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ScriptureSignatureRequestAll(ctx, req.(*QueryAllScriptureSignatureRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ScriptureSignatureShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetScriptureSignatureShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ScriptureSignatureShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eightball.eightball.Query/ScriptureSignatureShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ScriptureSignatureShare(ctx, req.(*QueryGetScriptureSignatureShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ScriptureSignatureShareAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllScriptureSignatureShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ScriptureSignatureShareAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eightball.eightball.Query/ScriptureSignatureShareAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ScriptureSignatureShareAll(ctx, req.(*QueryAllScriptureSignatureShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SignedScripture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSignedScriptureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SignedScripture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eightball.eightball.Query/SignedScripture",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SignedScripture(ctx, req.(*QueryGetSignedScriptureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SignedScriptureAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllSignedScriptureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SignedScriptureAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eightball.eightball.Query/SignedScriptureAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SignedScriptureAll(ctx, req.(*QueryAllSignedScriptureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SignedScriptureList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSignedScriptureListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SignedScriptureList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eightball.eightball.Query/SignedScriptureList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SignedScriptureList(ctx, req.(*QueryGetSignedScriptureListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SignedScriptureListAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllSignedScriptureListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SignedScriptureListAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eightball.eightball.Query/SignedScriptureListAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SignedScriptureListAll(ctx, req.(*QueryAllSignedScriptureListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Blessing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetBlessingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Blessing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eightball.eightball.Query/Blessing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Blessing(ctx, req.(*QueryGetBlessingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BlessingAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllBlessingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BlessingAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eightball.eightball.Query/BlessingAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BlessingAll(ctx, req.(*QueryAllBlessingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BlessingReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetBlessingReceiptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BlessingReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eightball.eightball.Query/BlessingReceipt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BlessingReceipt(ctx, req.(*QueryGetBlessingReceiptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BlessingReceiptAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllBlessingReceiptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BlessingReceiptAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eightball.eightball.Query/BlessingReceiptAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BlessingReceiptAll(ctx, req.(*QueryAllBlessingReceiptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Imploring_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetImploringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Imploring(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eightball.eightball.Query/Imploring",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Imploring(ctx, req.(*QueryGetImploringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ImploringAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllImploringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ImploringAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eightball.eightball.Query/ImploringAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ImploringAll(ctx, req.(*QueryAllImploringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_KillConjuring_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetKillConjuringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).KillConjuring(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eightball.eightball.Query/KillConjuring",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).KillConjuring(ctx, req.(*QueryGetKillConjuringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_KillConjuringAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllKillConjuringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).KillConjuringAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eightball.eightball.Query/KillConjuringAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).KillConjuringAll(ctx, req.(*QueryAllKillConjuringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_KillImploring_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetKillImploringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).KillImploring(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eightball.eightball.Query/KillImploring",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).KillImploring(ctx, req.(*QueryGetKillImploringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_KillImploringAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllKillImploringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).KillImploringAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eightball.eightball.Query/KillImploringAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).KillImploringAll(ctx, req.(*QueryAllKillImploringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_KillMeditationSummoning_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetKillMeditationSummoningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).KillMeditationSummoning(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eightball.eightball.Query/KillMeditationSummoning",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).KillMeditationSummoning(ctx, req.(*QueryGetKillMeditationSummoningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_KillMeditationSummoningAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllKillMeditationSummoningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).KillMeditationSummoningAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eightball.eightball.Query/KillMeditationSummoningAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).KillMeditationSummoningAll(ctx, req.(*QueryAllKillMeditationSummoningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_KillMagicKeySummoning_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetKillMagicKeySummoningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).KillMagicKeySummoning(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eightball.eightball.Query/KillMagicKeySummoning",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).KillMagicKeySummoning(ctx, req.(*QueryGetKillMagicKeySummoningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_KillMagicKeySummoningAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllKillMagicKeySummoningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).KillMagicKeySummoningAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eightball.eightball.Query/KillMagicKeySummoningAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).KillMagicKeySummoningAll(ctx, req.(*QueryAllKillMagicKeySummoningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_KillScriptureSignatureRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetKillScriptureSignatureRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).KillScriptureSignatureRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eightball.eightball.Query/KillScriptureSignatureRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).KillScriptureSignatureRequest(ctx, req.(*QueryGetKillScriptureSignatureRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_KillScriptureSignatureRequestAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllKillScriptureSignatureRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).KillScriptureSignatureRequestAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eightball.eightball.Query/KillScriptureSignatureRequestAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).KillScriptureSignatureRequestAll(ctx, req.(*QueryAllKillScriptureSignatureRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_KillSignatureRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetKillSignatureRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).KillSignatureRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eightball.eightball.Query/KillSignatureRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).KillSignatureRequest(ctx, req.(*QueryGetKillSignatureRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_KillSignatureRequestAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllKillSignatureRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).KillSignatureRequestAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eightball.eightball.Query/KillSignatureRequestAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).KillSignatureRequestAll(ctx, req.(*QueryAllKillSignatureRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EncryptedMagicKeyShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetEncryptedMagicKeyShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EncryptedMagicKeyShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eightball.eightball.Query/EncryptedMagicKeyShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EncryptedMagicKeyShare(ctx, req.(*QueryGetEncryptedMagicKeyShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EncryptedMagicKeyShareAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllEncryptedMagicKeyShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EncryptedMagicKeyShareAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eightball.eightball.Query/EncryptedMagicKeyShareAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EncryptedMagicKeyShareAll(ctx, req.(*QueryAllEncryptedMagicKeyShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EncryptedPreSign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetEncryptedPreSignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EncryptedPreSign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eightball.eightball.Query/EncryptedPreSign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EncryptedPreSign(ctx, req.(*QueryGetEncryptedPreSignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EncryptedPreSignAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllEncryptedPreSignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EncryptedPreSignAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eightball.eightball.Query/EncryptedPreSignAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EncryptedPreSignAll(ctx, req.(*QueryAllEncryptedPreSignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "eightball.eightball.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "MagicKey",
			Handler:    _Query_MagicKey_Handler,
		},
		{
			MethodName: "MagicKeyAll",
			Handler:    _Query_MagicKeyAll_Handler,
		},
		{
			MethodName: "MagicKeySummoning",
			Handler:    _Query_MagicKeySummoning_Handler,
		},
		{
			MethodName: "MagicKeySummoningAll",
			Handler:    _Query_MagicKeySummoningAll_Handler,
		},
		{
			MethodName: "HighCouncil",
			Handler:    _Query_HighCouncil_Handler,
		},
		{
			MethodName: "HighCouncilAll",
			Handler:    _Query_HighCouncilAll_Handler,
		},
		{
			MethodName: "CurrentMagicKey",
			Handler:    _Query_CurrentMagicKey_Handler,
		},
		{
			MethodName: "HighCouncilConjurings",
			Handler:    _Query_HighCouncilConjurings_Handler,
		},
		{
			MethodName: "HighCouncilConjuringsAll",
			Handler:    _Query_HighCouncilConjuringsAll_Handler,
		},
		{
			MethodName: "SpiritConjuringPoems",
			Handler:    _Query_SpiritConjuringPoems_Handler,
		},
		{
			MethodName: "SpiritConjuringPoemsAll",
			Handler:    _Query_SpiritConjuringPoemsAll_Handler,
		},
		{
			MethodName: "Verse",
			Handler:    _Query_Verse_Handler,
		},
		{
			MethodName: "VerseAll",
			Handler:    _Query_VerseAll_Handler,
		},
		{
			MethodName: "VerseCount",
			Handler:    _Query_VerseCount_Handler,
		},
		{
			MethodName: "MagicKeyCount",
			Handler:    _Query_MagicKeyCount_Handler,
		},
		{
			MethodName: "Vision",
			Handler:    _Query_Vision_Handler,
		},
		{
			MethodName: "VisionAll",
			Handler:    _Query_VisionAll_Handler,
		},
		{
			MethodName: "Message",
			Handler:    _Query_Message_Handler,
		},
		{
			MethodName: "MessageAll",
			Handler:    _Query_MessageAll_Handler,
		},
		{
			MethodName: "SignatureRequest",
			Handler:    _Query_SignatureRequest_Handler,
		},
		{
			MethodName: "SignatureRequestAll",
			Handler:    _Query_SignatureRequestAll_Handler,
		},
		{
			MethodName: "SignatureShare",
			Handler:    _Query_SignatureShare_Handler,
		},
		{
			MethodName: "SignatureShareAll",
			Handler:    _Query_SignatureShareAll_Handler,
		},
		{
			MethodName: "SignedMessage",
			Handler:    _Query_SignedMessage_Handler,
		},
		{
			MethodName: "SignedMessageAll",
			Handler:    _Query_SignedMessageAll_Handler,
		},
		{
			MethodName: "MeditationSummoning",
			Handler:    _Query_MeditationSummoning_Handler,
		},
		{
			MethodName: "MeditationSummoningAll",
			Handler:    _Query_MeditationSummoningAll_Handler,
		},
		{
			MethodName: "Meditation",
			Handler:    _Query_Meditation_Handler,
		},
		{
			MethodName: "MeditationAll",
			Handler:    _Query_MeditationAll_Handler,
		},
		{
			MethodName: "MeditationCount",
			Handler:    _Query_MeditationCount_Handler,
		},
		{
			MethodName: "Scripture",
			Handler:    _Query_Scripture_Handler,
		},
		{
			MethodName: "ScriptureAll",
			Handler:    _Query_ScriptureAll_Handler,
		},
		{
			MethodName: "ScriptureSignatureRequest",
			Handler:    _Query_ScriptureSignatureRequest_Handler,
		},
		{
			MethodName: "ScriptureSignatureRequestAll",
			Handler:    _Query_ScriptureSignatureRequestAll_Handler,
		},
		{
			MethodName: "ScriptureSignatureShare",
			Handler:    _Query_ScriptureSignatureShare_Handler,
		},
		{
			MethodName: "ScriptureSignatureShareAll",
			Handler:    _Query_ScriptureSignatureShareAll_Handler,
		},
		{
			MethodName: "SignedScripture",
			Handler:    _Query_SignedScripture_Handler,
		},
		{
			MethodName: "SignedScriptureAll",
			Handler:    _Query_SignedScriptureAll_Handler,
		},
		{
			MethodName: "SignedScriptureList",
			Handler:    _Query_SignedScriptureList_Handler,
		},
		{
			MethodName: "SignedScriptureListAll",
			Handler:    _Query_SignedScriptureListAll_Handler,
		},
		{
			MethodName: "Blessing",
			Handler:    _Query_Blessing_Handler,
		},
		{
			MethodName: "BlessingAll",
			Handler:    _Query_BlessingAll_Handler,
		},
		{
			MethodName: "BlessingReceipt",
			Handler:    _Query_BlessingReceipt_Handler,
		},
		{
			MethodName: "BlessingReceiptAll",
			Handler:    _Query_BlessingReceiptAll_Handler,
		},
		{
			MethodName: "Imploring",
			Handler:    _Query_Imploring_Handler,
		},
		{
			MethodName: "ImploringAll",
			Handler:    _Query_ImploringAll_Handler,
		},
		{
			MethodName: "KillConjuring",
			Handler:    _Query_KillConjuring_Handler,
		},
		{
			MethodName: "KillConjuringAll",
			Handler:    _Query_KillConjuringAll_Handler,
		},
		{
			MethodName: "KillImploring",
			Handler:    _Query_KillImploring_Handler,
		},
		{
			MethodName: "KillImploringAll",
			Handler:    _Query_KillImploringAll_Handler,
		},
		{
			MethodName: "KillMeditationSummoning",
			Handler:    _Query_KillMeditationSummoning_Handler,
		},
		{
			MethodName: "KillMeditationSummoningAll",
			Handler:    _Query_KillMeditationSummoningAll_Handler,
		},
		{
			MethodName: "KillMagicKeySummoning",
			Handler:    _Query_KillMagicKeySummoning_Handler,
		},
		{
			MethodName: "KillMagicKeySummoningAll",
			Handler:    _Query_KillMagicKeySummoningAll_Handler,
		},
		{
			MethodName: "KillScriptureSignatureRequest",
			Handler:    _Query_KillScriptureSignatureRequest_Handler,
		},
		{
			MethodName: "KillScriptureSignatureRequestAll",
			Handler:    _Query_KillScriptureSignatureRequestAll_Handler,
		},
		{
			MethodName: "KillSignatureRequest",
			Handler:    _Query_KillSignatureRequest_Handler,
		},
		{
			MethodName: "KillSignatureRequestAll",
			Handler:    _Query_KillSignatureRequestAll_Handler,
		},
		{
			MethodName: "EncryptedMagicKeyShare",
			Handler:    _Query_EncryptedMagicKeyShare_Handler,
		},
		{
			MethodName: "EncryptedMagicKeyShareAll",
			Handler:    _Query_EncryptedMagicKeyShareAll_Handler,
		},
		{
			MethodName: "EncryptedPreSign",
			Handler:    _Query_EncryptedPreSign_Handler,
		},
		{
			MethodName: "EncryptedPreSignAll",
			Handler:    _Query_EncryptedPreSignAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eightball/eightball/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetMagicKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMagicKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMagicKeyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetMagicKeyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMagicKeyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMagicKeyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.MagicKey.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllMagicKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllMagicKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllMagicKeyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllMagicKeyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllMagicKeyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllMagicKeyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.MagicKey) > 0 {
		for iNdEx := len(m.MagicKey) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MagicKey[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetMagicKeySummoningRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMagicKeySummoningRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMagicKeySummoningRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetMagicKeySummoningResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMagicKeySummoningResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMagicKeySummoningResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.MagicKeySummoning.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllMagicKeySummoningRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllMagicKeySummoningRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllMagicKeySummoningRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllMagicKeySummoningResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllMagicKeySummoningResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllMagicKeySummoningResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.MagicKeySummoning) > 0 {
		for iNdEx := len(m.MagicKeySummoning) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MagicKeySummoning[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetHighCouncilRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetHighCouncilRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetHighCouncilRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.KeyId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.KeyId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetHighCouncilResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetHighCouncilResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetHighCouncilResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.HighCouncil.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllHighCouncilRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllHighCouncilRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllHighCouncilRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.KeyId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.KeyId))
		i--
		dAtA[i] = 0x10
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllHighCouncilResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllHighCouncilResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllHighCouncilResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.HighCouncil) > 0 {
		for iNdEx := len(m.HighCouncil) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.HighCouncil[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCurrentMagicKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCurrentMagicKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCurrentMagicKeyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetCurrentMagicKeyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCurrentMagicKeyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCurrentMagicKeyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.CurrentMagicKey.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetHighCouncilConjuringsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetHighCouncilConjuringsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetHighCouncilConjuringsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetHighCouncilConjuringsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetHighCouncilConjuringsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetHighCouncilConjuringsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.HighCouncilConjurings.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllHighCouncilConjuringsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllHighCouncilConjuringsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllHighCouncilConjuringsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllHighCouncilConjuringsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllHighCouncilConjuringsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllHighCouncilConjuringsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.HighCouncilConjurings) > 0 {
		for iNdEx := len(m.HighCouncilConjurings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.HighCouncilConjurings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSpiritConjuringPoemsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSpiritConjuringPoemsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSpiritConjuringPoemsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MagicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.MagicId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSpiritConjuringPoemsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSpiritConjuringPoemsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSpiritConjuringPoemsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.SpiritConjuringPoems.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllSpiritConjuringPoemsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSpiritConjuringPoemsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSpiritConjuringPoemsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MagicId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.MagicId))
		i--
		dAtA[i] = 0x10
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllSpiritConjuringPoemsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSpiritConjuringPoemsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSpiritConjuringPoemsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SpiritConjuringPoems) > 0 {
		for iNdEx := len(m.SpiritConjuringPoems) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SpiritConjuringPoems[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetVerseRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetVerseRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetVerseRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MagicKeyId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.MagicKeyId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetVerseResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetVerseResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetVerseResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Verse.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllVerseRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllVerseRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllVerseRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MagicKeyId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.MagicKeyId))
		i--
		dAtA[i] = 0x10
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllVerseResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllVerseResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllVerseResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Verse) > 0 {
		for iNdEx := len(m.Verse) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Verse[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryVerseCountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVerseCountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVerseCountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MagicKeyId) > 0 {
		i -= len(m.MagicKeyId)
		copy(dAtA[i:], m.MagicKeyId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MagicKeyId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryVerseCountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVerseCountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVerseCountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Count) > 0 {
		i -= len(m.Count)
		copy(dAtA[i:], m.Count)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Count)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryMagicKeyCountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMagicKeyCountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMagicKeyCountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryMagicKeyCountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMagicKeyCountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMagicKeyCountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetVisionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetVisionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetVisionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MagicKeyId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.MagicKeyId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetVisionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetVisionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetVisionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Vision.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllVisionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllVisionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllVisionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MagicKeyId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.MagicKeyId))
		i--
		dAtA[i] = 0x10
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllVisionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllVisionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllVisionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Vision) > 0 {
		for iNdEx := len(m.Vision) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Vision[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetMessageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMessageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMessageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMessageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Message.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllMessageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllMessageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllMessageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllMessageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Message) > 0 {
		for iNdEx := len(m.Message) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Message[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSignatureRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSignatureRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSignatureRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSignatureRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSignatureRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSignatureRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.SignatureRequest.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllSignatureRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSignatureRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSignatureRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllSignatureRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSignatureRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSignatureRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SignatureRequest) > 0 {
		for iNdEx := len(m.SignatureRequest) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SignatureRequest[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSignatureShareRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSignatureShareRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSignatureShareRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if m.MessageId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.MessageId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSignatureShareResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSignatureShareResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSignatureShareResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.SignatureShare.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllSignatureShareRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSignatureShareRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSignatureShareRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MessageId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.MessageId))
		i--
		dAtA[i] = 0x10
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllSignatureShareResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSignatureShareResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSignatureShareResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SignatureShare) > 0 {
		for iNdEx := len(m.SignatureShare) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SignatureShare[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSignedMessageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSignedMessageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSignedMessageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MsgId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.MsgId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSignedMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSignedMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSignedMessageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.SignedMessage.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllSignedMessageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSignedMessageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSignedMessageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MsgId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.MsgId))
		i--
		dAtA[i] = 0x10
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllSignedMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSignedMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSignedMessageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SignedMessage) > 0 {
		for iNdEx := len(m.SignedMessage) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SignedMessage[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetMeditationSummoningRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMeditationSummoningRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMeditationSummoningRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetMeditationSummoningResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMeditationSummoningResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMeditationSummoningResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.MeditationSummoning.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllMeditationSummoningRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllMeditationSummoningRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllMeditationSummoningRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllMeditationSummoningResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllMeditationSummoningResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllMeditationSummoningResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.MeditationSummoning) > 0 {
		for iNdEx := len(m.MeditationSummoning) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MeditationSummoning[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetMeditationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMeditationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMeditationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MagicKeyId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.MagicKeyId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetMeditationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMeditationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMeditationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Meditation.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllMeditationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllMeditationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllMeditationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MagicKeyId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.MagicKeyId))
		i--
		dAtA[i] = 0x10
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllMeditationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllMeditationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllMeditationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Meditation) > 0 {
		for iNdEx := len(m.Meditation) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Meditation[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryMeditationCountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMeditationCountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMeditationCountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MagicKeyId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.MagicKeyId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryMeditationCountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMeditationCountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMeditationCountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Count) > 0 {
		i -= len(m.Count)
		copy(dAtA[i:], m.Count)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Count)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetScriptureRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetScriptureRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetScriptureRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetScriptureResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetScriptureResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetScriptureResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Scripture.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllScriptureRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllScriptureRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllScriptureRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllScriptureResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllScriptureResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllScriptureResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Scripture) > 0 {
		for iNdEx := len(m.Scripture) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Scripture[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetScriptureSignatureRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetScriptureSignatureRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetScriptureSignatureRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetScriptureSignatureRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetScriptureSignatureRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetScriptureSignatureRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ScriptureSignatureRequest.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllScriptureSignatureRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllScriptureSignatureRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllScriptureSignatureRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllScriptureSignatureRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllScriptureSignatureRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllScriptureSignatureRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ScriptureSignatureRequest) > 0 {
		for iNdEx := len(m.ScriptureSignatureRequest) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ScriptureSignatureRequest[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetScriptureSignatureShareRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetScriptureSignatureShareRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetScriptureSignatureShareRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ScriptureIndex) > 0 {
		i -= len(m.ScriptureIndex)
		copy(dAtA[i:], m.ScriptureIndex)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ScriptureIndex)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetScriptureSignatureShareResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetScriptureSignatureShareResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetScriptureSignatureShareResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ScriptureSignatureShare.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllScriptureSignatureShareRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllScriptureSignatureShareRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllScriptureSignatureShareRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ScriptureIndex) > 0 {
		i -= len(m.ScriptureIndex)
		copy(dAtA[i:], m.ScriptureIndex)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ScriptureIndex)))
		i--
		dAtA[i] = 0x12
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllScriptureSignatureShareResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllScriptureSignatureShareResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllScriptureSignatureShareResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ScriptureSignatureShare) > 0 {
		for iNdEx := len(m.ScriptureSignatureShare) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ScriptureSignatureShare[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSignedScriptureRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSignedScriptureRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSignedScriptureRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSignedScriptureResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSignedScriptureResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSignedScriptureResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.SignedScripture.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllSignedScriptureRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSignedScriptureRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSignedScriptureRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllSignedScriptureResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSignedScriptureResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSignedScriptureResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SignedScripture) > 0 {
		for iNdEx := len(m.SignedScripture) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SignedScripture[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSignedScriptureListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSignedScriptureListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSignedScriptureListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSignedScriptureListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSignedScriptureListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSignedScriptureListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.SignedScriptureList.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllSignedScriptureListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSignedScriptureListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSignedScriptureListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllSignedScriptureListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSignedScriptureListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSignedScriptureListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SignedScriptureList) > 0 {
		for iNdEx := len(m.SignedScriptureList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SignedScriptureList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBlessingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBlessingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBlessingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBlessingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBlessingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBlessingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Blessing.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllBlessingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllBlessingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllBlessingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0x12
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllBlessingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllBlessingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllBlessingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Blessing) > 0 {
		for iNdEx := len(m.Blessing) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Blessing[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBlessingReceiptRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBlessingReceiptRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBlessingReceiptRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBlessingReceiptResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBlessingReceiptResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBlessingReceiptResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.BlessingReceipt.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllBlessingReceiptRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllBlessingReceiptRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllBlessingReceiptRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllBlessingReceiptResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllBlessingReceiptResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllBlessingReceiptResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.BlessingReceipt) > 0 {
		for iNdEx := len(m.BlessingReceipt) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BlessingReceipt[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetImploringRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetImploringRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetImploringRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetImploringResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetImploringResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetImploringResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Imploring.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllImploringRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllImploringRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllImploringRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllImploringResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllImploringResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllImploringResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Imploring) > 0 {
		for iNdEx := len(m.Imploring) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Imploring[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetKillConjuringRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetKillConjuringRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetKillConjuringRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetKillConjuringResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetKillConjuringResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetKillConjuringResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.KillConjuring.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllKillConjuringRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllKillConjuringRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllKillConjuringRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllKillConjuringResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllKillConjuringResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllKillConjuringResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.KillConjuring) > 0 {
		for iNdEx := len(m.KillConjuring) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KillConjuring[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetKillImploringRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetKillImploringRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetKillImploringRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetKillImploringResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetKillImploringResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetKillImploringResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.KillImploring.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllKillImploringRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllKillImploringRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllKillImploringRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllKillImploringResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllKillImploringResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllKillImploringResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.KillImploring) > 0 {
		for iNdEx := len(m.KillImploring) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KillImploring[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetKillMeditationSummoningRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetKillMeditationSummoningRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetKillMeditationSummoningRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetKillMeditationSummoningResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetKillMeditationSummoningResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetKillMeditationSummoningResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.KillMeditationSummoning.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllKillMeditationSummoningRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllKillMeditationSummoningRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllKillMeditationSummoningRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllKillMeditationSummoningResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllKillMeditationSummoningResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllKillMeditationSummoningResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.KillMeditationSummoning) > 0 {
		for iNdEx := len(m.KillMeditationSummoning) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KillMeditationSummoning[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetKillMagicKeySummoningRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetKillMagicKeySummoningRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetKillMagicKeySummoningRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetKillMagicKeySummoningResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetKillMagicKeySummoningResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetKillMagicKeySummoningResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.KillMagicKeySummoning.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllKillMagicKeySummoningRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllKillMagicKeySummoningRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllKillMagicKeySummoningRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllKillMagicKeySummoningResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllKillMagicKeySummoningResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllKillMagicKeySummoningResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.KillMagicKeySummoning) > 0 {
		for iNdEx := len(m.KillMagicKeySummoning) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KillMagicKeySummoning[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetKillScriptureSignatureRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetKillScriptureSignatureRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetKillScriptureSignatureRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetKillScriptureSignatureRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetKillScriptureSignatureRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetKillScriptureSignatureRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.KillScriptureSignatureRequest.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllKillScriptureSignatureRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllKillScriptureSignatureRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllKillScriptureSignatureRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllKillScriptureSignatureRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllKillScriptureSignatureRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllKillScriptureSignatureRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.KillScriptureSignatureRequest) > 0 {
		for iNdEx := len(m.KillScriptureSignatureRequest) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KillScriptureSignatureRequest[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetKillSignatureRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetKillSignatureRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetKillSignatureRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetKillSignatureRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetKillSignatureRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetKillSignatureRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.KillSignatureRequest.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllKillSignatureRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllKillSignatureRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllKillSignatureRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllKillSignatureRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllKillSignatureRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllKillSignatureRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.KillSignatureRequest) > 0 {
		for iNdEx := len(m.KillSignatureRequest) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KillSignatureRequest[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEncryptedMagicKeyShareRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEncryptedMagicKeyShareRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEncryptedMagicKeyShareRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEncryptedMagicKeyShareResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEncryptedMagicKeyShareResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEncryptedMagicKeyShareResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.EncryptedMagicKeyShare.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllEncryptedMagicKeyShareRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllEncryptedMagicKeyShareRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllEncryptedMagicKeyShareRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllEncryptedMagicKeyShareResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllEncryptedMagicKeyShareResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllEncryptedMagicKeyShareResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.EncryptedMagicKeyShare) > 0 {
		for iNdEx := len(m.EncryptedMagicKeyShare) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EncryptedMagicKeyShare[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEncryptedPreSignRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEncryptedPreSignRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEncryptedPreSignRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEncryptedPreSignResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEncryptedPreSignResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEncryptedPreSignResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.EncryptedPreSign.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllEncryptedPreSignRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllEncryptedPreSignRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllEncryptedPreSignRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllEncryptedPreSignResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllEncryptedPreSignResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllEncryptedPreSignResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.EncryptedPreSign) > 0 {
		for iNdEx := len(m.EncryptedPreSign) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EncryptedPreSign[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetMagicKeyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetMagicKeyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.MagicKey.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllMagicKeyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllMagicKeyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MagicKey) > 0 {
		for _, e := range m.MagicKey {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetMagicKeySummoningRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetMagicKeySummoningResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.MagicKeySummoning.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllMagicKeySummoningRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllMagicKeySummoningResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MagicKeySummoning) > 0 {
		for _, e := range m.MagicKeySummoning {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetHighCouncilRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	if m.KeyId != 0 {
		n += 1 + sovQuery(uint64(m.KeyId))
	}
	return n
}

func (m *QueryGetHighCouncilResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.HighCouncil.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllHighCouncilRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.KeyId != 0 {
		n += 1 + sovQuery(uint64(m.KeyId))
	}
	return n
}

func (m *QueryAllHighCouncilResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.HighCouncil) > 0 {
		for _, e := range m.HighCouncil {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCurrentMagicKeyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetCurrentMagicKeyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CurrentMagicKey.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetHighCouncilConjuringsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetHighCouncilConjuringsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.HighCouncilConjurings.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllHighCouncilConjuringsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllHighCouncilConjuringsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.HighCouncilConjurings) > 0 {
		for _, e := range m.HighCouncilConjurings {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSpiritConjuringPoemsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	if m.MagicId != 0 {
		n += 1 + sovQuery(uint64(m.MagicId))
	}
	return n
}

func (m *QueryGetSpiritConjuringPoemsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SpiritConjuringPoems.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllSpiritConjuringPoemsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.MagicId != 0 {
		n += 1 + sovQuery(uint64(m.MagicId))
	}
	return n
}

func (m *QueryAllSpiritConjuringPoemsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SpiritConjuringPoems) > 0 {
		for _, e := range m.SpiritConjuringPoems {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetVerseRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	if m.MagicKeyId != 0 {
		n += 1 + sovQuery(uint64(m.MagicKeyId))
	}
	return n
}

func (m *QueryGetVerseResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Verse.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllVerseRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.MagicKeyId != 0 {
		n += 1 + sovQuery(uint64(m.MagicKeyId))
	}
	return n
}

func (m *QueryAllVerseResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Verse) > 0 {
		for _, e := range m.Verse {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVerseCountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MagicKeyId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVerseCountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Count)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryMagicKeyCountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryMagicKeyCountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovQuery(uint64(m.Count))
	}
	return n
}

func (m *QueryGetVisionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	if m.MagicKeyId != 0 {
		n += 1 + sovQuery(uint64(m.MagicKeyId))
	}
	return n
}

func (m *QueryGetVisionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Vision.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllVisionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.MagicKeyId != 0 {
		n += 1 + sovQuery(uint64(m.MagicKeyId))
	}
	return n
}

func (m *QueryAllVisionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Vision) > 0 {
		for _, e := range m.Vision {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetMessageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetMessageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Message.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllMessageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllMessageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Message) > 0 {
		for _, e := range m.Message {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSignatureRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetSignatureRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SignatureRequest.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllSignatureRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllSignatureRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SignatureRequest) > 0 {
		for _, e := range m.SignatureRequest {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSignatureShareRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MessageId != 0 {
		n += 1 + sovQuery(uint64(m.MessageId))
	}
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetSignatureShareResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SignatureShare.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllSignatureShareRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.MessageId != 0 {
		n += 1 + sovQuery(uint64(m.MessageId))
	}
	return n
}

func (m *QueryAllSignatureShareResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SignatureShare) > 0 {
		for _, e := range m.SignatureShare {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSignedMessageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	if m.MsgId != 0 {
		n += 1 + sovQuery(uint64(m.MsgId))
	}
	return n
}

func (m *QueryGetSignedMessageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SignedMessage.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllSignedMessageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.MsgId != 0 {
		n += 1 + sovQuery(uint64(m.MsgId))
	}
	return n
}

func (m *QueryAllSignedMessageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SignedMessage) > 0 {
		for _, e := range m.SignedMessage {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetMeditationSummoningRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetMeditationSummoningResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.MeditationSummoning.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllMeditationSummoningRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllMeditationSummoningResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MeditationSummoning) > 0 {
		for _, e := range m.MeditationSummoning {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetMeditationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	if m.MagicKeyId != 0 {
		n += 1 + sovQuery(uint64(m.MagicKeyId))
	}
	return n
}

func (m *QueryGetMeditationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Meditation.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllMeditationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.MagicKeyId != 0 {
		n += 1 + sovQuery(uint64(m.MagicKeyId))
	}
	return n
}

func (m *QueryAllMeditationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Meditation) > 0 {
		for _, e := range m.Meditation {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryMeditationCountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MagicKeyId != 0 {
		n += 1 + sovQuery(uint64(m.MagicKeyId))
	}
	return n
}

func (m *QueryMeditationCountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Count)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetScriptureRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetScriptureResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Scripture.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllScriptureRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllScriptureResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Scripture) > 0 {
		for _, e := range m.Scripture {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetScriptureSignatureRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetScriptureSignatureRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ScriptureSignatureRequest.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllScriptureSignatureRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllScriptureSignatureRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ScriptureSignatureRequest) > 0 {
		for _, e := range m.ScriptureSignatureRequest {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetScriptureSignatureShareRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	l = len(m.ScriptureIndex)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetScriptureSignatureShareResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ScriptureSignatureShare.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllScriptureSignatureShareRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ScriptureIndex)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllScriptureSignatureShareResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ScriptureSignatureShare) > 0 {
		for _, e := range m.ScriptureSignatureShare {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSignedScriptureRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSignedScriptureResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SignedScripture.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllSignedScriptureRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllSignedScriptureResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SignedScripture) > 0 {
		for _, e := range m.SignedScripture {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSignedScriptureListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetSignedScriptureListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SignedScriptureList.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllSignedScriptureListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllSignedScriptureListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SignedScriptureList) > 0 {
		for _, e := range m.SignedScriptureList {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetBlessingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetBlessingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Blessing.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllBlessingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllBlessingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Blessing) > 0 {
		for _, e := range m.Blessing {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetBlessingReceiptRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetBlessingReceiptResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BlessingReceipt.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllBlessingReceiptRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllBlessingReceiptResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BlessingReceipt) > 0 {
		for _, e := range m.BlessingReceipt {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetImploringRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetImploringResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Imploring.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllImploringRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllImploringResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Imploring) > 0 {
		for _, e := range m.Imploring {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetKillConjuringRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetKillConjuringResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.KillConjuring.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllKillConjuringRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllKillConjuringResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.KillConjuring) > 0 {
		for _, e := range m.KillConjuring {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetKillImploringRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetKillImploringResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.KillImploring.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllKillImploringRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllKillImploringResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.KillImploring) > 0 {
		for _, e := range m.KillImploring {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetKillMeditationSummoningRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetKillMeditationSummoningResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.KillMeditationSummoning.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllKillMeditationSummoningRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllKillMeditationSummoningResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.KillMeditationSummoning) > 0 {
		for _, e := range m.KillMeditationSummoning {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetKillMagicKeySummoningRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetKillMagicKeySummoningResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.KillMagicKeySummoning.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllKillMagicKeySummoningRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllKillMagicKeySummoningResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.KillMagicKeySummoning) > 0 {
		for _, e := range m.KillMagicKeySummoning {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetKillScriptureSignatureRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetKillScriptureSignatureRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.KillScriptureSignatureRequest.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllKillScriptureSignatureRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllKillScriptureSignatureRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.KillScriptureSignatureRequest) > 0 {
		for _, e := range m.KillScriptureSignatureRequest {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetKillSignatureRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetKillSignatureRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.KillSignatureRequest.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllKillSignatureRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllKillSignatureRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.KillSignatureRequest) > 0 {
		for _, e := range m.KillSignatureRequest {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetEncryptedMagicKeyShareRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetEncryptedMagicKeyShareResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.EncryptedMagicKeyShare.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllEncryptedMagicKeyShareRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllEncryptedMagicKeyShareResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EncryptedMagicKeyShare) > 0 {
		for _, e := range m.EncryptedMagicKeyShare {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetEncryptedPreSignRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetEncryptedPreSignResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.EncryptedPreSign.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllEncryptedPreSignRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllEncryptedPreSignResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EncryptedPreSign) > 0 {
		for _, e := range m.EncryptedPreSign {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMagicKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMagicKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMagicKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMagicKeyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMagicKeyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMagicKeyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MagicKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MagicKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllMagicKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllMagicKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllMagicKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllMagicKeyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllMagicKeyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllMagicKeyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MagicKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MagicKey = append(m.MagicKey, MagicKey{})
			if err := m.MagicKey[len(m.MagicKey)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMagicKeySummoningRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMagicKeySummoningRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMagicKeySummoningRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMagicKeySummoningResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMagicKeySummoningResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMagicKeySummoningResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MagicKeySummoning", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MagicKeySummoning.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllMagicKeySummoningRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllMagicKeySummoningRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllMagicKeySummoningRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllMagicKeySummoningResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllMagicKeySummoningResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllMagicKeySummoningResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MagicKeySummoning", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MagicKeySummoning = append(m.MagicKeySummoning, MagicKeySummoning{})
			if err := m.MagicKeySummoning[len(m.MagicKeySummoning)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetHighCouncilRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetHighCouncilRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetHighCouncilRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetHighCouncilResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetHighCouncilResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetHighCouncilResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HighCouncil", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.HighCouncil.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllHighCouncilRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllHighCouncilRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllHighCouncilRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllHighCouncilResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllHighCouncilResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllHighCouncilResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HighCouncil", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HighCouncil = append(m.HighCouncil, HighCouncil{})
			if err := m.HighCouncil[len(m.HighCouncil)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCurrentMagicKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCurrentMagicKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCurrentMagicKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCurrentMagicKeyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCurrentMagicKeyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCurrentMagicKeyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentMagicKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CurrentMagicKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetHighCouncilConjuringsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetHighCouncilConjuringsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetHighCouncilConjuringsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetHighCouncilConjuringsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetHighCouncilConjuringsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetHighCouncilConjuringsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HighCouncilConjurings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.HighCouncilConjurings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllHighCouncilConjuringsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllHighCouncilConjuringsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllHighCouncilConjuringsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllHighCouncilConjuringsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllHighCouncilConjuringsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllHighCouncilConjuringsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HighCouncilConjurings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HighCouncilConjurings = append(m.HighCouncilConjurings, HighCouncilConjurings{})
			if err := m.HighCouncilConjurings[len(m.HighCouncilConjurings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSpiritConjuringPoemsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSpiritConjuringPoemsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSpiritConjuringPoemsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MagicId", wireType)
			}
			m.MagicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MagicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSpiritConjuringPoemsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSpiritConjuringPoemsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSpiritConjuringPoemsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpiritConjuringPoems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SpiritConjuringPoems.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSpiritConjuringPoemsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSpiritConjuringPoemsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSpiritConjuringPoemsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MagicId", wireType)
			}
			m.MagicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MagicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSpiritConjuringPoemsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSpiritConjuringPoemsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSpiritConjuringPoemsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpiritConjuringPoems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpiritConjuringPoems = append(m.SpiritConjuringPoems, SpiritConjuringPoems{})
			if err := m.SpiritConjuringPoems[len(m.SpiritConjuringPoems)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetVerseRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetVerseRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetVerseRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MagicKeyId", wireType)
			}
			m.MagicKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MagicKeyId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetVerseResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetVerseResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetVerseResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Verse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllVerseRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllVerseRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllVerseRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MagicKeyId", wireType)
			}
			m.MagicKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MagicKeyId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllVerseResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllVerseResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllVerseResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Verse = append(m.Verse, Verse{})
			if err := m.Verse[len(m.Verse)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVerseCountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVerseCountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVerseCountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MagicKeyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MagicKeyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVerseCountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVerseCountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVerseCountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Count = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMagicKeyCountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMagicKeyCountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMagicKeyCountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMagicKeyCountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMagicKeyCountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMagicKeyCountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetVisionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetVisionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetVisionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MagicKeyId", wireType)
			}
			m.MagicKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MagicKeyId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetVisionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetVisionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetVisionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vision", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Vision.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllVisionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllVisionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllVisionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MagicKeyId", wireType)
			}
			m.MagicKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MagicKeyId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllVisionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllVisionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllVisionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vision", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vision = append(m.Vision, Vision{})
			if err := m.Vision[len(m.Vision)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMessageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMessageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMessageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllMessageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllMessageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllMessageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = append(m.Message, Message{})
			if err := m.Message[len(m.Message)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSignatureRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSignatureRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSignatureRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSignatureRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSignatureRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSignatureRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignatureRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SignatureRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSignatureRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSignatureRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSignatureRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSignatureRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSignatureRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSignatureRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignatureRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignatureRequest = append(m.SignatureRequest, SignatureRequest{})
			if err := m.SignatureRequest[len(m.SignatureRequest)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSignatureShareRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSignatureShareRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSignatureShareRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			m.MessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSignatureShareResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSignatureShareResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSignatureShareResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignatureShare", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SignatureShare.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSignatureShareRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSignatureShareRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSignatureShareRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			m.MessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSignatureShareResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSignatureShareResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSignatureShareResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignatureShare", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignatureShare = append(m.SignatureShare, SignatureShare{})
			if err := m.SignatureShare[len(m.SignatureShare)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSignedMessageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSignedMessageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSignedMessageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSignedMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSignedMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSignedMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignedMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SignedMessage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSignedMessageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSignedMessageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSignedMessageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSignedMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSignedMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSignedMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignedMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignedMessage = append(m.SignedMessage, SignedMessage{})
			if err := m.SignedMessage[len(m.SignedMessage)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMeditationSummoningRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMeditationSummoningRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMeditationSummoningRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMeditationSummoningResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMeditationSummoningResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMeditationSummoningResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MeditationSummoning", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MeditationSummoning.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllMeditationSummoningRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllMeditationSummoningRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllMeditationSummoningRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllMeditationSummoningResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllMeditationSummoningResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllMeditationSummoningResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MeditationSummoning", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MeditationSummoning = append(m.MeditationSummoning, MeditationSummoning{})
			if err := m.MeditationSummoning[len(m.MeditationSummoning)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMeditationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMeditationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMeditationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MagicKeyId", wireType)
			}
			m.MagicKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MagicKeyId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMeditationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMeditationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMeditationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meditation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Meditation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllMeditationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllMeditationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllMeditationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MagicKeyId", wireType)
			}
			m.MagicKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MagicKeyId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllMeditationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllMeditationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllMeditationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meditation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Meditation = append(m.Meditation, Meditation{})
			if err := m.Meditation[len(m.Meditation)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMeditationCountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMeditationCountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMeditationCountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MagicKeyId", wireType)
			}
			m.MagicKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MagicKeyId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMeditationCountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMeditationCountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMeditationCountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Count = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetScriptureRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetScriptureRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetScriptureRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetScriptureResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetScriptureResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetScriptureResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scripture", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Scripture.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllScriptureRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllScriptureRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllScriptureRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllScriptureResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllScriptureResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllScriptureResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scripture", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Scripture = append(m.Scripture, Scripture{})
			if err := m.Scripture[len(m.Scripture)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetScriptureSignatureRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetScriptureSignatureRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetScriptureSignatureRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetScriptureSignatureRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetScriptureSignatureRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetScriptureSignatureRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScriptureSignatureRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ScriptureSignatureRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllScriptureSignatureRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllScriptureSignatureRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllScriptureSignatureRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllScriptureSignatureRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllScriptureSignatureRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllScriptureSignatureRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScriptureSignatureRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScriptureSignatureRequest = append(m.ScriptureSignatureRequest, ScriptureSignatureRequest{})
			if err := m.ScriptureSignatureRequest[len(m.ScriptureSignatureRequest)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetScriptureSignatureShareRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetScriptureSignatureShareRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetScriptureSignatureShareRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScriptureIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScriptureIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetScriptureSignatureShareResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetScriptureSignatureShareResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetScriptureSignatureShareResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScriptureSignatureShare", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ScriptureSignatureShare.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllScriptureSignatureShareRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllScriptureSignatureShareRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllScriptureSignatureShareRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScriptureIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScriptureIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllScriptureSignatureShareResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllScriptureSignatureShareResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllScriptureSignatureShareResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScriptureSignatureShare", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScriptureSignatureShare = append(m.ScriptureSignatureShare, ScriptureSignatureShare{})
			if err := m.ScriptureSignatureShare[len(m.ScriptureSignatureShare)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSignedScriptureRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSignedScriptureRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSignedScriptureRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSignedScriptureResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSignedScriptureResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSignedScriptureResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignedScripture", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SignedScripture.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSignedScriptureRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSignedScriptureRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSignedScriptureRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSignedScriptureResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSignedScriptureResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSignedScriptureResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignedScripture", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignedScripture = append(m.SignedScripture, SignedScripture{})
			if err := m.SignedScripture[len(m.SignedScripture)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSignedScriptureListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSignedScriptureListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSignedScriptureListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSignedScriptureListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSignedScriptureListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSignedScriptureListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignedScriptureList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SignedScriptureList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSignedScriptureListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSignedScriptureListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSignedScriptureListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSignedScriptureListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSignedScriptureListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSignedScriptureListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignedScriptureList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignedScriptureList = append(m.SignedScriptureList, SignedScriptureList{})
			if err := m.SignedScriptureList[len(m.SignedScriptureList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBlessingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBlessingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBlessingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBlessingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBlessingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBlessingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blessing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Blessing.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllBlessingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllBlessingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllBlessingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllBlessingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllBlessingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllBlessingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blessing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blessing = append(m.Blessing, Blessing{})
			if err := m.Blessing[len(m.Blessing)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBlessingReceiptRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBlessingReceiptRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBlessingReceiptRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBlessingReceiptResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBlessingReceiptResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBlessingReceiptResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlessingReceipt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BlessingReceipt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllBlessingReceiptRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllBlessingReceiptRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllBlessingReceiptRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllBlessingReceiptResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllBlessingReceiptResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllBlessingReceiptResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlessingReceipt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlessingReceipt = append(m.BlessingReceipt, BlessingReceipt{})
			if err := m.BlessingReceipt[len(m.BlessingReceipt)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetImploringRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetImploringRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetImploringRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetImploringResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetImploringResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetImploringResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Imploring", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Imploring.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllImploringRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllImploringRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllImploringRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllImploringResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllImploringResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllImploringResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Imploring", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Imploring = append(m.Imploring, Imploring{})
			if err := m.Imploring[len(m.Imploring)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetKillConjuringRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetKillConjuringRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetKillConjuringRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetKillConjuringResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetKillConjuringResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetKillConjuringResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KillConjuring", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.KillConjuring.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllKillConjuringRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllKillConjuringRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllKillConjuringRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllKillConjuringResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllKillConjuringResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllKillConjuringResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KillConjuring", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KillConjuring = append(m.KillConjuring, KillConjuring{})
			if err := m.KillConjuring[len(m.KillConjuring)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetKillImploringRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetKillImploringRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetKillImploringRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetKillImploringResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetKillImploringResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetKillImploringResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KillImploring", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.KillImploring.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllKillImploringRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllKillImploringRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllKillImploringRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllKillImploringResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllKillImploringResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllKillImploringResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KillImploring", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KillImploring = append(m.KillImploring, KillImploring{})
			if err := m.KillImploring[len(m.KillImploring)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetKillMeditationSummoningRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetKillMeditationSummoningRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetKillMeditationSummoningRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetKillMeditationSummoningResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetKillMeditationSummoningResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetKillMeditationSummoningResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KillMeditationSummoning", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.KillMeditationSummoning.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllKillMeditationSummoningRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllKillMeditationSummoningRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllKillMeditationSummoningRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllKillMeditationSummoningResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllKillMeditationSummoningResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllKillMeditationSummoningResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KillMeditationSummoning", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KillMeditationSummoning = append(m.KillMeditationSummoning, KillMeditationSummoning{})
			if err := m.KillMeditationSummoning[len(m.KillMeditationSummoning)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetKillMagicKeySummoningRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetKillMagicKeySummoningRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetKillMagicKeySummoningRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetKillMagicKeySummoningResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetKillMagicKeySummoningResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetKillMagicKeySummoningResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KillMagicKeySummoning", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.KillMagicKeySummoning.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllKillMagicKeySummoningRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllKillMagicKeySummoningRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllKillMagicKeySummoningRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllKillMagicKeySummoningResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllKillMagicKeySummoningResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllKillMagicKeySummoningResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KillMagicKeySummoning", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KillMagicKeySummoning = append(m.KillMagicKeySummoning, KillMagicKeySummoning{})
			if err := m.KillMagicKeySummoning[len(m.KillMagicKeySummoning)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetKillScriptureSignatureRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetKillScriptureSignatureRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetKillScriptureSignatureRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetKillScriptureSignatureRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetKillScriptureSignatureRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetKillScriptureSignatureRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KillScriptureSignatureRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.KillScriptureSignatureRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllKillScriptureSignatureRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllKillScriptureSignatureRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllKillScriptureSignatureRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllKillScriptureSignatureRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllKillScriptureSignatureRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllKillScriptureSignatureRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KillScriptureSignatureRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KillScriptureSignatureRequest = append(m.KillScriptureSignatureRequest, KillScriptureSignatureRequest{})
			if err := m.KillScriptureSignatureRequest[len(m.KillScriptureSignatureRequest)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetKillSignatureRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetKillSignatureRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetKillSignatureRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetKillSignatureRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetKillSignatureRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetKillSignatureRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KillSignatureRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.KillSignatureRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllKillSignatureRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllKillSignatureRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllKillSignatureRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllKillSignatureRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllKillSignatureRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllKillSignatureRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KillSignatureRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KillSignatureRequest = append(m.KillSignatureRequest, KillSignatureRequest{})
			if err := m.KillSignatureRequest[len(m.KillSignatureRequest)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEncryptedMagicKeyShareRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEncryptedMagicKeyShareRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEncryptedMagicKeyShareRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEncryptedMagicKeyShareResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEncryptedMagicKeyShareResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEncryptedMagicKeyShareResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedMagicKeyShare", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EncryptedMagicKeyShare.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllEncryptedMagicKeyShareRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllEncryptedMagicKeyShareRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllEncryptedMagicKeyShareRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllEncryptedMagicKeyShareResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllEncryptedMagicKeyShareResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllEncryptedMagicKeyShareResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedMagicKeyShare", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptedMagicKeyShare = append(m.EncryptedMagicKeyShare, EncryptedMagicKeyShare{})
			if err := m.EncryptedMagicKeyShare[len(m.EncryptedMagicKeyShare)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEncryptedPreSignRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEncryptedPreSignRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEncryptedPreSignRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEncryptedPreSignResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEncryptedPreSignResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEncryptedPreSignResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedPreSign", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EncryptedPreSign.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllEncryptedPreSignRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllEncryptedPreSignRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllEncryptedPreSignRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllEncryptedPreSignResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllEncryptedPreSignResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllEncryptedPreSignResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedPreSign", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptedPreSign = append(m.EncryptedPreSign, EncryptedPreSign{})
			if err := m.EncryptedPreSign[len(m.EncryptedPreSign)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
