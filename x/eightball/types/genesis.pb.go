// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: eightball/eightball/genesis.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines the eightball module's genesis state.
type GenesisState struct {
	Params                         Params                      `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	MagicKeyList                   []MagicKey                  `protobuf:"bytes,3,rep,name=magicKeyList,proto3" json:"magicKeyList"`
	MagicKeyCount                  uint64                      `protobuf:"varint,4,opt,name=magicKeyCount,proto3" json:"magicKeyCount,omitempty"`
	MagicKeySummoningList          []MagicKeySummoning         `protobuf:"bytes,5,rep,name=magicKeySummoningList,proto3" json:"magicKeySummoningList"`
	MagicKeySummoningCount         uint64                      `protobuf:"varint,6,opt,name=magicKeySummoningCount,proto3" json:"magicKeySummoningCount,omitempty"`
	HighCouncilList                []HighCouncil               `protobuf:"bytes,7,rep,name=highCouncilList,proto3" json:"highCouncilList"`
	HighCouncilCount               uint64                      `protobuf:"varint,8,opt,name=highCouncilCount,proto3" json:"highCouncilCount,omitempty"`
	CurrentMagicKey                *CurrentMagicKey            `protobuf:"bytes,9,opt,name=currentMagicKey,proto3" json:"currentMagicKey,omitempty"`
	HighCouncilConjuringsList      []HighCouncilConjurings     `protobuf:"bytes,10,rep,name=highCouncilConjuringsList,proto3" json:"highCouncilConjuringsList"`
	HighCouncilConjuringsCount     uint64                      `protobuf:"varint,11,opt,name=highCouncilConjuringsCount,proto3" json:"highCouncilConjuringsCount,omitempty"`
	SpiritConjuringPoemsList       []SpiritConjuringPoems      `protobuf:"bytes,12,rep,name=spiritConjuringPoemsList,proto3" json:"spiritConjuringPoemsList"`
	SpiritConjuringPoemsCount      uint64                      `protobuf:"varint,13,opt,name=spiritConjuringPoemsCount,proto3" json:"spiritConjuringPoemsCount,omitempty"`
	VerseList                      []Verse                     `protobuf:"bytes,14,rep,name=verseList,proto3" json:"verseList"`
	VerseCount                     uint64                      `protobuf:"varint,15,opt,name=verseCount,proto3" json:"verseCount,omitempty"`
	VisionList                     []Vision                    `protobuf:"bytes,16,rep,name=visionList,proto3" json:"visionList"`
	VisionCount                    uint64                      `protobuf:"varint,17,opt,name=visionCount,proto3" json:"visionCount,omitempty"`
	MessageList                    []Message                   `protobuf:"bytes,18,rep,name=messageList,proto3" json:"messageList"`
	MessageCount                   uint64                      `protobuf:"varint,19,opt,name=messageCount,proto3" json:"messageCount,omitempty"`
	SignatureRequestList           []SignatureRequest          `protobuf:"bytes,20,rep,name=signatureRequestList,proto3" json:"signatureRequestList"`
	SignatureRequestCount          uint64                      `protobuf:"varint,21,opt,name=signatureRequestCount,proto3" json:"signatureRequestCount,omitempty"`
	SignatureShareList             []SignatureShare            `protobuf:"bytes,22,rep,name=signatureShareList,proto3" json:"signatureShareList"`
	SignatureShareCount            uint64                      `protobuf:"varint,23,opt,name=signatureShareCount,proto3" json:"signatureShareCount,omitempty"`
	SignedMessageList              []SignedMessage             `protobuf:"bytes,24,rep,name=signedMessageList,proto3" json:"signedMessageList"`
	SignedMessageCount             uint64                      `protobuf:"varint,25,opt,name=signedMessageCount,proto3" json:"signedMessageCount,omitempty"`
	MeditationSummoningList        []MeditationSummoning       `protobuf:"bytes,26,rep,name=meditationSummoningList,proto3" json:"meditationSummoningList"`
	MeditationSummoningCount       uint64                      `protobuf:"varint,27,opt,name=meditationSummoningCount,proto3" json:"meditationSummoningCount,omitempty"`
	MeditationList                 []Meditation                `protobuf:"bytes,28,rep,name=meditationList,proto3" json:"meditationList"`
	MeditationCount                uint64                      `protobuf:"varint,29,opt,name=meditationCount,proto3" json:"meditationCount,omitempty"`
	ScriptureList                  []Scripture                 `protobuf:"bytes,30,rep,name=scriptureList,proto3" json:"scriptureList"`
	ScriptureSignatureRequestList  []ScriptureSignatureRequest `protobuf:"bytes,31,rep,name=scriptureSignatureRequestList,proto3" json:"scriptureSignatureRequestList"`
	ScriptureSignatureRequestCount uint64                      `protobuf:"varint,32,opt,name=scriptureSignatureRequestCount,proto3" json:"scriptureSignatureRequestCount,omitempty"`
	ScriptureSignatureShareList    []ScriptureSignatureShare   `protobuf:"bytes,33,rep,name=scriptureSignatureShareList,proto3" json:"scriptureSignatureShareList"`
	ScriptureSignatureShareCount   uint64                      `protobuf:"varint,34,opt,name=scriptureSignatureShareCount,proto3" json:"scriptureSignatureShareCount,omitempty"`
	SignedScriptureList            []SignedScripture           `protobuf:"bytes,35,rep,name=signedScriptureList,proto3" json:"signedScriptureList"`
	SignedScriptureListList        []SignedScriptureList       `protobuf:"bytes,36,rep,name=signedScriptureListList,proto3" json:"signedScriptureListList"`
	SignedScriptureListCount       uint64                      `protobuf:"varint,37,opt,name=signedScriptureListCount,proto3" json:"signedScriptureListCount,omitempty"`
	// this line is used by starport scaffolding # genesis/proto/state
	BlessingList                       []Blessing                      `protobuf:"bytes,38,rep,name=blessingList,proto3" json:"blessingList"`
	BlessingCount                      uint64                          `protobuf:"varint,39,opt,name=blessingCount,proto3" json:"blessingCount,omitempty"`
	BlessingReceiptList                []BlessingReceipt               `protobuf:"bytes,40,rep,name=blessingReceiptList,proto3" json:"blessingReceiptList"`
	ImploringList                      []Imploring                     `protobuf:"bytes,41,rep,name=imploringList,proto3" json:"imploringList"`
	ImploringCount                     uint64                          `protobuf:"varint,42,opt,name=imploringCount,proto3" json:"imploringCount,omitempty"`
	KillConjuringList                  []KillConjuring                 `protobuf:"bytes,43,rep,name=killConjuringList,proto3" json:"killConjuringList"`
	KillConjuringCount                 uint64                          `protobuf:"varint,44,opt,name=killConjuringCount,proto3" json:"killConjuringCount,omitempty"`
	KillImploringList                  []KillImploring                 `protobuf:"bytes,45,rep,name=killImploringList,proto3" json:"killImploringList"`
	KillImploringCount                 uint64                          `protobuf:"varint,46,opt,name=killImploringCount,proto3" json:"killImploringCount,omitempty"`
	KillMeditationSummoningList        []KillMeditationSummoning       `protobuf:"bytes,47,rep,name=killMeditationSummoningList,proto3" json:"killMeditationSummoningList"`
	KillMeditationSummoningCount       uint64                          `protobuf:"varint,48,opt,name=killMeditationSummoningCount,proto3" json:"killMeditationSummoningCount,omitempty"`
	KillMagicKeySummoningList          []KillMagicKeySummoning         `protobuf:"bytes,49,rep,name=killMagicKeySummoningList,proto3" json:"killMagicKeySummoningList"`
	KillMagicKeySummoningCount         uint64                          `protobuf:"varint,50,opt,name=killMagicKeySummoningCount,proto3" json:"killMagicKeySummoningCount,omitempty"`
	KillScriptureSignatureRequestList  []KillScriptureSignatureRequest `protobuf:"bytes,51,rep,name=killScriptureSignatureRequestList,proto3" json:"killScriptureSignatureRequestList"`
	KillScriptureSignatureRequestCount uint64                          `protobuf:"varint,52,opt,name=killScriptureSignatureRequestCount,proto3" json:"killScriptureSignatureRequestCount,omitempty"`
	KillSignatureRequestList           []KillSignatureRequest          `protobuf:"bytes,53,rep,name=killSignatureRequestList,proto3" json:"killSignatureRequestList"`
	KillSignatureRequestCount          uint64                          `protobuf:"varint,54,opt,name=killSignatureRequestCount,proto3" json:"killSignatureRequestCount,omitempty"`
	EncryptedMagicKeyShareList         []EncryptedMagicKeyShare        `protobuf:"bytes,55,rep,name=encryptedMagicKeyShareList,proto3" json:"encryptedMagicKeyShareList"`
	EncryptedPreSignList               []EncryptedPreSign              `protobuf:"bytes,56,rep,name=encryptedPreSignList,proto3" json:"encryptedPreSignList"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_b91451736fc37c9e, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetMagicKeyList() []MagicKey {
	if m != nil {
		return m.MagicKeyList
	}
	return nil
}

func (m *GenesisState) GetMagicKeyCount() uint64 {
	if m != nil {
		return m.MagicKeyCount
	}
	return 0
}

func (m *GenesisState) GetMagicKeySummoningList() []MagicKeySummoning {
	if m != nil {
		return m.MagicKeySummoningList
	}
	return nil
}

func (m *GenesisState) GetMagicKeySummoningCount() uint64 {
	if m != nil {
		return m.MagicKeySummoningCount
	}
	return 0
}

func (m *GenesisState) GetHighCouncilList() []HighCouncil {
	if m != nil {
		return m.HighCouncilList
	}
	return nil
}

func (m *GenesisState) GetHighCouncilCount() uint64 {
	if m != nil {
		return m.HighCouncilCount
	}
	return 0
}

func (m *GenesisState) GetCurrentMagicKey() *CurrentMagicKey {
	if m != nil {
		return m.CurrentMagicKey
	}
	return nil
}

func (m *GenesisState) GetHighCouncilConjuringsList() []HighCouncilConjurings {
	if m != nil {
		return m.HighCouncilConjuringsList
	}
	return nil
}

func (m *GenesisState) GetHighCouncilConjuringsCount() uint64 {
	if m != nil {
		return m.HighCouncilConjuringsCount
	}
	return 0
}

func (m *GenesisState) GetSpiritConjuringPoemsList() []SpiritConjuringPoems {
	if m != nil {
		return m.SpiritConjuringPoemsList
	}
	return nil
}

func (m *GenesisState) GetSpiritConjuringPoemsCount() uint64 {
	if m != nil {
		return m.SpiritConjuringPoemsCount
	}
	return 0
}

func (m *GenesisState) GetVerseList() []Verse {
	if m != nil {
		return m.VerseList
	}
	return nil
}

func (m *GenesisState) GetVerseCount() uint64 {
	if m != nil {
		return m.VerseCount
	}
	return 0
}

func (m *GenesisState) GetVisionList() []Vision {
	if m != nil {
		return m.VisionList
	}
	return nil
}

func (m *GenesisState) GetVisionCount() uint64 {
	if m != nil {
		return m.VisionCount
	}
	return 0
}

func (m *GenesisState) GetMessageList() []Message {
	if m != nil {
		return m.MessageList
	}
	return nil
}

func (m *GenesisState) GetMessageCount() uint64 {
	if m != nil {
		return m.MessageCount
	}
	return 0
}

func (m *GenesisState) GetSignatureRequestList() []SignatureRequest {
	if m != nil {
		return m.SignatureRequestList
	}
	return nil
}

func (m *GenesisState) GetSignatureRequestCount() uint64 {
	if m != nil {
		return m.SignatureRequestCount
	}
	return 0
}

func (m *GenesisState) GetSignatureShareList() []SignatureShare {
	if m != nil {
		return m.SignatureShareList
	}
	return nil
}

func (m *GenesisState) GetSignatureShareCount() uint64 {
	if m != nil {
		return m.SignatureShareCount
	}
	return 0
}

func (m *GenesisState) GetSignedMessageList() []SignedMessage {
	if m != nil {
		return m.SignedMessageList
	}
	return nil
}

func (m *GenesisState) GetSignedMessageCount() uint64 {
	if m != nil {
		return m.SignedMessageCount
	}
	return 0
}

func (m *GenesisState) GetMeditationSummoningList() []MeditationSummoning {
	if m != nil {
		return m.MeditationSummoningList
	}
	return nil
}

func (m *GenesisState) GetMeditationSummoningCount() uint64 {
	if m != nil {
		return m.MeditationSummoningCount
	}
	return 0
}

func (m *GenesisState) GetMeditationList() []Meditation {
	if m != nil {
		return m.MeditationList
	}
	return nil
}

func (m *GenesisState) GetMeditationCount() uint64 {
	if m != nil {
		return m.MeditationCount
	}
	return 0
}

func (m *GenesisState) GetScriptureList() []Scripture {
	if m != nil {
		return m.ScriptureList
	}
	return nil
}

func (m *GenesisState) GetScriptureSignatureRequestList() []ScriptureSignatureRequest {
	if m != nil {
		return m.ScriptureSignatureRequestList
	}
	return nil
}

func (m *GenesisState) GetScriptureSignatureRequestCount() uint64 {
	if m != nil {
		return m.ScriptureSignatureRequestCount
	}
	return 0
}

func (m *GenesisState) GetScriptureSignatureShareList() []ScriptureSignatureShare {
	if m != nil {
		return m.ScriptureSignatureShareList
	}
	return nil
}

func (m *GenesisState) GetScriptureSignatureShareCount() uint64 {
	if m != nil {
		return m.ScriptureSignatureShareCount
	}
	return 0
}

func (m *GenesisState) GetSignedScriptureList() []SignedScripture {
	if m != nil {
		return m.SignedScriptureList
	}
	return nil
}

func (m *GenesisState) GetSignedScriptureListList() []SignedScriptureList {
	if m != nil {
		return m.SignedScriptureListList
	}
	return nil
}

func (m *GenesisState) GetSignedScriptureListCount() uint64 {
	if m != nil {
		return m.SignedScriptureListCount
	}
	return 0
}

func (m *GenesisState) GetBlessingList() []Blessing {
	if m != nil {
		return m.BlessingList
	}
	return nil
}

func (m *GenesisState) GetBlessingCount() uint64 {
	if m != nil {
		return m.BlessingCount
	}
	return 0
}

func (m *GenesisState) GetBlessingReceiptList() []BlessingReceipt {
	if m != nil {
		return m.BlessingReceiptList
	}
	return nil
}

func (m *GenesisState) GetImploringList() []Imploring {
	if m != nil {
		return m.ImploringList
	}
	return nil
}

func (m *GenesisState) GetImploringCount() uint64 {
	if m != nil {
		return m.ImploringCount
	}
	return 0
}

func (m *GenesisState) GetKillConjuringList() []KillConjuring {
	if m != nil {
		return m.KillConjuringList
	}
	return nil
}

func (m *GenesisState) GetKillConjuringCount() uint64 {
	if m != nil {
		return m.KillConjuringCount
	}
	return 0
}

func (m *GenesisState) GetKillImploringList() []KillImploring {
	if m != nil {
		return m.KillImploringList
	}
	return nil
}

func (m *GenesisState) GetKillImploringCount() uint64 {
	if m != nil {
		return m.KillImploringCount
	}
	return 0
}

func (m *GenesisState) GetKillMeditationSummoningList() []KillMeditationSummoning {
	if m != nil {
		return m.KillMeditationSummoningList
	}
	return nil
}

func (m *GenesisState) GetKillMeditationSummoningCount() uint64 {
	if m != nil {
		return m.KillMeditationSummoningCount
	}
	return 0
}

func (m *GenesisState) GetKillMagicKeySummoningList() []KillMagicKeySummoning {
	if m != nil {
		return m.KillMagicKeySummoningList
	}
	return nil
}

func (m *GenesisState) GetKillMagicKeySummoningCount() uint64 {
	if m != nil {
		return m.KillMagicKeySummoningCount
	}
	return 0
}

func (m *GenesisState) GetKillScriptureSignatureRequestList() []KillScriptureSignatureRequest {
	if m != nil {
		return m.KillScriptureSignatureRequestList
	}
	return nil
}

func (m *GenesisState) GetKillScriptureSignatureRequestCount() uint64 {
	if m != nil {
		return m.KillScriptureSignatureRequestCount
	}
	return 0
}

func (m *GenesisState) GetKillSignatureRequestList() []KillSignatureRequest {
	if m != nil {
		return m.KillSignatureRequestList
	}
	return nil
}

func (m *GenesisState) GetKillSignatureRequestCount() uint64 {
	if m != nil {
		return m.KillSignatureRequestCount
	}
	return 0
}

func (m *GenesisState) GetEncryptedMagicKeyShareList() []EncryptedMagicKeyShare {
	if m != nil {
		return m.EncryptedMagicKeyShareList
	}
	return nil
}

func (m *GenesisState) GetEncryptedPreSignList() []EncryptedPreSign {
	if m != nil {
		return m.EncryptedPreSignList
	}
	return nil
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "eightball.eightball.GenesisState")
}

func init() { proto.RegisterFile("eightball/eightball/genesis.proto", fileDescriptor_b91451736fc37c9e) }

var fileDescriptor_b91451736fc37c9e = []byte{
	// 1346 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x98, 0xdf, 0x4f, 0x1b, 0x47,
	0x10, 0xc7, 0xb1, 0x92, 0xa6, 0xcd, 0x42, 0x42, 0xb2, 0x40, 0x62, 0x0c, 0x18, 0x63, 0x08, 0x35,
	0x3f, 0x62, 0x08, 0x84, 0xb4, 0x8d, 0xaa, 0x48, 0x85, 0xa6, 0x29, 0xa5, 0x44, 0x08, 0x4b, 0x48,
	0xad, 0x2a, 0x9d, 0x8c, 0x59, 0x99, 0x2b, 0xf6, 0x9d, 0x73, 0x77, 0x8e, 0x4a, 0xff, 0x80, 0x3e,
	0xf7, 0xcf, 0xca, 0x63, 0x1e, 0xf3, 0x54, 0x55, 0xf0, 0x8f, 0x54, 0x3b, 0xb3, 0x7b, 0xbf, 0x3c,
	0xbb, 0xa6, 0x6f, 0x78, 0xe6, 0x3b, 0x33, 0x9f, 0xdd, 0xbd, 0x9d, 0xdd, 0x85, 0x2d, 0x08, 0xb7,
	0x7d, 0x1e, 0x9d, 0x36, 0x3b, 0x9d, 0x8d, 0xe4, 0xaf, 0xb6, 0xf0, 0x44, 0xe8, 0x86, 0xf5, 0x5e,
	0xe0, 0x47, 0x3e, 0x9f, 0x88, 0x1d, 0xf5, 0xf8, 0xaf, 0xd2, 0x64, 0xdb, 0x6f, 0xfb, 0xe0, 0xdf,
	0x90, 0x7f, 0xa1, 0xb4, 0x54, 0xa1, 0xb2, 0xf5, 0x9a, 0x41, 0xb3, 0xab, 0x92, 0x95, 0x16, 0x29,
	0x45, 0xb7, 0xd9, 0x76, 0x5b, 0xce, 0x85, 0xb8, 0x54, 0xa2, 0xa7, 0x56, 0x91, 0x13, 0xf6, 0xbb,
	0x5d, 0xdf, 0x73, 0xbd, 0xb6, 0x92, 0x2f, 0x53, 0xf2, 0x73, 0xb7, 0x7d, 0xee, 0xb4, 0xfc, 0xbe,
	0xd7, 0x72, 0x3b, 0x4a, 0xb7, 0x46, 0xe9, 0x5a, 0xfd, 0x20, 0x10, 0x5e, 0xe4, 0xe4, 0x19, 0x9e,
	0x0d, 0x4b, 0xea, 0xb4, 0x7c, 0xef, 0xf7, 0x7e, 0xe0, 0x7a, 0x6d, 0x3d, 0xb6, 0x4d, 0x2a, 0x24,
	0xec, 0xb9, 0x81, 0x1b, 0x25, 0x62, 0xa7, 0xe7, 0x8b, 0x78, 0x36, 0xe6, 0xa9, 0x88, 0xf7, 0x22,
	0x08, 0x85, 0x6d, 0x42, 0xdf, 0xbb, 0xa1, 0xeb, 0x7b, 0x4a, 0x41, 0x2e, 0x60, 0x57, 0x84, 0x61,
	0xb3, 0x2d, 0x6c, 0xe3, 0x0e, 0xdd, 0xb6, 0xd7, 0x8c, 0xfa, 0x81, 0x70, 0x02, 0xf1, 0xae, 0x2f,
	0xc2, 0x48, 0x89, 0x57, 0xec, 0xe2, 0xf0, 0xbc, 0x19, 0xe8, 0xbc, 0x35, 0x93, 0x54, 0x9c, 0x39,
	0x59, 0x82, 0x3a, 0x0d, 0x79, 0xe6, 0x46, 0xcd, 0xc8, 0xf5, 0xbd, 0x81, 0x15, 0x5d, 0xb2, 0xeb,
	0x6d, 0xdf, 0x52, 0xd8, 0x0a, 0xdc, 0x9e, 0x44, 0x55, 0xa2, 0x1d, 0xab, 0xc8, 0x31, 0x4d, 0xc3,
	0xf6, 0x4d, 0xc3, 0xd2, 0x13, 0xb2, 0x6a, 0x99, 0x90, 0x3c, 0xd7, 0xc6, 0x4d, 0xb4, 0x4e, 0xc7,
	0x8d, 0x89, 0xaa, 0x54, 0xc0, 0x69, 0x47, 0x84, 0x61, 0x32, 0x6f, 0xab, 0x36, 0x8d, 0x13, 0x88,
	0x96, 0x70, 0x7b, 0x91, 0x6d, 0xf6, 0xdc, 0x6e, 0xaf, 0xe3, 0x07, 0x49, 0x42, 0x72, 0x89, 0x2f,
	0xdc, 0x4e, 0xea, 0xeb, 0x1f, 0xaa, 0xcc, 0xe7, 0xdc, 0x36, 0x2a, 0x2d, 0x5f, 0xc4, 0x96, 0x39,
	0xc8, 0xd8, 0x17, 0x5e, 0x1a, 0x63, 0x86, 0xaf, 0xff, 0xa6, 0x39, 0xf6, 0xff, 0x7c, 0x31, 0xc2,
	0x6b, 0x05, 0x97, 0xbd, 0x48, 0x6e, 0x88, 0x04, 0x33, 0xf5, 0xc5, 0xac, 0xdb, 0x83, 0x7a, 0x8a,
	0x10, 0xd5, 0xd5, 0x4f, 0x15, 0x36, 0xf6, 0x06, 0x7b, 0x73, 0x23, 0x6a, 0x46, 0x82, 0x7f, 0xc3,
	0xee, 0x60, 0x77, 0x2d, 0x16, 0x2a, 0x85, 0xda, 0xe8, 0xd6, 0x4c, 0x9d, 0xe8, 0xd5, 0xf5, 0x23,
	0x90, 0xec, 0xde, 0xfe, 0xf0, 0xcf, 0xfc, 0xc8, 0xb1, 0x0a, 0xe0, 0x6f, 0xd8, 0x18, 0x20, 0x1d,
	0x88, 0xcb, 0x9f, 0xdd, 0x30, 0x2a, 0xde, 0xaa, 0xdc, 0xaa, 0x8d, 0x6e, 0xcd, 0x91, 0x09, 0x0e,
	0x95, 0x50, 0xa5, 0xc8, 0x04, 0xf2, 0x25, 0x76, 0x4f, 0xff, 0xde, 0xf3, 0xfb, 0x5e, 0x54, 0xbc,
	0x5d, 0x29, 0xd4, 0x6e, 0x1f, 0x67, 0x8d, 0xfc, 0x94, 0x4d, 0x69, 0x43, 0x43, 0x2f, 0x13, 0xd4,
	0xfd, 0x0c, 0xea, 0x2e, 0x5b, 0xeb, 0xc6, 0x11, 0x0a, 0x80, 0x4e, 0xc5, 0x5f, 0xb0, 0x47, 0x03,
	0x0e, 0x44, 0xba, 0x03, 0x48, 0x06, 0x2f, 0x3f, 0x62, 0xe3, 0xb2, 0xb1, 0xef, 0x61, 0x5f, 0x07,
	0xaa, 0xcf, 0x81, 0xaa, 0x42, 0x52, 0xfd, 0x98, 0x68, 0x15, 0x4f, 0x3e, 0x9c, 0xaf, 0xb2, 0x07,
	0x29, 0x13, 0x32, 0x7c, 0x01, 0x0c, 0x03, 0x76, 0xfe, 0x96, 0x8d, 0xab, 0x33, 0x48, 0x0f, 0xb7,
	0x78, 0x17, 0x16, 0x73, 0x89, 0xac, 0xbe, 0x97, 0xd5, 0x1e, 0xe7, 0x83, 0xb9, 0xc7, 0xa6, 0x33,
	0x35, 0xf4, 0x21, 0x05, 0xe3, 0x62, 0x30, 0xae, 0xd5, 0x61, 0xe3, 0x4a, 0xa2, 0xd4, 0x08, 0xcd,
	0x29, 0xf9, 0x2b, 0x56, 0x22, 0x9d, 0x38, 0xea, 0x51, 0x18, 0xb5, 0x45, 0xc1, 0x2f, 0x58, 0x11,
	0xcf, 0xc8, 0xd8, 0x71, 0x24, 0x4f, 0x48, 0xc0, 0x1d, 0x03, 0xdc, 0x15, 0x12, 0xb7, 0x41, 0x04,
	0x29, 0x5a, 0x63, 0x42, 0xfe, 0x2d, 0x9b, 0xa6, 0x7c, 0xc8, 0x7a, 0x0f, 0x58, 0xcd, 0x02, 0xfe,
	0x8a, 0xdd, 0x85, 0xc3, 0x19, 0xd8, 0xee, 0x03, 0x5b, 0x89, 0x64, 0x3b, 0x91, 0x2a, 0x05, 0x93,
	0x84, 0xf0, 0x32, 0x63, 0xf0, 0x03, 0xcb, 0x8d, 0x43, 0xb9, 0x94, 0x85, 0x7f, 0xc7, 0x18, 0x9e,
	0xed, 0x50, 0xe0, 0x01, 0x14, 0xa0, 0xb7, 0xf4, 0x09, 0xc8, 0x54, 0x85, 0x54, 0x10, 0xaf, 0xb0,
	0x51, 0xfc, 0x85, 0x35, 0x1e, 0x42, 0x8d, 0xb4, 0x89, 0x7f, 0xcf, 0x46, 0xd5, 0xe1, 0x0c, 0x55,
	0x38, 0x54, 0x99, 0xa5, 0xf7, 0x1f, 0xea, 0x54, 0x99, 0x74, 0x18, 0xaf, 0xb2, 0x31, 0xf5, 0x13,
	0x0b, 0x4d, 0x40, 0xa1, 0x8c, 0x8d, 0x3b, 0x6c, 0x32, 0x6e, 0x96, 0xc7, 0xd8, 0x2b, 0xa1, 0xe4,
	0x24, 0x94, 0x7c, 0x42, 0xaf, 0x6a, 0x2e, 0x40, 0xd5, 0x26, 0x13, 0xf1, 0xe7, 0x6c, 0x2a, 0x6f,
	0x47, 0x9a, 0x29, 0xa0, 0xa1, 0x9d, 0xfc, 0x17, 0xc6, 0x63, 0x47, 0x43, 0xf6, 0x62, 0x80, 0x7a,
	0x04, 0x50, 0x8b, 0x76, 0x28, 0x90, 0x2b, 0x24, 0x22, 0x09, 0xdf, 0x64, 0x13, 0x59, 0x2b, 0xe2,
	0x3c, 0x06, 0x1c, 0xca, 0xc5, 0x4f, 0xd8, 0x43, 0x3c, 0xf4, 0x0f, 0x53, 0x6b, 0x52, 0x04, 0x96,
	0xaa, 0x91, 0x25, 0x56, 0x2b, 0x94, 0xc1, 0x14, 0xbc, 0x8e, 0x83, 0x8c, 0x8d, 0x08, 0x32, 0x0d,
	0x20, 0x84, 0x87, 0x9f, 0xb3, 0xc7, 0xc9, 0xe9, 0x9b, 0xed, 0xd0, 0x25, 0xa0, 0xa9, 0x19, 0xbe,
	0x90, 0x81, 0x18, 0xc5, 0x64, 0x4a, 0xc7, 0x5f, 0xb2, 0x22, 0xe1, 0x42, 0xbe, 0x19, 0xe0, 0x33,
	0xfa, 0xf9, 0x21, 0xbb, 0x9f, 0xf8, 0x00, 0x6e, 0x16, 0xe0, 0xe6, 0x87, 0xc0, 0x29, 0xa6, 0x5c,
	0x30, 0xaf, 0xb1, 0xf1, 0xc4, 0x82, 0x04, 0x73, 0x40, 0x90, 0x37, 0xf3, 0x9f, 0xd8, 0xbd, 0xf8,
	0xce, 0x00, 0x75, 0xcb, 0x50, 0xb7, 0x4c, 0x2f, 0x91, 0x56, 0xaa, 0xb2, 0xd9, 0x50, 0xfe, 0x27,
	0x9b, 0x8b, 0x0d, 0x0d, 0x6a, 0x7f, 0xcc, 0x43, 0xee, 0xba, 0x3d, 0xb7, 0x61, 0xa3, 0xd8, 0x53,
	0xf3, 0x1f, 0x58, 0xd9, 0x28, 0xc0, 0x09, 0xa8, 0xc0, 0x04, 0x0c, 0x51, 0xf1, 0x88, 0xcd, 0x0c,
	0x2a, 0x92, 0xcd, 0xb4, 0x00, 0x23, 0x58, 0xbf, 0xe1, 0x08, 0xd2, 0xbb, 0xca, 0x96, 0x96, 0xef,
	0xb2, 0x59, 0x83, 0x1b, 0xd9, 0xab, 0xc0, 0x6e, 0xd5, 0xf0, 0xdf, 0x70, 0x8b, 0x8a, 0xb3, 0x46,
	0x66, 0x3d, 0x17, 0x81, 0x78, 0xc9, 0xb2, 0xe5, 0xf2, 0xab, 0x4a, 0xa5, 0x91, 0xdb, 0x88, 0x30,
	0x43, 0x85, 0x25, 0xcb, 0x36, 0x6a, 0x0c, 0xc6, 0xe8, 0x6d, 0x64, 0x48, 0x27, 0xb7, 0x11, 0xe1,
	0xc2, 0x79, 0x78, 0x82, 0xdb, 0xc8, 0xe4, 0x97, 0x77, 0x3f, 0xfd, 0x28, 0x00, 0xb4, 0x65, 0xcb,
	0xdd, 0x6f, 0x57, 0x09, 0xf5, 0xdd, 0x2f, 0x1d, 0x28, 0xef, 0x7e, 0xfa, 0x37, 0x56, 0xfe, 0x12,
	0xef, 0x7e, 0x19, 0xa3, 0x9c, 0x72, 0x6d, 0x38, 0xc6, 0x27, 0x08, 0x54, 0xad, 0x59, 0xa6, 0x7c,
	0x37, 0xab, 0xd7, 0x53, 0x4e, 0xa4, 0x91, 0x5b, 0x33, 0x7e, 0x61, 0x40, 0xde, 0x15, 0xcb, 0xd6,
	0xdc, 0xd7, 0x4a, 0xbd, 0x35, 0x33, 0xa1, 0x7c, 0x99, 0xdd, 0x8f, 0x0d, 0x38, 0xa0, 0x55, 0x18,
	0x50, 0xce, 0x2a, 0xbb, 0xb6, 0x7c, 0x0b, 0xc4, 0x77, 0x04, 0xa8, 0xbb, 0x66, 0xe9, 0xda, 0x07,
	0x69, 0xb5, 0xee, 0xda, 0x03, 0x29, 0x64, 0xd7, 0xce, 0x18, 0x91, 0x61, 0x1d, 0xbb, 0xf6, 0xa0,
	0x47, 0x73, 0xec, 0x67, 0xc6, 0xff, 0x74, 0x08, 0x47, 0x7e, 0x0e, 0x06, 0x53, 0x68, 0x8e, 0xfd,
	0xec, 0x5c, 0xd4, 0x13, 0x8e, 0xac, 0x47, 0xb6, 0x03, 0x69, 0x3d, 0x34, 0x9c, 0x20, 0x1b, 0x96,
	0x76, 0x70, 0x40, 0xc7, 0xe9, 0x76, 0x60, 0x49, 0x2b, 0xdb, 0x81, 0xc1, 0x8d, 0xbc, 0x9b, 0xd8,
	0x0e, 0x6c, 0x1a, 0x79, 0x5b, 0x06, 0x3f, 0xf9, 0x36, 0x79, 0x66, 0xb9, 0x2d, 0x1f, 0x50, 0x51,
	0xfa, 0xb6, 0x6c, 0x4c, 0x29, 0x6f, 0xcb, 0xa4, 0x13, 0x89, 0xb7, 0xf0, 0xb6, 0x6c, 0x56, 0xf0,
	0xbf, 0x0a, 0x6c, 0x41, 0xba, 0x1b, 0xd6, 0x13, 0x64, 0x1b, 0xc0, 0xb7, 0x8c, 0xe0, 0xc3, 0x4e,
	0x91, 0xe1, 0x25, 0xf8, 0x5b, 0x56, 0xb5, 0x8a, 0x70, 0x40, 0xcf, 0x61, 0x40, 0x37, 0x50, 0xca,
	0x67, 0x00, 0xa8, 0xa8, 0xe1, 0xec, 0x58, 0x9e, 0x01, 0x07, 0x44, 0x90, 0x7e, 0x06, 0x98, 0x12,
	0xca, 0x67, 0x00, 0xe5, 0x43, 0xe6, 0x17, 0xf8, 0x0c, 0x30, 0x0a, 0xf8, 0x3b, 0x56, 0x8a, 0x9f,
	0xe8, 0xf1, 0x32, 0xc5, 0x67, 0xdf, 0x57, 0x00, 0xbb, 0x46, 0xc2, 0xbe, 0x26, 0xc3, 0x14, 0xae,
	0x25, 0xa9, 0xbc, 0x4a, 0xc7, 0xde, 0x23, 0x9c, 0x42, 0x28, 0xf6, 0xb5, 0xe5, 0x2a, 0xfd, 0x3a,
	0x17, 0xa0, 0xaf, 0xd2, 0x54, 0xa2, 0xdd, 0x9d, 0x0f, 0x57, 0xe5, 0xc2, 0xc7, 0xab, 0x72, 0xe1,
	0xdf, 0xab, 0x72, 0xe1, 0xef, 0xeb, 0xf2, 0xc8, 0xc7, 0xeb, 0xf2, 0xc8, 0xa7, 0xeb, 0xf2, 0xc8,
	0xaf, 0x33, 0xc9, 0x3f, 0x26, 0xfe, 0x48, 0xfd, 0x93, 0x22, 0xba, 0xec, 0x89, 0xf0, 0xf4, 0x0e,
	0xfc, 0x63, 0x62, 0xfb, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x19, 0x17, 0xe2, 0x6f, 0x47, 0x16,
	0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EncryptedPreSignList) > 0 {
		for iNdEx := len(m.EncryptedPreSignList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EncryptedPreSignList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0xc2
		}
	}
	if len(m.EncryptedMagicKeyShareList) > 0 {
		for iNdEx := len(m.EncryptedMagicKeyShareList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EncryptedMagicKeyShareList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0xba
		}
	}
	if m.KillSignatureRequestCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.KillSignatureRequestCount))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb0
	}
	if len(m.KillSignatureRequestList) > 0 {
		for iNdEx := len(m.KillSignatureRequestList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KillSignatureRequestList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0xaa
		}
	}
	if m.KillScriptureSignatureRequestCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.KillScriptureSignatureRequestCount))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa0
	}
	if len(m.KillScriptureSignatureRequestList) > 0 {
		for iNdEx := len(m.KillScriptureSignatureRequestList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KillScriptureSignatureRequestList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0x9a
		}
	}
	if m.KillMagicKeySummoningCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.KillMagicKeySummoningCount))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x90
	}
	if len(m.KillMagicKeySummoningList) > 0 {
		for iNdEx := len(m.KillMagicKeySummoningList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KillMagicKeySummoningList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0x8a
		}
	}
	if m.KillMeditationSummoningCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.KillMeditationSummoningCount))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x80
	}
	if len(m.KillMeditationSummoningList) > 0 {
		for iNdEx := len(m.KillMeditationSummoningList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KillMeditationSummoningList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xfa
		}
	}
	if m.KillImploringCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.KillImploringCount))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xf0
	}
	if len(m.KillImploringList) > 0 {
		for iNdEx := len(m.KillImploringList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KillImploringList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xea
		}
	}
	if m.KillConjuringCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.KillConjuringCount))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xe0
	}
	if len(m.KillConjuringList) > 0 {
		for iNdEx := len(m.KillConjuringList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KillConjuringList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xda
		}
	}
	if m.ImploringCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.ImploringCount))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd0
	}
	if len(m.ImploringList) > 0 {
		for iNdEx := len(m.ImploringList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ImploringList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xca
		}
	}
	if len(m.BlessingReceiptList) > 0 {
		for iNdEx := len(m.BlessingReceiptList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BlessingReceiptList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xc2
		}
	}
	if m.BlessingCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.BlessingCount))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb8
	}
	if len(m.BlessingList) > 0 {
		for iNdEx := len(m.BlessingList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BlessingList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xb2
		}
	}
	if m.SignedScriptureListCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.SignedScriptureListCount))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa8
	}
	if len(m.SignedScriptureListList) > 0 {
		for iNdEx := len(m.SignedScriptureListList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SignedScriptureListList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xa2
		}
	}
	if len(m.SignedScriptureList) > 0 {
		for iNdEx := len(m.SignedScriptureList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SignedScriptureList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x9a
		}
	}
	if m.ScriptureSignatureShareCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.ScriptureSignatureShareCount))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x90
	}
	if len(m.ScriptureSignatureShareList) > 0 {
		for iNdEx := len(m.ScriptureSignatureShareList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ScriptureSignatureShareList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x8a
		}
	}
	if m.ScriptureSignatureRequestCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.ScriptureSignatureRequestCount))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x80
	}
	if len(m.ScriptureSignatureRequestList) > 0 {
		for iNdEx := len(m.ScriptureSignatureRequestList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ScriptureSignatureRequestList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xfa
		}
	}
	if len(m.ScriptureList) > 0 {
		for iNdEx := len(m.ScriptureList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ScriptureList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xf2
		}
	}
	if m.MeditationCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.MeditationCount))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe8
	}
	if len(m.MeditationList) > 0 {
		for iNdEx := len(m.MeditationList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MeditationList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xe2
		}
	}
	if m.MeditationSummoningCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.MeditationSummoningCount))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd8
	}
	if len(m.MeditationSummoningList) > 0 {
		for iNdEx := len(m.MeditationSummoningList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MeditationSummoningList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xd2
		}
	}
	if m.SignedMessageCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.SignedMessageCount))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	if len(m.SignedMessageList) > 0 {
		for iNdEx := len(m.SignedMessageList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SignedMessageList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xc2
		}
	}
	if m.SignatureShareCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.SignatureShareCount))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if len(m.SignatureShareList) > 0 {
		for iNdEx := len(m.SignatureShareList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SignatureShareList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xb2
		}
	}
	if m.SignatureRequestCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.SignatureRequestCount))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if len(m.SignatureRequestList) > 0 {
		for iNdEx := len(m.SignatureRequestList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SignatureRequestList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa2
		}
	}
	if m.MessageCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.MessageCount))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if len(m.MessageList) > 0 {
		for iNdEx := len(m.MessageList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MessageList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x92
		}
	}
	if m.VisionCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.VisionCount))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if len(m.VisionList) > 0 {
		for iNdEx := len(m.VisionList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VisionList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
	}
	if m.VerseCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.VerseCount))
		i--
		dAtA[i] = 0x78
	}
	if len(m.VerseList) > 0 {
		for iNdEx := len(m.VerseList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VerseList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x72
		}
	}
	if m.SpiritConjuringPoemsCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.SpiritConjuringPoemsCount))
		i--
		dAtA[i] = 0x68
	}
	if len(m.SpiritConjuringPoemsList) > 0 {
		for iNdEx := len(m.SpiritConjuringPoemsList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SpiritConjuringPoemsList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if m.HighCouncilConjuringsCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.HighCouncilConjuringsCount))
		i--
		dAtA[i] = 0x58
	}
	if len(m.HighCouncilConjuringsList) > 0 {
		for iNdEx := len(m.HighCouncilConjuringsList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.HighCouncilConjuringsList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if m.CurrentMagicKey != nil {
		{
			size, err := m.CurrentMagicKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.HighCouncilCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.HighCouncilCount))
		i--
		dAtA[i] = 0x40
	}
	if len(m.HighCouncilList) > 0 {
		for iNdEx := len(m.HighCouncilList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.HighCouncilList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.MagicKeySummoningCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.MagicKeySummoningCount))
		i--
		dAtA[i] = 0x30
	}
	if len(m.MagicKeySummoningList) > 0 {
		for iNdEx := len(m.MagicKeySummoningList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MagicKeySummoningList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.MagicKeyCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.MagicKeyCount))
		i--
		dAtA[i] = 0x20
	}
	if len(m.MagicKeyList) > 0 {
		for iNdEx := len(m.MagicKeyList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MagicKeyList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.MagicKeyList) > 0 {
		for _, e := range m.MagicKeyList {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.MagicKeyCount != 0 {
		n += 1 + sovGenesis(uint64(m.MagicKeyCount))
	}
	if len(m.MagicKeySummoningList) > 0 {
		for _, e := range m.MagicKeySummoningList {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.MagicKeySummoningCount != 0 {
		n += 1 + sovGenesis(uint64(m.MagicKeySummoningCount))
	}
	if len(m.HighCouncilList) > 0 {
		for _, e := range m.HighCouncilList {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.HighCouncilCount != 0 {
		n += 1 + sovGenesis(uint64(m.HighCouncilCount))
	}
	if m.CurrentMagicKey != nil {
		l = m.CurrentMagicKey.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	if len(m.HighCouncilConjuringsList) > 0 {
		for _, e := range m.HighCouncilConjuringsList {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.HighCouncilConjuringsCount != 0 {
		n += 1 + sovGenesis(uint64(m.HighCouncilConjuringsCount))
	}
	if len(m.SpiritConjuringPoemsList) > 0 {
		for _, e := range m.SpiritConjuringPoemsList {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.SpiritConjuringPoemsCount != 0 {
		n += 1 + sovGenesis(uint64(m.SpiritConjuringPoemsCount))
	}
	if len(m.VerseList) > 0 {
		for _, e := range m.VerseList {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.VerseCount != 0 {
		n += 1 + sovGenesis(uint64(m.VerseCount))
	}
	if len(m.VisionList) > 0 {
		for _, e := range m.VisionList {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if m.VisionCount != 0 {
		n += 2 + sovGenesis(uint64(m.VisionCount))
	}
	if len(m.MessageList) > 0 {
		for _, e := range m.MessageList {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if m.MessageCount != 0 {
		n += 2 + sovGenesis(uint64(m.MessageCount))
	}
	if len(m.SignatureRequestList) > 0 {
		for _, e := range m.SignatureRequestList {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if m.SignatureRequestCount != 0 {
		n += 2 + sovGenesis(uint64(m.SignatureRequestCount))
	}
	if len(m.SignatureShareList) > 0 {
		for _, e := range m.SignatureShareList {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if m.SignatureShareCount != 0 {
		n += 2 + sovGenesis(uint64(m.SignatureShareCount))
	}
	if len(m.SignedMessageList) > 0 {
		for _, e := range m.SignedMessageList {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if m.SignedMessageCount != 0 {
		n += 2 + sovGenesis(uint64(m.SignedMessageCount))
	}
	if len(m.MeditationSummoningList) > 0 {
		for _, e := range m.MeditationSummoningList {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if m.MeditationSummoningCount != 0 {
		n += 2 + sovGenesis(uint64(m.MeditationSummoningCount))
	}
	if len(m.MeditationList) > 0 {
		for _, e := range m.MeditationList {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if m.MeditationCount != 0 {
		n += 2 + sovGenesis(uint64(m.MeditationCount))
	}
	if len(m.ScriptureList) > 0 {
		for _, e := range m.ScriptureList {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.ScriptureSignatureRequestList) > 0 {
		for _, e := range m.ScriptureSignatureRequestList {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if m.ScriptureSignatureRequestCount != 0 {
		n += 2 + sovGenesis(uint64(m.ScriptureSignatureRequestCount))
	}
	if len(m.ScriptureSignatureShareList) > 0 {
		for _, e := range m.ScriptureSignatureShareList {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if m.ScriptureSignatureShareCount != 0 {
		n += 2 + sovGenesis(uint64(m.ScriptureSignatureShareCount))
	}
	if len(m.SignedScriptureList) > 0 {
		for _, e := range m.SignedScriptureList {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.SignedScriptureListList) > 0 {
		for _, e := range m.SignedScriptureListList {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if m.SignedScriptureListCount != 0 {
		n += 2 + sovGenesis(uint64(m.SignedScriptureListCount))
	}
	if len(m.BlessingList) > 0 {
		for _, e := range m.BlessingList {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if m.BlessingCount != 0 {
		n += 2 + sovGenesis(uint64(m.BlessingCount))
	}
	if len(m.BlessingReceiptList) > 0 {
		for _, e := range m.BlessingReceiptList {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.ImploringList) > 0 {
		for _, e := range m.ImploringList {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if m.ImploringCount != 0 {
		n += 2 + sovGenesis(uint64(m.ImploringCount))
	}
	if len(m.KillConjuringList) > 0 {
		for _, e := range m.KillConjuringList {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if m.KillConjuringCount != 0 {
		n += 2 + sovGenesis(uint64(m.KillConjuringCount))
	}
	if len(m.KillImploringList) > 0 {
		for _, e := range m.KillImploringList {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if m.KillImploringCount != 0 {
		n += 2 + sovGenesis(uint64(m.KillImploringCount))
	}
	if len(m.KillMeditationSummoningList) > 0 {
		for _, e := range m.KillMeditationSummoningList {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if m.KillMeditationSummoningCount != 0 {
		n += 2 + sovGenesis(uint64(m.KillMeditationSummoningCount))
	}
	if len(m.KillMagicKeySummoningList) > 0 {
		for _, e := range m.KillMagicKeySummoningList {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if m.KillMagicKeySummoningCount != 0 {
		n += 2 + sovGenesis(uint64(m.KillMagicKeySummoningCount))
	}
	if len(m.KillScriptureSignatureRequestList) > 0 {
		for _, e := range m.KillScriptureSignatureRequestList {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if m.KillScriptureSignatureRequestCount != 0 {
		n += 2 + sovGenesis(uint64(m.KillScriptureSignatureRequestCount))
	}
	if len(m.KillSignatureRequestList) > 0 {
		for _, e := range m.KillSignatureRequestList {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if m.KillSignatureRequestCount != 0 {
		n += 2 + sovGenesis(uint64(m.KillSignatureRequestCount))
	}
	if len(m.EncryptedMagicKeyShareList) > 0 {
		for _, e := range m.EncryptedMagicKeyShareList {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.EncryptedPreSignList) > 0 {
		for _, e := range m.EncryptedPreSignList {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MagicKeyList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MagicKeyList = append(m.MagicKeyList, MagicKey{})
			if err := m.MagicKeyList[len(m.MagicKeyList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MagicKeyCount", wireType)
			}
			m.MagicKeyCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MagicKeyCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MagicKeySummoningList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MagicKeySummoningList = append(m.MagicKeySummoningList, MagicKeySummoning{})
			if err := m.MagicKeySummoningList[len(m.MagicKeySummoningList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MagicKeySummoningCount", wireType)
			}
			m.MagicKeySummoningCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MagicKeySummoningCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HighCouncilList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HighCouncilList = append(m.HighCouncilList, HighCouncil{})
			if err := m.HighCouncilList[len(m.HighCouncilList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HighCouncilCount", wireType)
			}
			m.HighCouncilCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HighCouncilCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentMagicKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CurrentMagicKey == nil {
				m.CurrentMagicKey = &CurrentMagicKey{}
			}
			if err := m.CurrentMagicKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HighCouncilConjuringsList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HighCouncilConjuringsList = append(m.HighCouncilConjuringsList, HighCouncilConjurings{})
			if err := m.HighCouncilConjuringsList[len(m.HighCouncilConjuringsList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HighCouncilConjuringsCount", wireType)
			}
			m.HighCouncilConjuringsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HighCouncilConjuringsCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpiritConjuringPoemsList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpiritConjuringPoemsList = append(m.SpiritConjuringPoemsList, SpiritConjuringPoems{})
			if err := m.SpiritConjuringPoemsList[len(m.SpiritConjuringPoemsList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpiritConjuringPoemsCount", wireType)
			}
			m.SpiritConjuringPoemsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpiritConjuringPoemsCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerseList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerseList = append(m.VerseList, Verse{})
			if err := m.VerseList[len(m.VerseList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerseCount", wireType)
			}
			m.VerseCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VerseCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisionList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VisionList = append(m.VisionList, Vision{})
			if err := m.VisionList[len(m.VisionList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisionCount", wireType)
			}
			m.VisionCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VisionCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageList = append(m.MessageList, Message{})
			if err := m.MessageList[len(m.MessageList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageCount", wireType)
			}
			m.MessageCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignatureRequestList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignatureRequestList = append(m.SignatureRequestList, SignatureRequest{})
			if err := m.SignatureRequestList[len(m.SignatureRequestList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignatureRequestCount", wireType)
			}
			m.SignatureRequestCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignatureRequestCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignatureShareList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignatureShareList = append(m.SignatureShareList, SignatureShare{})
			if err := m.SignatureShareList[len(m.SignatureShareList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignatureShareCount", wireType)
			}
			m.SignatureShareCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignatureShareCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignedMessageList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignedMessageList = append(m.SignedMessageList, SignedMessage{})
			if err := m.SignedMessageList[len(m.SignedMessageList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignedMessageCount", wireType)
			}
			m.SignedMessageCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignedMessageCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MeditationSummoningList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MeditationSummoningList = append(m.MeditationSummoningList, MeditationSummoning{})
			if err := m.MeditationSummoningList[len(m.MeditationSummoningList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MeditationSummoningCount", wireType)
			}
			m.MeditationSummoningCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MeditationSummoningCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MeditationList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MeditationList = append(m.MeditationList, Meditation{})
			if err := m.MeditationList[len(m.MeditationList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MeditationCount", wireType)
			}
			m.MeditationCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MeditationCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScriptureList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScriptureList = append(m.ScriptureList, Scripture{})
			if err := m.ScriptureList[len(m.ScriptureList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScriptureSignatureRequestList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScriptureSignatureRequestList = append(m.ScriptureSignatureRequestList, ScriptureSignatureRequest{})
			if err := m.ScriptureSignatureRequestList[len(m.ScriptureSignatureRequestList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScriptureSignatureRequestCount", wireType)
			}
			m.ScriptureSignatureRequestCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScriptureSignatureRequestCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScriptureSignatureShareList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScriptureSignatureShareList = append(m.ScriptureSignatureShareList, ScriptureSignatureShare{})
			if err := m.ScriptureSignatureShareList[len(m.ScriptureSignatureShareList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScriptureSignatureShareCount", wireType)
			}
			m.ScriptureSignatureShareCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScriptureSignatureShareCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignedScriptureList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignedScriptureList = append(m.SignedScriptureList, SignedScripture{})
			if err := m.SignedScriptureList[len(m.SignedScriptureList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignedScriptureListList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignedScriptureListList = append(m.SignedScriptureListList, SignedScriptureList{})
			if err := m.SignedScriptureListList[len(m.SignedScriptureListList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 37:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignedScriptureListCount", wireType)
			}
			m.SignedScriptureListCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignedScriptureListCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlessingList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlessingList = append(m.BlessingList, Blessing{})
			if err := m.BlessingList[len(m.BlessingList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 39:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlessingCount", wireType)
			}
			m.BlessingCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlessingCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlessingReceiptList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlessingReceiptList = append(m.BlessingReceiptList, BlessingReceipt{})
			if err := m.BlessingReceiptList[len(m.BlessingReceiptList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImploringList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImploringList = append(m.ImploringList, Imploring{})
			if err := m.ImploringList[len(m.ImploringList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 42:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImploringCount", wireType)
			}
			m.ImploringCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ImploringCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KillConjuringList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KillConjuringList = append(m.KillConjuringList, KillConjuring{})
			if err := m.KillConjuringList[len(m.KillConjuringList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 44:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KillConjuringCount", wireType)
			}
			m.KillConjuringCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KillConjuringCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KillImploringList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KillImploringList = append(m.KillImploringList, KillImploring{})
			if err := m.KillImploringList[len(m.KillImploringList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 46:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KillImploringCount", wireType)
			}
			m.KillImploringCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KillImploringCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 47:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KillMeditationSummoningList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KillMeditationSummoningList = append(m.KillMeditationSummoningList, KillMeditationSummoning{})
			if err := m.KillMeditationSummoningList[len(m.KillMeditationSummoningList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 48:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KillMeditationSummoningCount", wireType)
			}
			m.KillMeditationSummoningCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KillMeditationSummoningCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 49:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KillMagicKeySummoningList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KillMagicKeySummoningList = append(m.KillMagicKeySummoningList, KillMagicKeySummoning{})
			if err := m.KillMagicKeySummoningList[len(m.KillMagicKeySummoningList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 50:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KillMagicKeySummoningCount", wireType)
			}
			m.KillMagicKeySummoningCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KillMagicKeySummoningCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KillScriptureSignatureRequestList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KillScriptureSignatureRequestList = append(m.KillScriptureSignatureRequestList, KillScriptureSignatureRequest{})
			if err := m.KillScriptureSignatureRequestList[len(m.KillScriptureSignatureRequestList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 52:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KillScriptureSignatureRequestCount", wireType)
			}
			m.KillScriptureSignatureRequestCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KillScriptureSignatureRequestCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KillSignatureRequestList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KillSignatureRequestList = append(m.KillSignatureRequestList, KillSignatureRequest{})
			if err := m.KillSignatureRequestList[len(m.KillSignatureRequestList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 54:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KillSignatureRequestCount", wireType)
			}
			m.KillSignatureRequestCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KillSignatureRequestCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedMagicKeyShareList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptedMagicKeyShareList = append(m.EncryptedMagicKeyShareList, EncryptedMagicKeyShare{})
			if err := m.EncryptedMagicKeyShareList[len(m.EncryptedMagicKeyShareList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 56:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedPreSignList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptedPreSignList = append(m.EncryptedPreSignList, EncryptedPreSign{})
			if err := m.EncryptedPreSignList[len(m.EncryptedPreSignList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
